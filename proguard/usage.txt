com.flurry.android.AdImage:
    22:22:public final long getId()
    27:27:public final int getWidth()
    32:32:public final int getHeight()
    37:37:public final java.lang.String getMimeType()
    42:42:public final byte[] getImageData()
com.flurry.android.AppCircle:
    33:34:public void setDefaultNoAdsMessage(java.lang.String)
    48:49:public void setAppCircleCallback(com.flurry.android.AppCircleCallback)
    61:62:public void launchCatalogOnBannerClicked(boolean)
    70:71:public void launchCanvasOnBannerClicked(boolean)
    80:80:public boolean isLaunchCanvasOnBannerClicked()
    92:92:public boolean isLaunchCatalogOnBannerClicked()
    131:131:public android.view.View getHook(android.content.Context,java.lang.String,int)
    140:141:public void openCatalog(android.content.Context)
    155:156:public void openCatalog(android.content.Context,java.lang.String)
    175:175:public boolean hasAds()
    214:214:public com.flurry.android.Offer getOffer(java.lang.String)
    230:230:public java.util.List getAllOffers(java.lang.String)
    259:260:public void acceptOffer(android.content.Context,long)
    268:269:public void removeOffers(java.util.List)
    277:277:public com.flurry.android.Offer getOffer()
    286:286:public java.util.List getAllOffers()
    308:309:public void addUserCookie(java.lang.String,java.lang.String)
    318:319:public void clearUserCookies()
com.flurry.android.CallbackEvent:
    public static final int ERROR_MARKET_LAUNCH
    public static final int ADS_LOADED_FROM_CACHE
    public static final int ADS_UPDATED
    30:30:public final int getType()
    38:38:public final java.lang.String getMessage()
    51:51:public final long getTimestamp()
    56:57:public final void setTimestamp(long)
com.flurry.android.Constants
com.flurry.android.FlurryAgent:
    296:297:public static void setCatalogIntentName(java.lang.String)
    311:312:public static void enableAppCircle()
    321:321:public static com.flurry.android.AppCircle getAppCircle()
    332:341:static android.view.View a(android.content.Context,java.lang.String,int)
    347:350:static void a(android.content.Context,java.lang.String)
    359:361:static com.flurry.android.Offer a(java.lang.String)
    366:368:static java.util.List b(java.lang.String)
    373:379:static void a(android.content.Context,long)
    383:386:static void a(java.util.List)
    390:393:static void a(boolean)
    397:397:static boolean a()
    404:407:public static void setDefaultNoAdsMessage(java.lang.String)
    411:412:static void a(com.flurry.android.AppCircleCallback)
    416:419:public static void addUserCookie(java.lang.String,java.lang.String)
    423:426:public static void clearUserCookies()
    447:450:public static void setVersionName(java.lang.String)
    459:459:public static int getAgentVersion()
    471:474:public static void setReportLocation(boolean)
    483:493:public static void setLogEnabled(boolean)
    502:505:public static void setLogLevel(int)
    529:538:public static void setContinueSessionMillis(long)
    547:550:public static void setLogEvents(boolean)
    561:562:public static void setUseHttps(boolean)
    570:578:public static void setCaptureUncaughtExceptions(boolean)
    711:717:public static void logEvent(java.lang.String)
    747:753:public static void logEvent(java.lang.String,java.util.Map)
    771:777:public static void logEvent(java.lang.String,boolean)
    797:803:public static void logEvent(java.lang.String,java.util.Map,boolean)
    816:822:public static void endTimedEvent(java.lang.String)
    876:882:public static void onEvent(java.lang.String,java.util.Map)
    896:902:public static void onPageView()
    908:909:public static void setReportUrl(java.lang.String)
    913:914:public static void setCanvasUrl(java.lang.String)
    918:919:public static void setGetAppUrl(java.lang.String)
    933:936:public static void setLocationCriteria(android.location.Criteria)
    952:959:public static void setAge(int)
    968:978:public static void setGender(byte)
    989:992:public static void setUserId(java.lang.String)
    1016:1016:public static boolean getForbidPlaintextFallback()
    1367:1368:private synchronized void j()
    1456:1465:private synchronized void c(java.lang.String)
    1618:1620:static boolean d()
    2349:2349:private synchronized java.lang.String n()
    2354:2354:public static java.lang.String getPhoneId()
com.flurry.android.Offer
com.flurry.android.OfferInSdk
com.flurry.android.ag:
    39:41:final synchronized void a(com.flurry.android.o)
com.flurry.android.ah:
    7:7:ah()
    25:26:static void a()
    32:33:static void b()
    37:38:static void a(int)
    103:105:static int d(java.lang.String,java.lang.String,java.lang.Throwable)
com.flurry.android.i:
    31:31:public final boolean a(java.lang.String)
    36:38:public final void a(long)
com.flurry.android.o:
    32:38:o(com.flurry.android.u,android.content.Context,java.lang.String,int)
com.flurry.android.r:
    19:19:r()
com.flurry.android.u:
    261:287:final synchronized void a(android.content.Context,java.lang.String)
    291:292:final void a(com.flurry.android.AppCircleCallback)
    296:297:final void a(boolean)
    301:301:final boolean h()
    450:465:final synchronized com.flurry.android.Offer b(java.lang.String)
    470:490:final synchronized void a(android.content.Context,long)
    494:516:final synchronized java.util.List c(java.lang.String)
    521:529:final synchronized void a(java.util.List)
    533:545:private com.flurry.android.Offer a(java.lang.String,com.flurry.android.v)
    594:602:final synchronized android.view.View a(android.content.Context,java.lang.String,int)
    680:681:final synchronized void a(java.lang.String,java.lang.String)
    685:686:final synchronized void k()
    848:852:final synchronized boolean m()
com.itextpdf.text.Anchor:
    private static final long serialVersionUID
    22:23:public Anchor(float)
    26:27:public Anchor(com.itextpdf.text.Chunk)
    30:31:public Anchor(java.lang.String)
    34:35:public Anchor(java.lang.String,com.itextpdf.text.Font)
    38:39:public Anchor(float,com.itextpdf.text.Chunk)
    42:43:public Anchor(float,java.lang.String)
    46:47:public Anchor(float,java.lang.String,com.itextpdf.text.Font)
    50:56:public Anchor(com.itextpdf.text.Phrase)
    112:113:public void setName(java.lang.String)
    116:117:public void setReference(java.lang.String)
    120:120:public java.lang.String getName()
    129:132:public java.net.URL getUrl()
com.itextpdf.text.Annotation:
    public static final int TEXT
    public static final int URL_NET
    public static final int URL_AS_STRING
    public static final int FILE_DEST
    public static final int FILE_PAGE
    public static final int NAMED_DEST
    public static final int LAUNCH
    public static final int SCREEN
    public static final java.lang.String TITLE
    public static final java.lang.String CONTENT
    public static final java.lang.String URL
    public static final java.lang.String FILE
    public static final java.lang.String DESTINATION
    public static final java.lang.String PAGE
    public static final java.lang.String NAMED
    public static final java.lang.String APPLICATION
    public static final java.lang.String PARAMETERS
    public static final java.lang.String OPERATION
    public static final java.lang.String DEFAULTDIR
    public static final java.lang.String LLX
    public static final java.lang.String LLY
    public static final java.lang.String URX
    public static final java.lang.String URY
    public static final java.lang.String MIMETYPE
    70:75:private Annotation(float,float,float,float)
    77:84:public Annotation(com.itextpdf.text.Annotation)
    86:90:public Annotation(java.lang.String,java.lang.String)
    94:98:public Annotation(java.lang.String,java.lang.String,float,float,float,float)
    101:104:public Annotation(float,float,float,float,java.net.URL)
    107:110:public Annotation(float,float,float,float,java.lang.String)
    114:118:public Annotation(float,float,float,float,java.lang.String,java.lang.String)
    122:128:public Annotation(float,float,float,float,java.lang.String,java.lang.String,boolean)
    132:136:public Annotation(float,float,float,float,java.lang.String,int)
    139:142:public Annotation(float,float,float,float,int)
    147:153:public Annotation(float,float,float,float,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
    172:176:public void setDimensions(float,float,float,float)
com.itextpdf.text.BadElementException
com.itextpdf.text.BaseColor:
    private static final double FACTOR
    42:44:public BaseColor(int)
    63:63:public int getAlpha()
    67:82:public com.itextpdf.text.BaseColor brighter()
    88:88:public com.itextpdf.text.BaseColor darker()
com.itextpdf.text.Chapter:
    private static final long serialVersionUID
    10:14:public Chapter(int)
    17:21:public Chapter(com.itextpdf.text.Paragraph,int)
    24:25:public Chapter(java.lang.String,int)
com.itextpdf.text.ChapterAutoNumber:
    private static final long serialVersionUID
    12:13:public ChapterAutoNumber(com.itextpdf.text.Paragraph)
    16:17:public ChapterAutoNumber(java.lang.String)
    21:24:public com.itextpdf.text.Section addSection(java.lang.String)
    29:32:public com.itextpdf.text.Section addSection(com.itextpdf.text.Paragraph)
com.itextpdf.text.Chunk:
    public static final java.lang.String OBJECT_REPLACEMENT_CHARACTER
    public static final java.lang.String SEPARATOR
    public static final java.lang.String TAB
    public static final java.lang.String HSCALE
    public static final java.lang.String UNDERLINE
    public static final java.lang.String SUBSUPSCRIPT
    public static final java.lang.String SKEW
    public static final java.lang.String BACKGROUND
    public static final java.lang.String TEXTRENDERMODE
    public static final java.lang.String SPLITCHARACTER
    public static final java.lang.String HYPHENATION
    public static final java.lang.String REMOTEGOTO
    public static final java.lang.String LOCALGOTO
    public static final java.lang.String LOCALDESTINATION
    public static final java.lang.String GENERICTAG
    public static final java.lang.String IMAGE
    public static final java.lang.String ACTION
    public static final java.lang.String NEWPAGE
    public static final java.lang.String PDFANNOTATION
    public static final java.lang.String COLOR
    public static final java.lang.String ENCODING
    public static final java.lang.String CHAR_SPACING
    37:47:public Chunk(com.itextpdf.text.Chunk)
    58:62:public Chunk(char,com.itextpdf.text.Font)
    65:66:public Chunk(char)
    71:72:public Chunk(com.itextpdf.text.pdf.draw.DrawInterface)
    82:83:public Chunk(com.itextpdf.text.pdf.draw.DrawInterface,float)
    86:91:public Chunk(com.itextpdf.text.pdf.draw.DrawInterface,float,boolean)
    139:139:public float getWidthPoint()
    166:166:public com.itextpdf.text.Chunk setHorizontalScaling(float)
    170:175:public float getHorizontalScaling()
    181:181:public com.itextpdf.text.Chunk setUnderline(float,float)
    187:194:public com.itextpdf.text.Chunk setUnderline(com.itextpdf.text.BaseColor,float,float,float,float,int)
    200:200:public com.itextpdf.text.Chunk setTextRise(float)
    204:208:public float getTextRise()
    214:216:public com.itextpdf.text.Chunk setSkew(float,float)
    222:222:public com.itextpdf.text.Chunk setBackground(com.itextpdf.text.BaseColor)
    227:227:public com.itextpdf.text.Chunk setBackground(com.itextpdf.text.BaseColor,float,float,float,float)
    235:235:public com.itextpdf.text.Chunk setTextRenderMode(int,float,com.itextpdf.text.BaseColor)
    242:242:public com.itextpdf.text.Chunk setSplitCharacter(com.itextpdf.text.SplitCharacter)
    254:254:public com.itextpdf.text.Chunk setRemoteGoto(java.lang.String,java.lang.String)
    258:258:public com.itextpdf.text.Chunk setRemoteGoto(java.lang.String,int)
    277:277:public com.itextpdf.text.Chunk setGenericTag(java.lang.String)
    289:289:public com.itextpdf.text.Chunk setAnchor(java.net.URL)
    305:305:public com.itextpdf.text.Chunk setAnnotation(com.itextpdf.text.pdf.PdfAnnotation)
    328:328:public com.itextpdf.text.Chunk setCharacterSpacing(float)
    332:336:public float getCharacterSpacing()
com.itextpdf.text.DocListener:
    public abstract boolean setMarginMirroring(boolean)
    public abstract boolean setMarginMirroringTopBottom(boolean)
    public abstract void setPageCount(int)
    public abstract void resetPageCount()
com.itextpdf.text.DocWriter:
    public static final byte NEWLINE
    public static final byte TAB
    public static final byte LT
    public static final byte SPACE
    public static final byte EQUALS
    public static final byte QUOTE
    public static final byte GT
    public static final byte FORWARD
    62:62:public void resetPageCount()
    65:65:public void setPageCount(int)
    90:91:public void pause()
    98:99:public void resume()
    103:108:public void flush()
    111:112:protected void write(java.lang.String)
    115:119:protected void addTabs(int)
    123:129:protected void write(java.lang.String,java.lang.String)
    133:135:protected void writeStart(java.lang.String)
    139:143:protected void writeEnd(java.lang.String)
    147:150:protected void writeEnd()
    154:162:protected boolean writeMarkupAttributes(java.util.Properties)
    166:166:public boolean isCloseStream()
    170:171:public void setCloseStream(boolean)
    174:174:public boolean setMarginMirroring(boolean)
    178:178:public boolean setMarginMirroringTopBottom(boolean)
com.itextpdf.text.Document:
    private static final java.lang.String ITEXT
    private static final java.lang.String RELEASE
    private static final java.lang.String ITEXT_VERSION
    57:58:public void removeDocListener(com.itextpdf.text.DocListener)
    126:130:public void resetPageCount()
    133:137:public void setPageCount(int)
    155:157:public boolean addHeader(java.lang.String,java.lang.String)
    229:229:public float topMargin()
    233:233:public float bottomMargin()
    273:273:public boolean isOpen()
    277:277:public static final java.lang.String getProduct()
    289:290:public void setJavaScript_onLoad(java.lang.String)
    293:293:public java.lang.String getJavaScript_onLoad()
    297:298:public void setJavaScript_onUnLoad(java.lang.String)
    301:301:public java.lang.String getJavaScript_onUnLoad()
    305:306:public void setHtmlStyleClass(java.lang.String)
    309:309:public java.lang.String getHtmlStyleClass()
    313:319:public boolean setMarginMirroring(boolean)
    323:329:public boolean setMarginMirroringTopBottom(boolean)
com.itextpdf.text.DocumentException:
    private static final long serialVersionUID
com.itextpdf.text.Element:
    public static final int HEADER
    public static final int TITLE
    public static final int SUBJECT
    public static final int KEYWORDS
    public static final int AUTHOR
    public static final int PRODUCER
    public static final int CREATIONDATE
    public static final int CREATOR
    public static final int CHUNK
    public static final int PHRASE
    public static final int PARAGRAPH
    public static final int SECTION
    public static final int LIST
    public static final int LISTITEM
    public static final int CHAPTER
    public static final int ANCHOR
    public static final int PTABLE
    public static final int ANNOTATION
    public static final int RECTANGLE
    public static final int JPEG
    public static final int JPEG2000
    public static final int IMGRAW
    public static final int IMGTEMPLATE
    public static final int JBIG2
    public static final int MULTI_COLUMN_TEXT
    public static final int MARKED
    public static final int YMARK
    public static final int WRITABLE_DIRECT
    public static final int ALIGN_UNDEFINED
    public static final int ALIGN_LEFT
    public static final int ALIGN_CENTER
    public static final int ALIGN_RIGHT
    public static final int ALIGN_JUSTIFIED
    public static final int ALIGN_TOP
    public static final int ALIGN_MIDDLE
    public static final int ALIGN_BOTTOM
    public static final int ALIGN_BASELINE
    public static final int ALIGN_JUSTIFIED_ALL
    public static final int CCITTG4
    public static final int CCITTG3_1D
    public static final int CCITTG3_2D
    public static final int CCITT_BLACKIS1
    public static final int CCITT_ENCODEDBYTEALIGN
    public static final int CCITT_ENDOFLINE
    public static final int CCITT_ENDOFBLOCK
    public abstract java.lang.String toString()
com.itextpdf.text.ExceptionConverter:
    private static final long serialVersionUID
    22:22:public java.lang.Exception getException()
com.itextpdf.text.Font:
    public static final int NORMAL
    public static final int BOLD
    public static final int ITALIC
    public static final int UNDERLINE
    public static final int STRIKETHRU
    public static final int BOLDITALIC
    public static final int UNDEFINED
    public static final int DEFAULTSIZE
    69:70:public Font(com.itextpdf.text.pdf.BaseFont,float,int)
    73:74:public Font(com.itextpdf.text.pdf.BaseFont,float)
    77:78:public Font(com.itextpdf.text.pdf.BaseFont)
    85:86:public Font(com.itextpdf.text.Font$FontFamily,float)
    89:90:public Font(com.itextpdf.text.Font$FontFamily)
    168:169:public void setFamily(java.lang.String)
    172:187:public static com.itextpdf.text.Font$FontFamily getFamily(java.lang.String)
    207:208:public void setSize(float)
    215:224:public int getCalculatedStyle()
    228:231:public boolean isBold()
    235:238:public boolean isItalic()
    260:263:public void setStyle(java.lang.String)
    266:285:public static int getStyleValue(java.lang.String)
    293:294:public void setColor(com.itextpdf.text.BaseColor)
    297:298:public void setColor(int,int,int)
com.itextpdf.text.Font$FontStyle
com.itextpdf.text.FontFactory:
    public static final java.lang.String COURIER
    public static final java.lang.String COURIER_BOLD
    public static final java.lang.String COURIER_OBLIQUE
    public static final java.lang.String COURIER_BOLDOBLIQUE
    public static final java.lang.String HELVETICA
    public static final java.lang.String HELVETICA_BOLD
    public static final java.lang.String HELVETICA_OBLIQUE
    public static final java.lang.String HELVETICA_BOLDOBLIQUE
    public static final java.lang.String SYMBOL
    public static final java.lang.String TIMES
    public static final java.lang.String TIMES_ROMAN
    public static final java.lang.String TIMES_BOLD
    public static final java.lang.String TIMES_ITALIC
    public static final java.lang.String TIMES_BOLDITALIC
    public static final java.lang.String ZAPFDINGBATS
    31:32:private FontFactory()
    39:39:public static com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean,float,int,com.itextpdf.text.BaseColor,boolean)
    43:43:public static com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean,float,int)
    47:47:public static com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean,float)
    51:51:public static com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean)
    55:55:public static com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,float,int,com.itextpdf.text.BaseColor)
    59:59:public static com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,float,int)
    63:63:public static com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,float)
    67:67:public static com.itextpdf.text.Font getFont(java.lang.String,java.lang.String)
    75:75:public static com.itextpdf.text.Font getFont(java.lang.String,float,com.itextpdf.text.BaseColor)
    79:79:public static com.itextpdf.text.Font getFont(java.lang.String,float,int)
    83:83:public static com.itextpdf.text.Font getFont(java.lang.String,float)
    87:87:public static com.itextpdf.text.Font getFont(java.lang.String)
    91:92:public static void registerFamily(java.lang.String,java.lang.String,java.lang.String)
    95:96:public static void register(java.lang.String)
    99:100:public static void register(java.lang.String,java.lang.String)
    103:103:public static int registerDirectory(java.lang.String)
    107:107:public static int registerDirectory(java.lang.String,boolean)
    111:111:public static int registerDirectories()
    115:115:public static java.util.Set getRegisteredFonts()
    119:119:public static java.util.Set getRegisteredFamilies()
    123:123:public static boolean contains(java.lang.String)
    127:127:public static boolean isRegistered(java.lang.String)
    131:131:public static com.itextpdf.text.FontFactoryImp getFontImp()
    135:138:public static void setFontImp(com.itextpdf.text.FontFactoryImp)
com.itextpdf.text.FontFactoryImp:
    130:130:public com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean,float,int)
    134:134:public com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean,float)
    138:138:public com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean)
    142:142:public com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,float,int,com.itextpdf.text.BaseColor)
    146:146:public com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,float,int)
    150:150:public com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,float)
    154:154:public com.itextpdf.text.Font getFont(java.lang.String,float,com.itextpdf.text.BaseColor)
    158:158:public com.itextpdf.text.Font getFont(java.lang.String,java.lang.String)
    162:162:public com.itextpdf.text.Font getFont(java.lang.String,float,int,com.itextpdf.text.BaseColor)
    166:166:public com.itextpdf.text.Font getFont(java.lang.String,float,int)
    170:170:public com.itextpdf.text.Font getFont(java.lang.String,float)
    174:174:public com.itextpdf.text.Font getFont(java.lang.String)
    178:199:public void registerFamily(java.lang.String,java.lang.String,java.lang.String)
    202:203:public void register(java.lang.String)
    207:274:public void register(java.lang.String,java.lang.String)
    277:277:public int registerDirectory(java.lang.String)
    281:320:public int registerDirectory(java.lang.String,boolean)
    324:337:public int registerDirectories()
    341:341:public java.util.Set getRegisteredFonts()
    345:345:public java.util.Set getRegisteredFamilies()
    349:349:public boolean isRegistered(java.lang.String)
com.itextpdf.text.FontProvider
com.itextpdf.text.Header
com.itextpdf.text.LargeElement:
    public abstract void setComplete(boolean)
com.itextpdf.text.List:
    public static final boolean ORDERED
    public static final boolean UNORDERED
    public static final boolean NUMERICAL
    public static final boolean ALPHABETICAL
    public static final boolean UPPERCASE
    public static final boolean LOWERCASE
    36:38:public List(float)
    41:42:public List(boolean)
    52:53:public List(boolean,float)
    55:59:public List(boolean,boolean,float)
    86:89:public boolean add(java.lang.String)
    93:119:public boolean add(com.itextpdf.text.Element)
    137:138:public void setNumbered(boolean)
    141:142:public void setLettered(boolean)
    145:146:public void setLowercase(boolean)
    149:150:public void setAutoindent(boolean)
    153:154:public void setAlignindent(boolean)
    157:158:public void setFirst(int)
    161:162:public void setListSymbol(com.itextpdf.text.Chunk)
    165:166:public void setListSymbol(java.lang.String)
    177:178:public void setSymbolIndent(float)
    185:185:public int size()
    189:189:public boolean isEmpty()
    193:197:public float getTotalLeading()
    201:201:public boolean isNumbered()
    205:205:public boolean isLettered()
    209:209:public boolean isLowercase()
    213:213:public boolean isAutoindent()
    221:221:public int getFirst()
    225:225:public com.itextpdf.text.Chunk getSymbol()
    237:237:public float getSymbolIndent()
    249:249:public java.lang.String getPostSymbol()
    253:254:public void setPostSymbol(java.lang.String)
    257:257:public java.lang.String getPreSymbol()
    261:262:public void setPreSymbol(java.lang.String)
com.itextpdf.text.ListItem:
    private static final long serialVersionUID
    14:15:public ListItem(float)
    18:19:public ListItem(com.itextpdf.text.Chunk)
    22:23:public ListItem(java.lang.String)
    26:27:public ListItem(java.lang.String,com.itextpdf.text.Font)
    30:31:public ListItem(float,com.itextpdf.text.Chunk)
    34:35:public ListItem(float,java.lang.String)
    38:39:public ListItem(float,java.lang.String,com.itextpdf.text.Font)
    42:43:public ListItem(com.itextpdf.text.Phrase)
    51:57:public void setListSymbol(com.itextpdf.text.Chunk)
    60:66:public void setIndentationLeft(float,boolean)
    69:72:public void adjustListSymbolFont()
com.itextpdf.text.MarkedObject:
    45:45:public java.util.Properties getMarkupAttributes()
    49:50:public void setMarkupAttribute(java.lang.String,java.lang.String)
com.itextpdf.text.MarkedSection:
    13:19:public MarkedSection(com.itextpdf.text.Section)
    22:23:public void add(int,com.itextpdf.text.Element)
    26:26:public boolean add(com.itextpdf.text.Element)
    44:44:public boolean addAll(java.util.Collection)
    48:51:public com.itextpdf.text.MarkedSection addSection(float,int)
    55:57:public com.itextpdf.text.MarkedSection addSection(float)
    61:63:public com.itextpdf.text.MarkedSection addSection(int)
    67:67:public com.itextpdf.text.MarkedSection addSection()
    71:73:public void setTitle(com.itextpdf.text.MarkedObject)
    83:84:public void setNumberDepth(int)
    87:88:public void setIndentationLeft(float)
    91:92:public void setIndentationRight(float)
    95:96:public void setIndentation(float)
    99:100:public void setBookmarkOpen(boolean)
    103:104:public void setTriggerNewPage(boolean)
    107:108:public void setBookmarkTitle(java.lang.String)
    111:112:public void newPage()
    115:115:public float getIndentationLeft()
    119:119:public float getIndentationRight()
com.itextpdf.text.Meta:
    public static final java.lang.String UNKNOWN
    public static final java.lang.String PRODUCER
    public static final java.lang.String CREATIONDATE
    public static final java.lang.String AUTHOR
    public static final java.lang.String KEYWORDS
    public static final java.lang.String SUBJECT
    public static final java.lang.String TITLE
    24:27:public Meta(java.lang.String,java.lang.String)
    55:55:public java.lang.StringBuffer append(java.lang.String)
    82:100:public static int getType(java.lang.String)
com.itextpdf.text.PageSize:
    6:6:public PageSize()
    65:81:public static com.itextpdf.text.Rectangle getRectangle(java.lang.String)
com.itextpdf.text.Paragraph:
    private static final long serialVersionUID
    25:26:public Paragraph(float)
    33:34:public Paragraph(float,com.itextpdf.text.Chunk)
    45:46:public Paragraph(float,java.lang.String)
    49:50:public Paragraph(float,java.lang.String,com.itextpdf.text.Font)
    101:103:public void setLeading(float)
    106:108:public void setMultipliedLeading(float)
    136:137:public void setKeepTogether(boolean)
com.itextpdf.text.Phrase:
    private static final long serialVersionUID
    41:46:public Phrase(float,com.itextpdf.text.Chunk)
    57:58:public Phrase(float,java.lang.String)
    131:134:public boolean add(java.lang.String)
    214:215:protected void addSpecial(com.itextpdf.text.Element)
    218:219:public void setLeading(float)
    222:223:public void setFont(com.itextpdf.text.Font)
    244:248:public java.lang.String getContent()
    275:276:private Phrase(boolean)
    279:279:public static final com.itextpdf.text.Phrase getInstance(java.lang.String)
    283:283:public static final com.itextpdf.text.Phrase getInstance(int,java.lang.String)
    287:312:public static final com.itextpdf.text.Phrase getInstance(int,java.lang.String,com.itextpdf.text.Font)
com.itextpdf.text.Rectangle:
    public static final int UNDEFINED
    public static final int TOP
    public static final int BOTTOM
    public static final int LEFT
    public static final int RIGHT
    public static final int NO_BORDER
    public static final int BOX
    45:47:public Rectangle(float,float,float,float,int)
    54:55:public Rectangle(float,float,int)
    144:154:public void normalize()
    173:175:public com.itextpdf.text.Rectangle rotate()
    187:189:public float getGrayFill()
    193:194:public void setGrayFill(float)
    197:197:public int getBorder()
    226:227:public void setUseVariableBorders(boolean)
    230:233:public void enableBorderSide(int)
    236:239:public void disableBorderSide(int)
    256:261:private void updateBorderBasedOnWidth(float,int)
    268:270:public void setBorderWidthLeft(float)
    277:279:public void setBorderWidthRight(float)
    286:288:public void setBorderWidthTop(float)
    295:297:public void setBorderWidthBottom(float)
    304:305:public void setBorderColor(com.itextpdf.text.BaseColor)
    314:315:public void setBorderColorLeft(com.itextpdf.text.BaseColor)
    324:325:public void setBorderColorRight(com.itextpdf.text.BaseColor)
    334:335:public void setBorderColorTop(com.itextpdf.text.BaseColor)
    344:345:public void setBorderColorBottom(com.itextpdf.text.BaseColor)
    348:357:public com.itextpdf.text.Rectangle rectangle(float,float)
    378:406:public void softCloneNonPositionParameters(com.itextpdf.text.Rectangle)
com.itextpdf.text.RectangleReadOnly:
    9:10:public RectangleReadOnly(float,float,float,float)
    13:15:public RectangleReadOnly(float,float,float,float,int)
    27:29:public RectangleReadOnly(com.itextpdf.text.Rectangle)
    62:63:public void normalize()
    72:73:public void setGrayFill(float)
    82:83:public void setUseVariableBorders(boolean)
    87:88:public void enableBorderSide(int)
    92:93:public void disableBorderSide(int)
    102:103:public void setBorderWidthLeft(float)
    107:108:public void setBorderWidthRight(float)
    112:113:public void setBorderWidthTop(float)
    117:118:public void setBorderWidthBottom(float)
    122:123:public void setBorderColor(com.itextpdf.text.BaseColor)
    127:128:public void setBorderColorLeft(com.itextpdf.text.BaseColor)
    132:133:public void setBorderColorRight(com.itextpdf.text.BaseColor)
    137:138:public void setBorderColorTop(com.itextpdf.text.BaseColor)
    142:143:public void setBorderColorBottom(com.itextpdf.text.BaseColor)
    152:153:public void softCloneNonPositionParameters(com.itextpdf.text.Rectangle)
com.itextpdf.text.Section:
    public static final int NUMBERSTYLE_DOTTED
    public static final int NUMBERSTYLE_DOTTED_WITHOUT_FINAL_DOT
    private static final long serialVersionUID
    38:41:protected Section(com.itextpdf.text.Paragraph,int)
    62:62:public boolean isChapter()
    66:66:public boolean isSection()
    141:147:public com.itextpdf.text.Section addSection(float,com.itextpdf.text.Paragraph,int)
    151:151:public com.itextpdf.text.Section addSection(float,com.itextpdf.text.Paragraph)
    155:155:public com.itextpdf.text.Section addSection(com.itextpdf.text.Paragraph,int)
    159:161:protected com.itextpdf.text.MarkedSection addMarkedSection()
    165:165:public com.itextpdf.text.Section addSection(com.itextpdf.text.Paragraph)
    169:169:public com.itextpdf.text.Section addSection(float,java.lang.String,int)
    173:173:public com.itextpdf.text.Section addSection(java.lang.String,int)
    177:177:public com.itextpdf.text.Section addSection(float,java.lang.String)
    181:181:public com.itextpdf.text.Section addSection(java.lang.String)
    185:186:public void setTitle(com.itextpdf.text.Paragraph)
    215:216:public void setNumberDepth(int)
    219:219:public int getNumberDepth()
    223:224:public void setNumberStyle(int)
    227:227:public int getNumberStyle()
    231:232:public void setIndentationLeft(float)
    239:240:public void setIndentationRight(float)
    247:248:public void setIndentation(float)
    255:256:public void setBookmarkOpen(boolean)
    263:264:public void setTriggerNewPage(boolean)
    271:272:public void setBookmarkTitle(java.lang.String)
    343:344:public void setComplete(boolean)
    347:348:public void newPage()
com.itextpdf.text.SpecialSymbol
com.itextpdf.text.TextElementArray:
    public abstract boolean add(com.itextpdf.text.Element)
com.itextpdf.text.Utilities:
    13:13:public Utilities()
    29:29:public static boolean checkTrueOrFalse(java.util.Properties,java.lang.String)
    33:54:public static java.lang.String unEscapeURL(java.lang.String)
    59:62:public static java.net.URL toURL(java.lang.String)
    68:74:public static void skip(java.io.InputStream,int)
    77:77:public static final float millimetersToPoints(float)
    81:81:public static final float millimetersToInches(float)
    85:85:public static final float pointsToMillimeters(float)
    89:89:public static final float pointsToInches(float)
    93:93:public static final float inchesToMillimeters(float)
    97:97:public static final float inchesToPoints(float)
    133:136:public static java.lang.String convertFromUtf32(int)
    140:140:public static java.lang.String readFileToString(java.lang.String)
    144:147:public static java.lang.String readFileToString(java.io.File)
com.itextpdf.text.api.Indentable
com.itextpdf.text.api.Spaceable
com.itextpdf.text.error_messages.MessageLocalization:
    private static final java.lang.String BASE_PATH
    64:68:public static boolean setLanguage(java.lang.String,java.lang.String)
    72:73:public static void setMessages(java.io.Reader)
com.itextpdf.text.exceptions.BadPasswordException
com.itextpdf.text.exceptions.IllegalPdfSyntaxException:
    private static final long serialVersionUID
com.itextpdf.text.exceptions.InvalidPdfException:
    private static final long serialVersionUID
com.itextpdf.text.exceptions.UnsupportedPdfException:
    private static final long serialVersionUID
com.itextpdf.text.factories.RomanAlphabetFactory
com.itextpdf.text.factories.RomanNumberFactory
com.itextpdf.text.factories.RomanNumberFactory$RomanDigit
com.itextpdf.text.log.Level
com.itextpdf.text.log.Logger:
    public abstract com.itextpdf.text.log.Logger getLogger(java.lang.String)
    public abstract boolean isLogging(com.itextpdf.text.log.Level)
    public abstract void warn(java.lang.String)
    public abstract void trace(java.lang.String)
    public abstract void debug(java.lang.String)
    public abstract void info(java.lang.String)
    public abstract void error(java.lang.String)
    public abstract void error(java.lang.String,java.lang.Exception)
com.itextpdf.text.log.LoggerFactory:
    16:16:public static com.itextpdf.text.log.Logger getLogger(java.lang.String)
    20:20:public static com.itextpdf.text.log.LoggerFactory getInstance()
    29:30:public void setLogger(com.itextpdf.text.log.Logger)
    33:33:public com.itextpdf.text.log.Logger logger()
com.itextpdf.text.log.NoOpLogger:
    10:10:public void warn(java.lang.String)
    13:13:public void trace(java.lang.String)
    16:16:public void debug(java.lang.String)
    19:19:public void info(java.lang.String)
    22:22:public void error(java.lang.String,java.lang.Exception)
    25:25:public boolean isLogging(com.itextpdf.text.log.Level)
    29:29:public void error(java.lang.String)
    32:32:public com.itextpdf.text.log.Logger getLogger(java.lang.String)
com.itextpdf.text.pdf.AcroFields
com.itextpdf.text.pdf.AcroFields$FieldPosition
com.itextpdf.text.pdf.AcroFields$InstHit
com.itextpdf.text.pdf.AcroFields$Item
com.itextpdf.text.pdf.AcroFields$RevisionStream
com.itextpdf.text.pdf.AcroFields$SorterComparator
com.itextpdf.text.pdf.ArabicLigaturizer:
    private static final char ALEF
    private static final char ALEFHAMZA
    private static final char ALEFHAMZABELOW
    private static final char ALEFMADDA
    private static final char LAM
    private static final char ZWJ
    private static final char HAMZAABOVE
    private static final char HAMZABELOW
    private static final char WAWHAMZA
    private static final char YEHHAMZA
    private static final char WAW
    private static final char ALEFMAKSURA
    private static final char YEH
    private static final char FARSIYEH
    private static final char SHADDA
    private static final char KASRA
    private static final char FATHA
    private static final char DAMMA
    private static final char MADDA
    private static final char LAM_ALEF
    private static final char LAM_ALEFHAMZA
    private static final char LAM_ALEFHAMZABELOW
    private static final char LAM_ALEFMADDA
    public static final int ar_nothing
    public static final int ar_novowel
    public static final int ar_composedtashkeel
    public static final int ar_lig
    public static final int DIGITS_EN2AN
    public static final int DIGITS_AN2EN
    public static final int DIGITS_EN2AN_INIT_LR
    public static final int DIGITS_EN2AN_INIT_AL
    public static final int DIGITS_MASK
    public static final int DIGIT_TYPE_AN
    public static final int DIGIT_TYPE_AN_EXTENDED
    public static final int DIGIT_TYPE_MASK
    3:3:public ArabicLigaturizer()
com.itextpdf.text.pdf.BadPdfFormatException:
    private static final long serialVersionUID
com.itextpdf.text.pdf.BaseField
com.itextpdf.text.pdf.BaseFont:
    public static final java.lang.String COURIER
    public static final java.lang.String COURIER_BOLD
    public static final java.lang.String COURIER_OBLIQUE
    public static final java.lang.String COURIER_BOLDOBLIQUE
    public static final java.lang.String HELVETICA
    public static final java.lang.String HELVETICA_BOLD
    public static final java.lang.String HELVETICA_OBLIQUE
    public static final java.lang.String HELVETICA_BOLDOBLIQUE
    public static final java.lang.String SYMBOL
    public static final java.lang.String TIMES_ROMAN
    public static final java.lang.String TIMES_BOLD
    public static final java.lang.String TIMES_ITALIC
    public static final java.lang.String TIMES_BOLDITALIC
    public static final java.lang.String ZAPFDINGBATS
    public static final int ASCENT
    public static final int CAPHEIGHT
    public static final int DESCENT
    public static final int ITALICANGLE
    public static final int BBOXLLX
    public static final int BBOXLLY
    public static final int BBOXURX
    public static final int BBOXURY
    public static final int AWT_ASCENT
    public static final int AWT_DESCENT
    public static final int AWT_LEADING
    public static final int AWT_MAXADVANCE
    public static final int UNDERLINE_POSITION
    public static final int UNDERLINE_THICKNESS
    public static final int STRIKETHROUGH_POSITION
    public static final int STRIKETHROUGH_THICKNESS
    public static final int SUBSCRIPT_SIZE
    public static final int SUBSCRIPT_OFFSET
    public static final int SUPERSCRIPT_SIZE
    public static final int SUPERSCRIPT_OFFSET
    public static final int WEIGHT_CLASS
    public static final int WIDTH_CLASS
    public static final int FONT_WEIGHT
    public static final int FONT_TYPE_T1
    public static final int FONT_TYPE_TT
    public static final int FONT_TYPE_CJK
    public static final int FONT_TYPE_TTUNI
    public static final int FONT_TYPE_DOCUMENT
    public static final int FONT_TYPE_T3
    public static final java.lang.String IDENTITY_H
    public static final java.lang.String IDENTITY_V
    public static final java.lang.String CP1250
    public static final java.lang.String CP1252
    public static final java.lang.String CP1257
    public static final java.lang.String WINANSI
    public static final java.lang.String MACROMAN
    public static final boolean EMBEDDED
    public static final boolean NOT_EMBEDDED
    public static final boolean CACHED
    public static final boolean NOT_CACHED
    public static final java.lang.String RESOURCE_PATH
    public static final char CID_NEWLINE
    public static final java.lang.String notdef
    148:148:public static com.itextpdf.text.pdf.BaseFont createFont()
    156:156:public static com.itextpdf.text.pdf.BaseFont createFont(java.lang.String,java.lang.String,boolean,boolean)
    216:216:public static com.itextpdf.text.pdf.BaseFont createFont(com.itextpdf.text.pdf.PRIndirectReference)
    public abstract int getKerning(int,int)
    public abstract boolean setKerning(int,int,int)
    358:365:public int getDescent(java.lang.String)
    369:376:public int getAscent(java.lang.String)
    380:380:public float getDescentPoint(java.lang.String,float)
    384:384:public float getAscentPoint(java.lang.String,float)
    388:397:public float getWidthPointKerned(java.lang.String,float)
    abstract com.itextpdf.text.pdf.PdfStream getFullFontStream()
    public abstract void setPostscriptFontName(java.lang.String)
    public abstract java.lang.String[][] getFullFontName()
    public abstract java.lang.String[][] getAllNameEntries()
    481:487:public static java.lang.String[][] getFullFontName(java.lang.String,java.lang.String,byte[])
    491:497:public static java.lang.Object[] getAllFontNames(java.lang.String,java.lang.String,byte[])
    501:507:public static java.lang.String[][] getAllNameEntries(java.lang.String,java.lang.String,byte[])
    513:513:public java.lang.String[] getCodePagesSupported()
    517:517:public static java.lang.String[] enumerateTTCNames(java.lang.String)
    521:521:public static java.lang.String[] enumerateTTCNames(byte[])
    525:525:public int[] getWidths()
    529:529:public java.lang.String[] getDifferences()
    533:533:public char[] getUnicodeDifferences()
    537:537:public boolean isForceWidthsOutput()
    541:542:public void setForceWidthsOutput(boolean)
    545:545:public boolean isDirectTextToByte()
    549:550:public void setDirectTextToByte(boolean)
    553:553:public boolean isSubset()
    557:558:public void setSubset(boolean)
    public abstract boolean hasKernPairs()
    600:601:public boolean charExists(int)
    605:609:public boolean setCharAdvance(int,int)
    613:623:private static void addFont(com.itextpdf.text.pdf.PRIndirectReference,com.itextpdf.text.pdf.IntHashtable,java.util.ArrayList)
    626:654:private static void recourseFonts(com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.IntHashtable,java.util.ArrayList,int)
    657:662:public static java.util.ArrayList getDocumentFonts(com.itextpdf.text.pdf.PdfReader)
    666:669:public static java.util.ArrayList getDocumentFonts(com.itextpdf.text.pdf.PdfReader,int)
    673:677:public int[] getCharBBox(int)
    683:694:public void correctArabicAdvance()
    697:700:public void addSubsetRange(int[])
    703:703:public int getCompressionLevel()
    707:711:public void setCompressionLevel(int)
com.itextpdf.text.pdf.BidiLine:
    81:84:public void clearChunks()
    155:156:public void addChunks(java.util.ArrayList)
    493:500:public int trimLeft(int,int)
com.itextpdf.text.pdf.BidiOrder:
    public static final byte L
    public static final byte LRE
    public static final byte LRO
    public static final byte R
    public static final byte AL
    public static final byte RLE
    public static final byte RLO
    public static final byte PDF
    public static final byte EN
    public static final byte ES
    public static final byte ET
    public static final byte AN
    public static final byte CS
    public static final byte NSM
    public static final byte BN
    public static final byte B
    public static final byte S
    public static final byte WS
    public static final byte ON
    public static final byte TYPE_MIN
    public static final byte TYPE_MAX
    36:42:public BidiOrder(byte[])
    44:52:public BidiOrder(byte[],byte)
    467:471:public int[] getReordering(int[])
    475:492:private static int[] computeMultilineReordering(byte[],int[])
    496:536:private static int[] computeReordering(byte[])
    540:540:public byte getBaseLevel()
    591:604:private static void validateTypes(byte[])
com.itextpdf.text.pdf.ByteBuffer:
    public static final byte ZERO
    34:40:public static void setCacheSize(int)
    43:56:public static void fillCache(int)
    59:91:private static byte[] convertToBytes(int)
    410:410:public java.lang.String toString(java.lang.String)
    426:426:public byte[] getBuffer()
com.itextpdf.text.pdf.CFFFont:
    545:723:public byte[] getCID(java.lang.String)
    728:730:public boolean isCID(java.lang.String)
    735:737:public boolean exists(java.lang.String)
    876:877:void ReadEncoding(int)
com.itextpdf.text.pdf.CFFFont$Font:
    public int[] fdprivateSubrs
    public int[] charset
com.itextpdf.text.pdf.CFFFontSubset:
    static final byte ENDCHAR_OP
    static final byte RETURN_OP
    853:861:protected int countEntireIndexRange(int)
com.itextpdf.text.pdf.CJKFont:
    static final java.lang.String CJK_ENCODING
    private static final int FIRST
    private static final int BRACKET
    private static final int SERIAL
    private static final int V1Y
    public static final java.lang.String RESOURCE_PATH_CMAP
    109:109:java.lang.String getUniMap()
    140:154:public static java.lang.String GetCompatibleFont(java.lang.String)
    217:217:public int getKerning(int,int)
    302:302:public com.itextpdf.text.pdf.PdfStream getFullFontStream()
    359:359:public java.lang.String[][] getAllNameEntries()
    556:556:public boolean hasKernPairs()
    561:563:public boolean charExists(int)
    568:568:public boolean setCharAdvance(int,int)
    573:574:public void setPostscriptFontName(java.lang.String)
    578:578:public boolean setKerning(int,int,int)
    583:583:public int[] getCharBBox(int)
com.itextpdf.text.pdf.CMYKColor:
    11:12:public CMYKColor(int,int,int,int)
    15:20:public CMYKColor(float,float,float,float)
com.itextpdf.text.pdf.ColumnText:
    public static final int AR_NOVOWEL
    public static final int AR_COMPOSEDTASHKEEL
    public static final int AR_LIG
    public static final int DIGITS_EN2AN
    public static final int DIGITS_AN2EN
    public static final int DIGITS_EN2AN_INIT_LR
    public static final int DIGITS_EN2AN_INIT_AL
    public static final int DIGIT_TYPE_AN
    public static final int DIGIT_TYPE_AN_EXTENDED
    public static final float GLOBAL_SPACE_CHAR_RATIO
    public static final int START_COLUMN
    public static final int NO_MORE_TEXT
    public static final int NO_MORE_COLUMN
    protected static final int LINE_STATUS_OK
    protected static final int LINE_STATUS_OFFLIMITS
    protected static final int LINE_STATUS_NOLINE
    182:185:public void addText(com.itextpdf.text.Chunk)
    321:322:public void setSimpleColumn(com.itextpdf.text.Rectangle)
    335:335:public float getLeading()
    339:339:public float getMultipliedLeading()
    351:351:public int getRowsDrawn()
    377:377:public float getFollowingIndent()
    386:386:public float getRightIndent()
    526:526:public float getExtraParagraphSpace()
    534:536:public void clearChunks()
    539:539:public float getSpaceCharRatio()
    557:557:public int getLinesWritten()
    565:565:public int getArabicOptions()
    577:584:public static float getWidth(com.itextpdf.text.Phrase,int,int)
    588:588:public static float getWidth(com.itextpdf.text.Phrase)
    1008:1008:public com.itextpdf.text.pdf.PdfContentByte getCanvas()
    1026:1026:public com.itextpdf.text.pdf.PdfContentByte[] getCanvases()
    1034:1034:public java.util.List getCompositeElements()
    1046:1046:public static boolean hasMoreText(int)
    1063:1063:public boolean isAdjustFirstLine()
com.itextpdf.text.pdf.DocumentFont:
    private com.itextpdf.text.pdf.PdfDictionary font
    private com.itextpdf.text.pdf.IntHashtable diffmap
    protected java.lang.String cjkEncoding
    protected java.lang.String uniMap
    53:57:DocumentFont(com.itextpdf.text.pdf.PdfDictionary)
    59:63:DocumentFont(com.itextpdf.text.pdf.PRIndirectReference)
    66:96:private void init()
    100:117:private void processType0(com.itextpdf.text.pdf.PdfDictionary)
    120:140:private com.itextpdf.text.pdf.IntHashtable readWidths(com.itextpdf.text.pdf.PdfArray)
    144:147:private java.lang.String decodeString(com.itextpdf.text.pdf.PdfString)
    152:236:private void fillMetrics(byte[],com.itextpdf.text.pdf.IntHashtable,int)
    239:346:private void doType1TT()
    349:361:private com.itextpdf.text.pdf.fonts.cmaps.CMapToUnicode processToUnicode()
    365:404:private void fillFontDesc(com.itextpdf.text.pdf.PdfDictionary)
    407:425:private void fillEncoding(com.itextpdf.text.pdf.PdfName)
    472:472:public java.lang.String[][] getAllNameEntries()
    477:477:public int getKerning(int,int)
    492:492:public boolean hasKernPairs()
    501:501:public com.itextpdf.text.pdf.PdfStream getFullFontStream()
    610:616:public boolean charExists(int)
    621:621:public void setPostscriptFontName(java.lang.String)
    625:625:public boolean setKerning(int,int,int)
    630:630:public int[] getCharBBox(int)
    639:639:com.itextpdf.text.pdf.IntHashtable getUni2Byte()
    643:643:com.itextpdf.text.pdf.IntHashtable getDiffmap()
com.itextpdf.text.pdf.EnumerateTTC
com.itextpdf.text.pdf.ExtendedColor:
    public static final int TYPE_RGB
    public static final int TYPE_GRAY
    public static final int TYPE_CMYK
    public static final int TYPE_SEPARATION
    public static final int TYPE_PATTERN
    public static final int TYPE_SHADING
    17:19:public ExtendedColor(int)
    27:29:public ExtendedColor(int,int,int,int,int)
com.itextpdf.text.pdf.FdfReader
com.itextpdf.text.pdf.FdfWriter
com.itextpdf.text.pdf.FdfWriter$Wrt
com.itextpdf.text.pdf.FilterHandlers:
    15:15:public FilterHandlers()
com.itextpdf.text.pdf.FontDetails:
    54:54:com.itextpdf.text.pdf.BaseFont getBaseFont()
    185:185:public boolean isSubset()
com.itextpdf.text.pdf.FontSelector
com.itextpdf.text.pdf.GlyphList:
    10:10:public GlyphList()
com.itextpdf.text.pdf.GrayColor:
    11:12:public GrayColor(int)
com.itextpdf.text.pdf.HyphenationEvent:
    public abstract java.lang.String getHyphenSymbol()
com.itextpdf.text.pdf.ICC_Profile
com.itextpdf.text.pdf.IntHashtable:
    40:40:public int size()
    44:44:public boolean isEmpty()
    49:57:public boolean contains(int)
    61:61:public boolean containsValue(int)
    154:159:public void clear()
    225:225:public java.util.Iterator getEntryIterator()
    252:259:public int getOneKey()
com.itextpdf.text.pdf.IntHashtable$Entry:
    175:175:public int getKey()
    178:178:public int getValue()
com.itextpdf.text.pdf.IntHashtable$IntHashtableIterator
com.itextpdf.text.pdf.LongHashtable:
    private transient int count
    21:22:public LongHashtable(int)
    41:41:public int size()
    45:45:public boolean isEmpty()
    50:58:public boolean contains(long)
    62:62:public boolean containsValue(long)
    66:74:public boolean containsKey(long)
    90:109:protected void rehash()
    112:132:public long put(long,long)
    136:152:public long remove(long)
    156:161:public void clear()
    228:228:public java.util.Iterator getEntryIterator()
    232:234:public long[] toOrderedKeys()
    238:251:public long[] getKeys()
    255:262:public long getOneKey()
com.itextpdf.text.pdf.LongHashtable$Entry:
    177:177:public long getKey()
    180:180:public long getValue()
com.itextpdf.text.pdf.LongHashtable$LongHashtableIterator
com.itextpdf.text.pdf.MappedRandomAccessFile:
    private static final int BUFSIZE
    68:68:public java.nio.channels.FileChannel getChannel()
com.itextpdf.text.pdf.MultiColumnText:
    public static final float AUTOMATIC
    40:47:public MultiColumnText(float,float)
    50:50:public boolean isOverflow()
    54:55:public void useColumnParams(com.itextpdf.text.pdf.ColumnText)
    58:61:public void addColumn(float[],float[])
    64:66:public void addSimpleColumn(float,float)
    69:76:public void addRegularColumns(float,float,float,int)
    79:80:public void addText(com.itextpdf.text.Phrase)
    83:84:public void addText(com.itextpdf.text.Chunk)
    87:96:public void addElement(com.itextpdf.text.Element)
    230:235:public void nextColumn()
    257:258:public void setColumnsRightToLeft(boolean)
    262:263:public void setSpaceCharRatio(float)
    266:267:public void setRunDirection(int)
    270:271:public void setArabicOptions(int)
    274:275:public void setAlignment(int)
    16:16:static synthetic float access$2(com.itextpdf.text.pdf.MultiColumnText)
com.itextpdf.text.pdf.MultiColumnText$ColumnDef:
    281:284:MultiColumnText$ColumnDef(com.itextpdf.text.pdf.MultiColumnText,float[],float[])
    286:306:MultiColumnText$ColumnDef(com.itextpdf.text.pdf.MultiColumnText,float,float)
com.itextpdf.text.pdf.NumberArray:
    16:20:public NumberArray(java.util.List)
com.itextpdf.text.pdf.OutputStreamCounter:
    42:43:public void resetCounter()
com.itextpdf.text.pdf.PRAcroForm
com.itextpdf.text.pdf.PRAcroForm$FieldInformation
com.itextpdf.text.pdf.PRIndirectReference:
    30:32:public void setNumber(int,int)
com.itextpdf.text.pdf.PRStream:
    38:40:public PRStream(com.itextpdf.text.pdf.PRStream,com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.PdfReader)
    48:49:public PRStream(com.itextpdf.text.pdf.PdfReader,byte[])
    75:76:public void setData(byte[],boolean)
    79:100:public void setData(byte[],boolean,int)
    103:104:public void setData(byte[])
    133:133:int getObjNum()
    137:137:int getObjGen()
com.itextpdf.text.pdf.PRTokeniser:
    static final java.lang.String EMPTY
    61:63:public PRTokeniser(java.lang.String)
    118:118:public static final boolean isDelimiter(int)
    122:122:public static final boolean isDelimiterWhitespace(int)
    151:157:public char checkPdfHeader()
    161:167:public void checkFdfHeader()
    170:181:public long getStartxref()
    461:461:public long longValue()
    532:549:public static long[] checkObjectStart(byte[])
com.itextpdf.text.pdf.PageResources:
    24:45:void setOriginalResources(com.itextpdf.text.pdf.PdfDictionary,int[])
    70:72:com.itextpdf.text.pdf.PdfName addXObject(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfIndirectReference)
    82:86:void addDefaultColor(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)
    89:90:void addDefaultColor(com.itextpdf.text.pdf.PdfDictionary)
    97:99:com.itextpdf.text.pdf.PdfName addShading(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfIndirectReference)
    109:111:com.itextpdf.text.pdf.PdfName addExtGState(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfIndirectReference)
    115:117:com.itextpdf.text.pdf.PdfName addProperty(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfIndirectReference)
    136:136:boolean hasResources()
com.itextpdf.text.pdf.PatternColor:
    8:10:public PatternColor(com.itextpdf.text.pdf.PdfPatternPainter)
com.itextpdf.text.pdf.PdfAcroForm:
    23:24:public void setNeedAppearances(boolean)
    53:54:public void addCalculationOrder(com.itextpdf.text.pdf.PdfFormField)
    57:58:public void setSigFlags(int)
    61:62:public void addFormField(com.itextpdf.text.pdf.PdfFormField)
    65:70:public com.itextpdf.text.pdf.PdfFormField addHtmlPostButton(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)
    74:79:public com.itextpdf.text.pdf.PdfFormField addResetButton(java.lang.String,java.lang.String,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)
    83:90:public com.itextpdf.text.pdf.PdfFormField addMap(java.lang.String,java.lang.String,java.lang.String,com.itextpdf.text.pdf.PdfContentByte,float,float,float,float)
    94:99:public void setButtonParams(com.itextpdf.text.pdf.PdfFormField,int,java.lang.String,java.lang.String)
    102:105:public void drawButton(com.itextpdf.text.pdf.PdfFormField,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)
    108:112:public com.itextpdf.text.pdf.PdfFormField addHiddenField(java.lang.String,java.lang.String)
    116:120:public com.itextpdf.text.pdf.PdfFormField addSingleLineTextField(java.lang.String,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)
    124:128:public com.itextpdf.text.pdf.PdfFormField addMultiLineTextField(java.lang.String,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)
    132:136:public com.itextpdf.text.pdf.PdfFormField addSingleLinePasswordField(java.lang.String,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)
    140:146:public void setTextFieldParams(com.itextpdf.text.pdf.PdfFormField,java.lang.String,java.lang.String,float,float,float,float)
    149:169:public void drawSingleLineOfText(com.itextpdf.text.pdf.PdfFormField,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)
    172:197:public void drawMultiLineOfText(com.itextpdf.text.pdf.PdfFormField,java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)
    200:204:public com.itextpdf.text.pdf.PdfFormField addCheckBox(java.lang.String,java.lang.String,boolean,float,float,float,float)
    208:221:public void setCheckBoxParams(com.itextpdf.text.pdf.PdfFormField,java.lang.String,java.lang.String,boolean,float,float,float,float)
    224:249:public void drawCheckBoxAppearences(com.itextpdf.text.pdf.PdfFormField,java.lang.String,float,float,float,float)
    252:255:public com.itextpdf.text.pdf.PdfFormField getRadioGroup(java.lang.String,java.lang.String,boolean)
    259:260:public void addRadioGroup(com.itextpdf.text.pdf.PdfFormField)
    263:274:public com.itextpdf.text.pdf.PdfFormField addRadioButton(com.itextpdf.text.pdf.PdfFormField,java.lang.String,float,float,float,float)
    278:284:public void drawRadioAppearences(com.itextpdf.text.pdf.PdfFormField,java.lang.String,float,float,float,float)
    287:295:public com.itextpdf.text.pdf.PdfFormField addSelectList(java.lang.String,java.lang.String[],java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)
    299:307:public com.itextpdf.text.pdf.PdfFormField addSelectList(java.lang.String,java.lang.String[][],java.lang.String,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)
    311:318:public com.itextpdf.text.pdf.PdfFormField addComboBox(java.lang.String,java.lang.String[],java.lang.String,boolean,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)
    322:336:public com.itextpdf.text.pdf.PdfFormField addComboBox(java.lang.String,java.lang.String[][],java.lang.String,boolean,com.itextpdf.text.pdf.BaseFont,float,float,float,float,float)
    340:349:public void setChoiceParams(com.itextpdf.text.pdf.PdfFormField,java.lang.String,java.lang.String,float,float,float,float)
    353:357:public com.itextpdf.text.pdf.PdfFormField addSignature(java.lang.String,float,float,float,float)
    362:368:public void setSignatureParams(com.itextpdf.text.pdf.PdfFormField,java.lang.String,float,float,float,float)
    372:386:public void drawSignatureAppearences(com.itextpdf.text.pdf.PdfFormField,float,float,float,float)
com.itextpdf.text.pdf.PdfAction:
    public static final int FIRSTPAGE
    public static final int PREVPAGE
    public static final int NEXTPAGE
    public static final int LASTPAGE
    public static final int PRINTDIALOG
    public static final int SUBMIT_EXCLUDE
    public static final int SUBMIT_INCLUDE_NO_VALUE_FIELDS
    public static final int SUBMIT_HTML_FORMAT
    public static final int SUBMIT_HTML_GET
    public static final int SUBMIT_COORDINATES
    public static final int SUBMIT_XFDF
    public static final int SUBMIT_INCLUDE_APPEND_SAVES
    public static final int SUBMIT_INCLUDE_ANNOTATIONS
    public static final int SUBMIT_PDF
    public static final int SUBMIT_CANONICAL_FORMAT
    public static final int SUBMIT_EXCL_NON_USER_ANNOTS
    public static final int SUBMIT_EXCL_F_KEY
    public static final int SUBMIT_EMBED_FORM
    public static final int RESET_EXCLUDE
    40:41:public PdfAction(java.net.URL,boolean)
    113:113:public static com.itextpdf.text.pdf.PdfAction createLaunch(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
    153:158:static com.itextpdf.text.pdf.PdfAction createHide(com.itextpdf.text.pdf.PdfObject,boolean)
    162:162:public static com.itextpdf.text.pdf.PdfAction createHide(com.itextpdf.text.pdf.PdfAnnotation,boolean)
    166:166:public static com.itextpdf.text.pdf.PdfAction createHide(java.lang.String,boolean)
    170:180:static com.itextpdf.text.pdf.PdfArray buildArray(java.lang.Object[])
    184:184:public static com.itextpdf.text.pdf.PdfAction createHide(java.lang.Object[],boolean)
    188:197:public static com.itextpdf.text.pdf.PdfAction createSubmitForm(java.lang.String,java.lang.Object[],int)
    201:206:public static com.itextpdf.text.pdf.PdfAction createResetForm(java.lang.Object[],int)
    210:213:public static com.itextpdf.text.pdf.PdfAction createImportData(java.lang.String)
    217:228:public void next(com.itextpdf.text.pdf.PdfAction)
    231:236:public static com.itextpdf.text.pdf.PdfAction gotoLocalPage(int,com.itextpdf.text.pdf.PdfDestination,com.itextpdf.text.pdf.PdfWriter)
    240:246:public static com.itextpdf.text.pdf.PdfAction gotoLocalPage(java.lang.String,boolean)
    250:259:public static com.itextpdf.text.pdf.PdfAction gotoRemotePage(java.lang.String,java.lang.String,boolean,boolean)
    263:266:public static com.itextpdf.text.pdf.PdfAction gotoEmbedded(java.lang.String,com.itextpdf.text.pdf.collection.PdfTargetDictionary,java.lang.String,boolean,boolean)
    270:278:public static com.itextpdf.text.pdf.PdfAction gotoEmbedded(java.lang.String,com.itextpdf.text.pdf.collection.PdfTargetDictionary,com.itextpdf.text.pdf.PdfObject,boolean)
    282:314:public static com.itextpdf.text.pdf.PdfAction setOCGstate(java.util.ArrayList,boolean)
com.itextpdf.text.pdf.PdfAnnotation:
    public static final int FLAGS_INVISIBLE
    public static final int FLAGS_HIDDEN
    public static final int FLAGS_PRINT
    public static final int FLAGS_NOZOOM
    public static final int FLAGS_NOROTATE
    public static final int FLAGS_NOVIEW
    public static final int FLAGS_READONLY
    public static final int FLAGS_LOCKED
    public static final int FLAGS_TOGGLENOVIEW
    public static final int MARKUP_HIGHLIGHT
    public static final int MARKUP_UNDERLINE
    public static final int MARKUP_STRIKEOUT
    public static final int MARKUP_SQUIGGLY
    101:112:public static com.itextpdf.text.pdf.PdfAnnotation createText(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,java.lang.String,boolean,java.lang.String)
    116:120:protected static com.itextpdf.text.pdf.PdfAnnotation createLink(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,com.itextpdf.text.pdf.PdfName)
    124:126:public static com.itextpdf.text.pdf.PdfAnnotation createLink(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)
    130:132:public static com.itextpdf.text.pdf.PdfAnnotation createLink(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,com.itextpdf.text.pdf.PdfName,java.lang.String)
    136:140:public static com.itextpdf.text.pdf.PdfAnnotation createLink(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,com.itextpdf.text.pdf.PdfName,int,com.itextpdf.text.pdf.PdfDestination)
    144:148:public static com.itextpdf.text.pdf.PdfAnnotation createFreeText(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,com.itextpdf.text.pdf.PdfContentByte)
    152:160:public static com.itextpdf.text.pdf.PdfAnnotation createLine(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,float,float,float,float)
    164:170:public static com.itextpdf.text.pdf.PdfAnnotation createSquareCircle(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,boolean)
    174:193:public static com.itextpdf.text.pdf.PdfAnnotation createMarkup(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,int,float[])
    197:201:public static com.itextpdf.text.pdf.PdfAnnotation createStamp(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,java.lang.String)
    205:217:public static com.itextpdf.text.pdf.PdfAnnotation createInk(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,float[][])
    221:221:public static com.itextpdf.text.pdf.PdfAnnotation createFileAttachment(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,byte[],java.lang.String,java.lang.String)
    225:230:public static com.itextpdf.text.pdf.PdfAnnotation createFileAttachment(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,com.itextpdf.text.pdf.PdfFileSpecification)
    234:240:public static com.itextpdf.text.pdf.PdfAnnotation createPopup(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,boolean)
    245:252:public static com.itextpdf.text.pdf.PdfAnnotation createPolygonPolyline(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,boolean,com.itextpdf.text.pdf.PdfArray)
    256:263:public void setDefaultAppearanceString(com.itextpdf.text.pdf.PdfContentByte)
    266:270:public void setFlags(int)
    273:274:public void setBorder(com.itextpdf.text.pdf.PdfBorderArray)
    277:278:public void setBorderStyle(com.itextpdf.text.pdf.PdfBorderDictionary)
    281:285:public void setHighlighting(com.itextpdf.text.pdf.PdfName)
    288:298:public void setAppearance(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfTemplate)
    301:319:public void setAppearance(com.itextpdf.text.pdf.PdfName,java.lang.String,com.itextpdf.text.pdf.PdfTemplate)
    322:327:public void setAppearanceState(java.lang.String)
    330:331:public void setColor(com.itextpdf.text.BaseColor)
    334:339:public void setTitle(java.lang.String)
    342:344:public void setPopup(com.itextpdf.text.pdf.PdfAnnotation)
    347:348:public void setAction(com.itextpdf.text.pdf.PdfAction)
    352:359:public void setAdditionalActions(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)
    382:383:public void setPage(int)
    394:395:public void setPlaceInPage(int)
    398:399:public void setRotate(int)
    402:407:com.itextpdf.text.pdf.PdfDictionary getMK()
    411:412:public void setMKRotation(int)
    415:439:public static com.itextpdf.text.pdf.PdfArray getMKColor(com.itextpdf.text.BaseColor)
    443:447:public void setMKBorderColor(com.itextpdf.text.BaseColor)
    450:454:public void setMKBackgroundColor(com.itextpdf.text.BaseColor)
    457:458:public void setMKNormalCaption(java.lang.String)
    461:462:public void setMKRolloverCaption(java.lang.String)
    465:466:public void setMKAlternateCaption(java.lang.String)
    469:470:public void setMKNormalIcon(com.itextpdf.text.pdf.PdfTemplate)
    473:474:public void setMKRolloverIcon(com.itextpdf.text.pdf.PdfTemplate)
    477:478:public void setMKAlternateIcon(com.itextpdf.text.pdf.PdfTemplate)
    481:494:public void setMKIconFit(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfName,float,float,boolean)
    497:498:public void setMKTextPosition(int)
    501:502:public void setLayer(com.itextpdf.text.pdf.PdfOCG)
    505:506:public void setName(java.lang.String)
com.itextpdf.text.pdf.PdfAnnotation$PdfImportedLink
com.itextpdf.text.pdf.PdfAppearance
com.itextpdf.text.pdf.PdfArray:
    38:41:public PdfArray(java.util.List)
    87:87:public com.itextpdf.text.pdf.PdfObject remove(int)
    95:95:public boolean isEmpty()
    115:116:public void add(int,com.itextpdf.text.pdf.PdfObject)
    147:151:public com.itextpdf.text.pdf.PdfArray getAsArray(int)
    155:159:public com.itextpdf.text.pdf.PdfStream getAsStream(int)
    163:167:public com.itextpdf.text.pdf.PdfString getAsString(int)
    171:175:public com.itextpdf.text.pdf.PdfNumber getAsNumber(int)
    179:183:public com.itextpdf.text.pdf.PdfName getAsName(int)
    187:191:public com.itextpdf.text.pdf.PdfBoolean getAsBoolean(int)
    195:199:public com.itextpdf.text.pdf.PdfIndirectReference getAsIndirectObject(int)
com.itextpdf.text.pdf.PdfBoolean:
    public static final java.lang.String TRUE
    public static final java.lang.String FALSE
    27:37:public PdfBoolean(java.lang.String)
com.itextpdf.text.pdf.PdfBorderDictionary
com.itextpdf.text.pdf.PdfChunk:
    private static final float ITALIC_ANGLE
    401:402:void setValue(java.lang.String)
    414:414:java.lang.String getEncoding()
com.itextpdf.text.pdf.PdfColor:
    14:15:PdfColor(com.itextpdf.text.BaseColor)
com.itextpdf.text.pdf.PdfContentByte:
    public static final int ALIGN_CENTER
    public static final int ALIGN_LEFT
    public static final int ALIGN_RIGHT
    public static final int LINE_CAP_BUTT
    public static final int LINE_CAP_ROUND
    public static final int LINE_CAP_PROJECTING_SQUARE
    public static final int LINE_JOIN_MITER
    public static final int LINE_JOIN_ROUND
    public static final int LINE_JOIN_BEVEL
    public static final int TEXT_RENDER_MODE_FILL
    public static final int TEXT_RENDER_MODE_STROKE
    public static final int TEXT_RENDER_MODE_FILL_STROKE
    public static final int TEXT_RENDER_MODE_INVISIBLE
    public static final int TEXT_RENDER_MODE_FILL_CLIP
    public static final int TEXT_RENDER_MODE_STROKE_CLIP
    public static final int TEXT_RENDER_MODE_FILL_STROKE_CLIP
    public static final int TEXT_RENDER_MODE_CLIP
    120:120:public float getLeading()
    128:128:public float getWordSpacing()
    132:132:public float getHorizontalScaling()
    136:139:public void setFlatness(float)
    148:149:public void setLineDash(float)
    152:153:public void setLineDash(float,float)
    156:157:public void setLineDash(float,float,float)
    160:166:public final void setLineDash(float[],float)
    179:182:public void setMiterLimit(float)
    189:190:public void eoClip()
    197:198:public void resetGrayFill()
    226:228:public void setRGBColorFillF(float,float,float)
    235:237:public void setRGBColorStrokeF(float,float,float)
    269:270:public void resetCMYKColorFill()
    278:279:public void resetCMYKColorStroke()
    296:300:public void curveTo(float,float,float,float,float,float)
    303:307:public void curveTo(float,float,float,float)
    310:314:public void curveFromTo(float,float,float,float)
    317:323:public void circle(float,float,float)
    531:535:public void closePath()
    552:556:public void closePathStroke()
    566:570:public void eoFill()
    573:577:public void fillStroke()
    580:584:public void closePathFillStroke()
    587:591:public void eoFillStroke()
    594:598:public void closePathEoFillStroke()
    655:657:public void setHorizontalScaling(float)
    660:662:public void setLeading(float)
    697:717:public static com.itextpdf.text.pdf.PdfTextArray getKernArray(java.lang.String,com.itextpdf.text.pdf.BaseFont)
    721:728:public void showTextKerned(java.lang.String)
    731:734:public void newlineShowText(java.lang.String)
    737:744:public void newlineShowText(float,float,java.lang.String)
    765:769:public void moveTextWithLeading(float,float)
    772:774:public void newlineText()
    819:821:public void addOutline(com.itextpdf.text.pdf.PdfOutline,java.lang.String)
    824:825:public com.itextpdf.text.pdf.PdfOutline getRootOutline()
    829:851:public float getEffectiveStringWidth(java.lang.String,boolean)
    855:856:public void showTextAligned(int,java.lang.String,float,float,float)
    859:900:private void showTextAligned(int,java.lang.String,float,float,float,boolean)
    903:904:public void showTextAlignedKerned(int,java.lang.String,float,float,float)
    913:969:public static java.util.ArrayList bezierArc(float,float,float,float,float,float)
    973:982:public void arc(float,float,float,float,float,float)
    985:986:public void ellipse(float,float,float,float)
    989:998:public com.itextpdf.text.pdf.PdfPatternPainter createPattern(float,float,float,float)
    1002:1002:public com.itextpdf.text.pdf.PdfPatternPainter createPattern(float,float)
    1006:1015:public com.itextpdf.text.pdf.PdfPatternPainter createPattern(float,float,float,float,com.itextpdf.text.BaseColor)
    1019:1019:public com.itextpdf.text.pdf.PdfPatternPainter createPattern(float,float,com.itextpdf.text.BaseColor)
    1023:1023:public com.itextpdf.text.pdf.PdfTemplate createTemplate(float,float)
    1027:1032:com.itextpdf.text.pdf.PdfTemplate createTemplate(float,float,com.itextpdf.text.pdf.PdfName)
    1036:1036:public com.itextpdf.text.pdf.PdfAppearance createAppearance(float,float)
    1040:1045:com.itextpdf.text.pdf.PdfAppearance createAppearance(float,float,com.itextpdf.text.pdf.PdfName)
    1049:1054:public void addPSXObject(com.itextpdf.text.pdf.PdfPSXObject)
    1057:1070:public void addTemplate(com.itextpdf.text.pdf.PdfTemplate,float,float,float,float,float,float)
    1073:1084:void addTemplateReference(com.itextpdf.text.pdf.PdfIndirectReference,com.itextpdf.text.pdf.PdfName,float,float,float,float,float,float)
    1087:1088:public void addTemplate(com.itextpdf.text.pdf.PdfTemplate,float,float)
    1091:1099:public void setCMYKColorFill(int,int,int,int)
    1102:1110:public void setCMYKColorStroke(int,int,int,int)
    1301:1308:public void paintShading(com.itextpdf.text.pdf.PdfShading)
    1311:1312:public void paintShading(com.itextpdf.text.pdf.PdfShadingPattern)
    1370:1371:public void localGoto(java.lang.String,float,float,float,float)
    1374:1374:public boolean localDestination(java.lang.String,com.itextpdf.text.pdf.PdfDestination)
    1382:1383:public void remoteGoto(java.lang.String,java.lang.String,float,float,float,float)
    1386:1387:public void remoteGoto(java.lang.String,int,float,float,float,float)
    1390:1410:public void roundRectangle(float,float,float,float,float)
    1413:1414:public void setAction(com.itextpdf.text.pdf.PdfAction,float,float,float,float)
    1417:1418:public void setLiteral(java.lang.String)
    1421:1422:public void setLiteral(char)
    1425:1426:public void setLiteral(float)
    1429:1431:void checkNoPattern(com.itextpdf.text.pdf.PdfTemplate)
    1434:1464:public void drawRadioField(float,float,float,float,boolean)
    1467:1507:public void drawTextField(float,float,float,float)
    1510:1548:public void drawButton(float,float,float,float,java.lang.String,com.itextpdf.text.pdf.BaseFont,float)
    1555:1559:public void setGState(com.itextpdf.text.pdf.PdfGState)
    1562:1581:public void beginLayer(com.itextpdf.text.pdf.PdfOCG)
    1584:1588:private void beginLayer2(com.itextpdf.text.pdf.PdfOCG)
    1591:1600:public void endLayer()
    1607:1609:public void setDefaultColorspace(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)
    1612:1641:public void beginMarkedContentSequence(com.itextpdf.text.pdf.PdfStructureElement)
    1644:1649:public void endMarkedContentSequence()
    1652:1678:public void beginMarkedContentSequence(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfDictionary,boolean)
    1681:1682:public void beginMarkedContentSequence(com.itextpdf.text.pdf.PdfName)
com.itextpdf.text.pdf.PdfContentParser:
    public static final int COMMAND_TYPE
    32:32:public com.itextpdf.text.pdf.PRTokeniser getTokeniser()
    36:37:public void setTokeniser(com.itextpdf.text.pdf.PRTokeniser)
com.itextpdf.text.pdf.PdfCopyFieldsImp
com.itextpdf.text.pdf.PdfDashPattern:
    13:14:public PdfDashPattern()
    17:19:public PdfDashPattern(float)
    22:26:public PdfDashPattern(float,float)
    29:34:public PdfDashPattern(float,float,float)
    37:38:public void add(float)
com.itextpdf.text.pdf.PdfDate:
    55:55:public java.lang.String getW3CDate()
    59:107:public static java.lang.String getW3CDate(java.lang.String)
    112:150:public static java.util.Calendar decode(java.lang.String)
com.itextpdf.text.pdf.PdfDestination:
    public static final int XYZ
    public static final int FIT
    public static final int FITH
    public static final int FITV
    public static final int FITR
    public static final int FITB
    public static final int FITBH
    public static final int FITBV
    18:25:public PdfDestination(int)
    58:63:public PdfDestination(int,float,float,float,float)
    66:74:public PdfDestination(java.lang.String)
com.itextpdf.text.pdf.PdfDeveloperExtension
com.itextpdf.text.pdf.PdfDictionary:
    63:66:public void putEx(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)
    77:78:public void clear()
    89:89:public java.util.Set getKeys()
    97:97:public boolean contains(com.itextpdf.text.pdf.PdfName)
    101:101:public boolean isFont()
    105:105:public boolean isPage()
    109:109:public boolean isPages()
    113:113:public boolean isCatalog()
    117:117:public boolean isOutlineTree()
    148:152:public com.itextpdf.text.pdf.PdfStream getAsStream(com.itextpdf.text.pdf.PdfName)
    156:160:public com.itextpdf.text.pdf.PdfString getAsString(com.itextpdf.text.pdf.PdfName)
    172:176:public com.itextpdf.text.pdf.PdfName getAsName(com.itextpdf.text.pdf.PdfName)
    188:192:public com.itextpdf.text.pdf.PdfIndirectReference getAsIndirectObject(com.itextpdf.text.pdf.PdfName)
com.itextpdf.text.pdf.PdfDocument:
    static final java.lang.String hangingPunctuation
    int jsCounter
    171:171:public float getLeading()
    175:176:void setLeading(float)
    528:532:public void setXmpMetadata(byte[])
    634:637:public boolean setMarginMirroring(boolean)
    642:645:public boolean setMarginMirroringTopBottom(boolean)
    650:654:public void setPageCount(int)
    658:662:public void resetPageCount()
    1217:1218:void addOutline(com.itextpdf.text.pdf.PdfOutline,java.lang.String)
    1221:1221:public com.itextpdf.text.pdf.PdfOutline getRootOutline()
    1288:1289:void setViewerPreferences(int)
    1292:1293:void addViewerPreference(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)
    1298:1299:void setPageLabels(com.itextpdf.text.pdf.PdfPageLabels)
    1315:1316:void setAction(com.itextpdf.text.pdf.PdfAction,float,float,float,float)
    1356:1364:void addJavaScript(com.itextpdf.text.pdf.PdfAction)
    1366:1374:void addJavaScript(java.lang.String,com.itextpdf.text.pdf.PdfAction)
    1383:1402:void addFileAttachment(java.lang.String,com.itextpdf.text.pdf.PdfFileSpecification)
    1405:1405:java.util.HashMap getDocumentFileAttachment()
    1411:1413:void setOpenAction(java.lang.String)
    1417:1419:void setOpenAction(com.itextpdf.text.pdf.PdfAction)
    1423:1432:void addAdditionalAction(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)
    1437:1438:public void setCollection(com.itextpdf.text.pdf.collection.PdfCollection)
    1443:1443:com.itextpdf.text.pdf.PdfAcroForm getAcroForm()
    1447:1448:void setSigFlags(int)
    1451:1452:void addCalculationOrder(com.itextpdf.text.pdf.PdfFormField)
    1462:1462:int getMarkPoint()
    1466:1467:void incMarkPoint()
    1474:1475:void setCropBoxSize(com.itextpdf.text.Rectangle)
    1478:1482:void setBoxSize(java.lang.String,com.itextpdf.text.Rectangle)
    1510:1512:com.itextpdf.text.Rectangle getBoxSize(java.lang.String)
    1518:1519:void setPageEmpty(boolean)
    1526:1528:void setDuration(int)
    1531:1532:void setTransition(com.itextpdf.text.pdf.PdfTransition)
    1536:1540:void setPageAction(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)
    1551:1551:boolean isStrictImageSequence()
    1555:1556:void setStrictImageSequence(boolean)
    1561:1569:public void clearTextWrap()
com.itextpdf.text.pdf.PdfDocument$PdfInfo:
    47:51:PdfDocument$PdfInfo(java.lang.String,java.lang.String,java.lang.String)
com.itextpdf.text.pdf.PdfEncodings:
    11:11:public PdfEncodings()
com.itextpdf.text.pdf.PdfException:
    private static final long serialVersionUID
    10:11:public PdfException(java.lang.Exception)
com.itextpdf.text.pdf.PdfFileSpecification:
    20:24:public static com.itextpdf.text.pdf.PdfFileSpecification url(com.itextpdf.text.pdf.PdfWriter,java.lang.String)
    37:37:public static com.itextpdf.text.pdf.PdfFileSpecification fileEmbedded(com.itextpdf.text.pdf.PdfWriter,java.lang.String,java.lang.String,byte[],boolean)
    41:41:public static com.itextpdf.text.pdf.PdfFileSpecification fileEmbedded(com.itextpdf.text.pdf.PdfWriter,java.lang.String,java.lang.String,byte[],boolean,java.lang.String,com.itextpdf.text.pdf.PdfDictionary)
    126:127:public void setMultiByteFileName(byte[])
    134:135:public void setVolatile(boolean)
    138:139:public void addDescription(java.lang.String,boolean)
    142:143:public void addCollectionItem(com.itextpdf.text.pdf.collection.PdfCollectionItem)
com.itextpdf.text.pdf.PdfFont:
    56:60:static com.itextpdf.text.pdf.PdfFont getDefaultFont()
com.itextpdf.text.pdf.PdfFormField:
    public static final int FF_READ_ONLY
    public static final int FF_REQUIRED
    public static final int FF_NO_EXPORT
    public static final int FF_NO_TOGGLE_TO_OFF
    public static final int FF_RADIO
    public static final int FF_PUSHBUTTON
    public static final int FF_MULTILINE
    public static final int FF_PASSWORD
    public static final int FF_COMBO
    public static final int FF_EDIT
    public static final int FF_FILESELECT
    public static final int FF_MULTISELECT
    public static final int FF_DONOTSPELLCHECK
    public static final int FF_DONOTSCROLL
    public static final int FF_COMB
    public static final int FF_RADIOSINUNISON
    public static final int FF_RICHTEXT
    public static final int Q_LEFT
    public static final int Q_CENTER
    public static final int Q_RIGHT
    public static final int MK_NO_ICON
    public static final int MK_NO_CAPTION
    public static final int MK_CAPTION_BELOW
    public static final int MK_CAPTION_ABOVE
    public static final int MK_CAPTION_RIGHT
    public static final int MK_CAPTION_LEFT
    public static final int MK_CAPTION_OVERLAID
    public static final boolean MULTILINE
    public static final boolean SINGLELINE
    public static final boolean PLAINTEXT
    public static final boolean PASSWORD
    51:55:public PdfFormField(com.itextpdf.text.pdf.PdfWriter,float,float,float,float,com.itextpdf.text.pdf.PdfAction)
    64:70:public void setWidget(com.itextpdf.text.Rectangle,com.itextpdf.text.pdf.PdfName)
    73:74:public static com.itextpdf.text.pdf.PdfFormField createEmpty(com.itextpdf.text.pdf.PdfWriter)
    78:81:public void setButton(int)
    84:86:protected static com.itextpdf.text.pdf.PdfFormField createButton(com.itextpdf.text.pdf.PdfWriter,int)
    90:90:public static com.itextpdf.text.pdf.PdfFormField createPushButton(com.itextpdf.text.pdf.PdfWriter)
    94:94:public static com.itextpdf.text.pdf.PdfFormField createCheckBox(com.itextpdf.text.pdf.PdfWriter)
    98:98:public static com.itextpdf.text.pdf.PdfFormField createRadioButton(com.itextpdf.text.pdf.PdfWriter,boolean)
    102:109:public static com.itextpdf.text.pdf.PdfFormField createTextField(com.itextpdf.text.pdf.PdfWriter,boolean,boolean,int)
    113:119:protected static com.itextpdf.text.pdf.PdfFormField createChoice(com.itextpdf.text.pdf.PdfWriter,int,com.itextpdf.text.pdf.PdfArray,int)
    123:123:public static com.itextpdf.text.pdf.PdfFormField createList(com.itextpdf.text.pdf.PdfWriter,java.lang.String[],int)
    127:127:public static com.itextpdf.text.pdf.PdfFormField createList(com.itextpdf.text.pdf.PdfWriter,java.lang.String[][],int)
    131:131:public static com.itextpdf.text.pdf.PdfFormField createCombo(com.itextpdf.text.pdf.PdfWriter,boolean,java.lang.String[],int)
    135:135:public static com.itextpdf.text.pdf.PdfFormField createCombo(com.itextpdf.text.pdf.PdfWriter,boolean,java.lang.String[][],int)
    139:143:protected static com.itextpdf.text.pdf.PdfArray processOptions(java.lang.String[])
    147:154:protected static com.itextpdf.text.pdf.PdfArray processOptions(java.lang.String[][])
    158:160:public static com.itextpdf.text.pdf.PdfFormField createSignature(com.itextpdf.text.pdf.PdfWriter)
    168:172:public void addKid(com.itextpdf.text.pdf.PdfFormField)
    179:187:public int setFieldFlags(int)
    191:192:public void setValueAsString(java.lang.String)
    195:196:public void setValueAsName(java.lang.String)
    199:200:public void setValue(com.itextpdf.text.pdf.PdfSignature)
    203:204:public void setRichValue(java.lang.String)
    207:208:public void setDefaultValueAsString(java.lang.String)
    211:212:public void setDefaultValueAsName(java.lang.String)
    215:217:public void setFieldName(java.lang.String)
    220:221:public void setUserName(java.lang.String)
    224:225:public void setMappingName(java.lang.String)
    228:229:public void setQuadding(int)
com.itextpdf.text.pdf.PdfFunction:
    33:47:public static com.itextpdf.text.pdf.PdfFunction type0(com.itextpdf.text.pdf.PdfWriter,float[],float[],int[],int,int,float[],float[],byte[])
    66:78:public static com.itextpdf.text.pdf.PdfFunction type3(com.itextpdf.text.pdf.PdfWriter,float[],float[],com.itextpdf.text.pdf.PdfFunction[],float[],float[])
    82:91:public static com.itextpdf.text.pdf.PdfFunction type4(com.itextpdf.text.pdf.PdfWriter,float[],float[],java.lang.String)
com.itextpdf.text.pdf.PdfGState:
    3:3:public PdfGState()
    20:21:public void setOverPrintStroking(boolean)
    24:25:public void setOverPrintNonStroking(boolean)
    28:29:public void setOverPrintMode(int)
    32:33:public void setStrokeOpacity(float)
    36:37:public void setFillOpacity(float)
    40:41:public void setAlphaIsShape(boolean)
    44:45:public void setTextKnockout(boolean)
    48:49:public void setBlendMode(com.itextpdf.text.pdf.PdfName)
    52:53:public void setRenderingIntent(com.itextpdf.text.pdf.PdfName)
com.itextpdf.text.pdf.PdfICCBased
com.itextpdf.text.pdf.PdfImage:
    static final int TRANSFERSIZE
    13:13:public com.itextpdf.text.pdf.PdfName name()
    17:28:static void transferBytes(java.io.InputStream,java.io.OutputStream,int)
    31:37:protected void importAll(com.itextpdf.text.pdf.PdfImage)
com.itextpdf.text.pdf.PdfImportedPage:
    11:18:PdfImportedPage(com.itextpdf.text.pdf.PdfReaderInstance,com.itextpdf.text.pdf.PdfWriter,int)
    21:21:public com.itextpdf.text.pdf.PdfImportedPage getFromReader()
    25:25:public int getPageNumber()
    29:30:public void addTemplate(com.itextpdf.text.pdf.PdfTemplate,float,float,float,float,float,float)
    58:59:public void setGroup(com.itextpdf.text.pdf.PdfTransparencyGroup)
    66:66:com.itextpdf.text.pdf.PdfReaderInstance getPdfReaderInstance()
com.itextpdf.text.pdf.PdfIndirectObject:
    23:24:PdfIndirectObject(com.itextpdf.text.pdf.PdfIndirectReference,com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfWriter)
com.itextpdf.text.pdf.PdfIndirectReference:
    27:27:public int getGeneration()
com.itextpdf.text.pdf.PdfLayer:
    18:20:PdfLayer(java.lang.String)
    23:27:public static com.itextpdf.text.pdf.PdfLayer createTitle(java.lang.String,com.itextpdf.text.pdf.PdfWriter)
    31:35:public PdfLayer(java.lang.String,com.itextpdf.text.pdf.PdfWriter)
    42:48:public void addChild(com.itextpdf.text.pdf.PdfLayer)
    63:64:void setRef(com.itextpdf.text.pdf.PdfIndirectReference)
    67:68:public void setName(java.lang.String)
    79:80:public void setOn(boolean)
    83:88:private com.itextpdf.text.pdf.PdfDictionary getUsage()
    92:97:public void setCreatorInfo(java.lang.String,java.lang.String)
    100:106:public void setLanguage(java.lang.String,boolean)
    109:113:public void setExport(boolean)
    116:125:public void setZoom(float,float)
    128:133:public void setPrint(java.lang.String,boolean)
    136:140:public void setView(boolean)
    143:147:public void setPageElement(java.lang.String)
    150:158:public varargs void setUser(java.lang.String,java.lang.String[])
    165:166:public void setOnPanel(boolean)
com.itextpdf.text.pdf.PdfLayerMembership:
    com.itextpdf.text.pdf.PdfArray members
    java.util.HashSet layers
    18:21:public PdfLayerMembership(com.itextpdf.text.pdf.PdfWriter)
    28:32:public void addMember(com.itextpdf.text.pdf.PdfLayer)
    35:35:public java.util.Collection getLayers()
    39:40:public void setVisibilityPolicy(com.itextpdf.text.pdf.PdfName)
    43:44:public void setVisibilityExpression(com.itextpdf.text.pdf.PdfVisibilityExpression)
com.itextpdf.text.pdf.PdfLine:
    240:245:public float getWidthCorrected(float,float)
com.itextpdf.text.pdf.PdfLiteral:
    16:19:public PdfLiteral(int)
    26:27:public PdfLiteral(int,byte[])
    36:36:public long getPosition()
    40:43:public int getPosLength()
com.itextpdf.text.pdf.PdfNameTree:
    private static final int leafSize
    7:7:public PdfNameTree()
    77:90:private static void iterateItems(com.itextpdf.text.pdf.PdfDictionary,java.util.HashMap)
    93:96:public static java.util.HashMap readTree(com.itextpdf.text.pdf.PdfDictionary)
com.itextpdf.text.pdf.PdfNull:
    private static final java.lang.String CONTENT
com.itextpdf.text.pdf.PdfNumber:
    47:47:public long longValue()
    55:55:public float floatValue()
    59:61:public void increment()
com.itextpdf.text.pdf.PdfNumberTree:
    private static final int leafSize
    7:7:public PdfNumberTree()
    77:90:private static void iterateItems(com.itextpdf.text.pdf.PdfDictionary,java.util.HashMap)
    93:96:public static java.util.HashMap readTree(com.itextpdf.text.pdf.PdfDictionary)
com.itextpdf.text.pdf.PdfObject:
    public static final int BOOLEAN
    public static final int NUMBER
    public static final int STRING
    public static final int NAME
    public static final int ARRAY
    public static final int DICTIONARY
    public static final int STREAM
    public static final int NULL
    public static final int INDIRECT
    public static final java.lang.String NOTHING
    public static final java.lang.String TEXT_PDFDOCENCODING
    public static final java.lang.String TEXT_UNICODE
    70:70:public int length()
    94:94:public boolean isString()
    118:118:public com.itextpdf.text.pdf.PRIndirectReference getIndRef()
com.itextpdf.text.pdf.PdfOutline:
    private java.lang.String tag
    36:37:public PdfOutline(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfAction,java.lang.String)
    40:43:public PdfOutline(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfAction,java.lang.String,boolean)
    46:47:public PdfOutline(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfDestination,java.lang.String)
    50:53:public PdfOutline(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfDestination,java.lang.String,boolean)
    56:57:public PdfOutline(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfAction,com.itextpdf.text.pdf.PdfString)
    60:61:public PdfOutline(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfAction,com.itextpdf.text.pdf.PdfString,boolean)
    64:65:public PdfOutline(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfDestination,com.itextpdf.text.pdf.PdfString)
    68:69:public PdfOutline(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfDestination,com.itextpdf.text.pdf.PdfString,boolean)
    72:73:public PdfOutline(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfAction,com.itextpdf.text.Paragraph)
    76:83:public PdfOutline(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfAction,com.itextpdf.text.Paragraph,boolean)
    86:87:public PdfOutline(com.itextpdf.text.pdf.PdfOutline,com.itextpdf.text.pdf.PdfDestination,com.itextpdf.text.Paragraph)
    130:130:public com.itextpdf.text.pdf.PdfDestination getPdfDestination()
    183:184:public void setKids(java.util.ArrayList)
    187:187:public java.lang.String getTag()
    191:192:public void setTag(java.lang.String)
    195:196:public java.lang.String getTitle()
    200:201:public void setTitle(java.lang.String)
    208:209:public void setOpen(boolean)
    212:212:public com.itextpdf.text.BaseColor getColor()
    216:217:public void setColor(com.itextpdf.text.BaseColor)
    220:220:public int getStyle()
    224:225:public void setStyle(int)
com.itextpdf.text.pdf.PdfPCell:
    49:50:public PdfPCell(com.itextpdf.text.pdf.PdfPTable)
    53:77:public PdfPCell(com.itextpdf.text.pdf.PdfPTable,com.itextpdf.text.pdf.PdfPCell)
    111:111:public com.itextpdf.text.Phrase getPhrase()
    132:135:public void setVerticalAlignment(int)
    146:146:public float getPaddingLeft()
    150:151:public void setPaddingLeft(float)
    162:162:public float getPaddingRight()
    166:167:public void setPaddingRight(float)
    178:178:public float getPaddingTop()
    182:183:public void setPaddingTop(float)
    194:194:public float getPaddingBottom()
    198:199:public void setPaddingBottom(float)
    213:214:public void setUseBorderPadding(boolean)
    217:218:public void setLeading(float,float)
    221:221:public float getLeading()
    225:225:public float getMultipliedLeading()
    229:230:public void setIndent(float)
    233:233:public float getIndent()
    237:237:public float getExtraParagraphSpace()
    241:242:public void setExtraParagraphSpace(float)
    275:276:public void setNoWrap(boolean)
    279:279:public com.itextpdf.text.pdf.PdfPTable getTable()
    283:290:void setTable(com.itextpdf.text.pdf.PdfPTable)
    309:310:public void setFollowingIndent(float)
    313:313:public float getFollowingIndent()
    317:318:public void setRightIndent(float)
    321:321:public float getRightIndent()
    325:325:public float getSpaceCharRatio()
    329:330:public void setSpaceCharRatio(float)
    345:357:public void setCellEvent(com.itextpdf.text.pdf.PdfPCellEvent)
    360:360:public int getArabicOptions()
    364:365:public void setArabicOptions(int)
    368:368:public boolean isUseAscender()
    372:373:public void setUseAscender(boolean)
    380:381:public void setUseDescender(boolean)
    388:388:public java.util.List getCompositeElements()
com.itextpdf.text.pdf.PdfPRow:
    public static final float BOTTOM_LIMIT
    public static final float RIGHT_LIMIT
    335:335:public boolean isCalculated()
com.itextpdf.text.pdf.PdfPSXObject
com.itextpdf.text.pdf.PdfPTable:
    public static final int BASECANVAS
    public static final int BACKGROUNDCANVAS
    public static final int LINECANVAS
    public static final int TEXTCANVAS
    60:71:public PdfPTable(float[])
    148:152:public void setWidths(int[])
    175:181:public void setTotalWidth(float[])
    184:191:public void setWidthPercentage(float[],com.itextpdf.text.Rectangle)
    208:217:public void resetColumnCount(int)
    338:341:public void addCell(com.itextpdf.text.pdf.PdfPTable)
    350:350:public float writeSelectedRows(int,int,float,float,com.itextpdf.text.pdf.PdfContentByte[])
    354:354:public float writeSelectedRows(int,int,int,int,float,float,com.itextpdf.text.pdf.PdfContentByte[])
    520:532:public float getRowspanHeight(int,int)
    575:588:public boolean deleteRow(int)
    592:592:public boolean deleteLastRow()
    657:658:public void setHorizontalAlignment(int)
    698:710:public void setTableEvent(com.itextpdf.text.pdf.PdfPTableEvent)
    717:717:public float[] getAbsoluteWidths()
    771:772:public void setSkipLastFooter(boolean)
    775:785:public void setRunDirection(int)
    788:788:public int getRunDirection()
    796:797:public void setLockedWidth(boolean)
    808:809:public void setSpacingBefore(float)
    812:813:public void setSpacingAfter(float)
    828:830:public void setExtendLastRow(boolean)
    833:835:public void setExtendLastRow(boolean,boolean)
    857:858:public void setSplitLate(boolean)
    861:862:public void setKeepTogether(boolean)
    873:876:public void setFooterRows(int)
    879:882:public void completeRow()
    898:898:public float getSpacingBefore()
    902:902:public float getSpacingAfter()
com.itextpdf.text.pdf.PdfPage:
    31:32:PdfPage(com.itextpdf.text.pdf.PdfRectangle,java.util.HashMap,com.itextpdf.text.pdf.PdfDictionary)
    35:35:public boolean isParent()
    43:45:com.itextpdf.text.pdf.PdfRectangle rotateMediaBox()
    49:49:com.itextpdf.text.pdf.PdfRectangle getMediaBox()
com.itextpdf.text.pdf.PdfPageLabels:
    public static final int DECIMAL_ARABIC_NUMERALS
    public static final int UPPERCASE_ROMAN_NUMERALS
    public static final int LOWERCASE_ROMAN_NUMERALS
    public static final int UPPERCASE_LETTERS
    public static final int LOWERCASE_LETTERS
    public static final int EMPTY
    24:27:public PdfPageLabels()
    30:40:public void addPageLabel(int,int,java.lang.String,int)
    43:44:public void addPageLabel(int,int,java.lang.String)
    47:48:public void addPageLabel(int,int)
    51:52:public void addPageLabel(com.itextpdf.text.pdf.PdfPageLabels$PdfPageLabelFormat)
    55:58:public void removePageLabel(int)
    71:128:public static java.lang.String[] getPageLabels(com.itextpdf.text.pdf.PdfReader)
    132:171:public static com.itextpdf.text.pdf.PdfPageLabels$PdfPageLabelFormat[] getPageLabelFormats(com.itextpdf.text.pdf.PdfReader)
com.itextpdf.text.pdf.PdfPageLabels$PdfPageLabelFormat
com.itextpdf.text.pdf.PdfPages:
    40:46:com.itextpdf.text.pdf.PdfIndirectReference addPageRef(com.itextpdf.text.pdf.PdfIndirectReference)
    101:101:com.itextpdf.text.pdf.PdfIndirectReference getTopParent()
    105:113:void setLinearMode(com.itextpdf.text.pdf.PdfIndirectReference)
    116:117:void addPage(com.itextpdf.text.pdf.PdfIndirectReference)
    120:140:int reorderPages(int[])
com.itextpdf.text.pdf.PdfPattern:
    8:9:PdfPattern(com.itextpdf.text.pdf.PdfPatternPainter)
com.itextpdf.text.pdf.PdfPatternPainter:
    19:21:PdfPatternPainter(com.itextpdf.text.pdf.PdfWriter)
    24:30:PdfPatternPainter(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.BaseColor)
    33:34:public void setXStep(float)
    37:38:public void setYStep(float)
    53:54:public void setPatternMatrix(float,float,float,float,float,float)
    57:57:com.itextpdf.text.pdf.PdfPattern getPattern()
    89:91:public void resetGrayFill()
    104:106:public void setRGBColorFillF(float,float,float)
    114:116:public void setRGBColorStrokeF(float,float,float)
    129:131:public void resetCMYKColorFill()
    139:141:public void resetCMYKColorStroke()
    144:146:public void setCMYKColorFill(int,int,int,int)
    149:151:public void setCMYKColorStroke(int,int,int,int)
com.itextpdf.text.pdf.PdfPublicKeyRecipient
com.itextpdf.text.pdf.PdfReader:
    protected java.util.HashMap objStmMark
    protected boolean newXrefType
    protected com.itextpdf.text.pdf.PdfDictionary trailer
    protected com.itextpdf.text.pdf.PdfDictionary catalog
    protected com.itextpdf.text.pdf.PRAcroForm acroForm
    protected boolean acroFormParsed
    protected boolean rebuilt
    protected int freeXref
    protected boolean tampered
    protected long lastXref
    protected long eofPos
    protected char pdfVersion
    protected boolean sharedStreams
    protected boolean consolidateNamedDestinations
    protected boolean remoteToLocalNamedDestinations
    protected int rValue
    protected int pValue
    private long fileLength
    private boolean hybridXref
    private com.itextpdf.text.pdf.PRIndirectReference cryptoRef
    private final com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp viewerPreferences
    79:80:protected PdfReader()
    83:84:public PdfReader(java.lang.String)
    86:89:public PdfReader(java.lang.String,byte[])
    92:93:public PdfReader(byte[])
    95:98:public PdfReader(byte[],byte[])
    100:103:public PdfReader(java.lang.String,java.security.cert.Certificate,java.security.Key,java.lang.String)
    106:107:public PdfReader(java.net.URL)
    109:112:public PdfReader(java.net.URL,byte[])
    114:117:public PdfReader(java.io.InputStream,byte[])
    120:121:public PdfReader(java.io.InputStream)
    123:127:public PdfReader(com.itextpdf.text.pdf.RandomAccessFileOrArray,byte[])
    129:156:public PdfReader(com.itextpdf.text.pdf.PdfReader)
    167:167:public int getNumberOfPages()
    171:171:public com.itextpdf.text.pdf.PdfDictionary getCatalog()
    175:188:public com.itextpdf.text.pdf.PRAcroForm getAcroForm()
    192:192:public int getPageRotation(int)
    196:202:int getPageRotation(com.itextpdf.text.pdf.PdfDictionary)
    207:207:public com.itextpdf.text.Rectangle getPageSizeWithRotation(int)
    211:217:public com.itextpdf.text.Rectangle getPageSizeWithRotation(com.itextpdf.text.pdf.PdfDictionary)
    221:221:public com.itextpdf.text.Rectangle getPageSize(int)
    225:226:public com.itextpdf.text.Rectangle getPageSize(com.itextpdf.text.pdf.PdfDictionary)
    230:234:public com.itextpdf.text.Rectangle getCropBox(int)
    238:252:public com.itextpdf.text.Rectangle getBoxSize(int,java.lang.String)
    256:278:public java.util.HashMap getInfo()
    282:286:public static com.itextpdf.text.Rectangle getNormalizedRectangle(com.itextpdf.text.pdf.PdfArray)
    292:337:protected void readPdf()
    341:363:protected void readPdfPartial()
    366:495:private void readDecryptedDocObj()
    540:542:public static com.itextpdf.text.pdf.PdfObject getPdfObjectRelease(com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfObject)
    546:566:public static com.itextpdf.text.pdf.PdfObject getPdfObject(com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfObject)
    597:598:public void resetLastXrefPartial()
    624:627:private void setXrefPartialObject(int,com.itextpdf.text.pdf.PdfObject)
    630:631:public com.itextpdf.text.pdf.PRIndirectReference addPdfObject(com.itextpdf.text.pdf.PdfObject)
    635:638:protected void readPages()
    641:652:protected void readDocObjPartial()
    739:744:public double dumpPerc()
    748:793:protected void readDocObj()
    843:891:protected void readObjStm(com.itextpdf.text.pdf.PRStream,com.itextpdf.text.pdf.IntHashtable)
    894:905:public static com.itextpdf.text.pdf.PdfObject killIndirect(com.itextpdf.text.pdf.PdfObject)
    909:920:private void ensureXrefSize(int)
    923:953:protected void readXref()
    956:1023:protected com.itextpdf.text.pdf.PdfDictionary readXrefSection()
    1027:1131:protected boolean readXRefStream(long)
    1135:1191:protected void rebuildXref()
    1531:1531:public boolean isRebuilt()
    1550:1551:public void releasePage(int)
    1554:1555:public void resetReleasePage()
    1558:1558:public com.itextpdf.text.pdf.PRIndirectReference getPageOrigRef(int)
    1591:1631:public static byte[] getPageContent(com.itextpdf.text.pdf.PdfDictionary)
    1635:1635:public com.itextpdf.text.pdf.PdfDictionary getPageResources(int)
    1639:1639:public com.itextpdf.text.pdf.PdfDictionary getPageResources(com.itextpdf.text.pdf.PdfDictionary)
    1643:1650:public byte[] getPageContent(int)
    1654:1682:protected void killXref(com.itextpdf.text.pdf.PdfObject)
    1685:1686:public void setPageContent(int,byte[])
    1689:1701:public void setPageContent(int,byte[],int)
    1758:1765:public static byte[] getStreamBytes(com.itextpdf.text.pdf.PRStream)
    1792:1836:public void eliminateSharedStreams()
    1839:1839:public boolean isTampered()
    1843:1845:public void setTampered(boolean)
    1848:1864:public byte[] getMetadata()
    1868:1868:public long getLastXref()
    1876:1876:public long getEofPos()
    1880:1880:public char getPdfVersion()
    1884:1884:public int getPermissions()
    1888:1888:public boolean is128Key()
    1892:1892:public com.itextpdf.text.pdf.PdfDictionary getTrailer()
    1905:1909:static boolean existsName(com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfName)
    1913:1918:static java.lang.String getFontName(com.itextpdf.text.pdf.PdfDictionary)
    1922:1934:static java.lang.String getSubsetPrefix(com.itextpdf.text.pdf.PdfDictionary)
    1938:1986:public int shuffleSubsetNames()
    1990:2022:public int createFakeFontSubsets()
    2026:2038:private static com.itextpdf.text.pdf.PdfArray getNameArray(com.itextpdf.text.pdf.PdfObject)
    2042:2042:public java.util.HashMap getNamedDestination()
    2046:2048:public java.util.HashMap getNamedDestination(boolean)
    2053:2053:public java.util.HashMap getNamedDestinationFromNames()
    2057:2076:public java.util.HashMap getNamedDestinationFromNames(boolean)
    2080:2098:public java.util.HashMap getNamedDestinationFromStrings()
    2102:2125:public void removeFields()
    2128:2138:public void removeAnnotations()
    2141:2156:public java.util.ArrayList getLinks(int)
    2160:2169:private void iterateBookmarks(com.itextpdf.text.pdf.PdfObject,java.util.HashMap)
    2172:2199:public void makeRemoteNamedDestinationsLocal()
    2202:2233:private boolean convertNamedDestination(com.itextpdf.text.pdf.PdfObject,java.util.HashMap)
    2237:2268:public void consolidateNamedDestinations()
    2271:2312:private boolean replaceNamedDestination(com.itextpdf.text.pdf.PdfObject,java.util.HashMap)
    2316:2322:protected static com.itextpdf.text.pdf.PdfDictionary duplicatePdfDictionary(com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.PdfReader)
    2326:2350:protected static com.itextpdf.text.pdf.PdfObject duplicatePdfObject(com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfReader)
    2367:2456:protected void removeUnusedNode(com.itextpdf.text.pdf.PdfObject,boolean[])
    2459:2480:public int removeUnusedObjects()
    2484:2484:public com.itextpdf.text.pdf.AcroFields getAcroFields()
    2488:2517:public java.lang.String getJavaScript(com.itextpdf.text.pdf.RandomAccessFileOrArray)
    2521:2528:public java.lang.String getJavaScript()
    2532:2533:public void selectPages(java.lang.String)
    2536:2538:public void selectPages(java.util.List)
    2541:2543:public void setViewerPreferences(int)
    2546:2548:public void addViewerPreference(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)
    2551:2552:void setViewerPreferences(com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp)
    2555:2555:public int getSimpleViewerPreferences()
    2559:2559:public boolean isAppendable()
    2563:2566:public void setAppendable(boolean)
    2569:2569:public boolean isNewXrefType()
    2573:2573:public long getFileLength()
    2577:2577:public boolean isHybridXref()
    2878:2880:com.itextpdf.text.pdf.PdfIndirectReference getCryptoRef()
    2884:2891:public void removeUsageRights()
    2894:2894:public final boolean isOpenedWithFullPermissions()
    72:72:static synthetic boolean access$0(com.itextpdf.text.pdf.PdfReader)
    48:48:static synthetic java.util.ArrayList access$3(com.itextpdf.text.pdf.PdfReader)
com.itextpdf.text.pdf.PdfReader$PageRefs:
    private java.util.ArrayList pageInh
    2589:2599:private PdfReader$PageRefs(com.itextpdf.text.pdf.PdfReader)
    2601:2612:PdfReader$PageRefs(com.itextpdf.text.pdf.PdfReader$PageRefs,com.itextpdf.text.pdf.PdfReader)
    2622:2630:void readPages()
    2633:2635:void reReadPages()
    2643:2645:public com.itextpdf.text.pdf.PdfDictionary getPageNRelease(int)
    2649:2651:public com.itextpdf.text.pdf.PRIndirectReference getPageOrigRefRelease(int)
    2690:2694:void keepPages()
    2711:2714:public void resetReleasePage()
    2717:2741:void insertPage(int,com.itextpdf.text.pdf.PRIndirectReference)
    2744:2754:private void pushPageAttributes(com.itextpdf.text.pdf.PdfDictionary)
    2757:2758:private void popPageAttributes()
    2761:2791:private void iteratePages(com.itextpdf.text.pdf.PRIndirectReference)
    2829:2874:private void selectPages(java.util.List)
    2589:2589:synthetic PdfReader$PageRefs(com.itextpdf.text.pdf.PdfReader,com.itextpdf.text.pdf.PdfReader$PageRefs)
    2828:2828:static synthetic void access$1(com.itextpdf.text.pdf.PdfReader$PageRefs,java.util.List)
com.itextpdf.text.pdf.PdfReaderInstance:
    28:28:com.itextpdf.text.pdf.PdfReader getReader()
    32:42:com.itextpdf.text.pdf.PdfImportedPage getImportedPage(int)
    54:54:com.itextpdf.text.pdf.RandomAccessFileOrArray getReaderFile()
com.itextpdf.text.pdf.PdfRectangle:
    37:38:public PdfRectangle(float,float,int)
    41:42:public PdfRectangle(float,float)
    53:53:public com.itextpdf.text.Rectangle getRectangle()
    88:88:public float left(int)
    92:92:public float right(int)
    96:96:public float top(int)
    100:100:public float bottom(int)
    104:104:public float width()
    108:108:public float height()
    112:112:public com.itextpdf.text.pdf.PdfRectangle rotate()
com.itextpdf.text.pdf.PdfShading:
    protected int shadingType
    18:20:protected PdfShading(com.itextpdf.text.pdf.PdfWriter)
    23:50:protected void setColorSpace(com.itextpdf.text.BaseColor)
    57:57:public static void throwColorSpaceError()
    61:69:public static void checkCompatibleColors(com.itextpdf.text.BaseColor,com.itextpdf.text.BaseColor)
    72:89:public static float[] getColorArray(com.itextpdf.text.BaseColor)
    93:103:public static com.itextpdf.text.pdf.PdfShading type1(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.BaseColor,float[],float[],com.itextpdf.text.pdf.PdfFunction)
    107:121:public static com.itextpdf.text.pdf.PdfShading type2(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.BaseColor,float[],float[],com.itextpdf.text.pdf.PdfFunction,boolean[])
    125:128:public static com.itextpdf.text.pdf.PdfShading type3(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.BaseColor,float[],float[],com.itextpdf.text.pdf.PdfFunction,boolean[])
    132:135:public static com.itextpdf.text.pdf.PdfShading simpleAxial(com.itextpdf.text.pdf.PdfWriter,float,float,float,float,com.itextpdf.text.BaseColor,com.itextpdf.text.BaseColor,boolean,boolean)
    139:139:public static com.itextpdf.text.pdf.PdfShading simpleAxial(com.itextpdf.text.pdf.PdfWriter,float,float,float,float,com.itextpdf.text.BaseColor,com.itextpdf.text.BaseColor)
    143:146:public static com.itextpdf.text.pdf.PdfShading simpleRadial(com.itextpdf.text.pdf.PdfWriter,float,float,float,float,float,float,com.itextpdf.text.BaseColor,com.itextpdf.text.BaseColor,boolean,boolean)
    150:150:public static com.itextpdf.text.pdf.PdfShading simpleRadial(com.itextpdf.text.pdf.PdfWriter,float,float,float,float,float,float,com.itextpdf.text.BaseColor,com.itextpdf.text.BaseColor)
    154:154:com.itextpdf.text.pdf.PdfName getShadingName()
    176:176:com.itextpdf.text.pdf.PdfWriter getWriter()
    184:184:public float[] getBBox()
    188:191:public void setBBox(float[])
    194:194:public boolean isAntiAlias()
    198:199:public void setAntiAlias(boolean)
com.itextpdf.text.pdf.PdfShadingPattern:
    14:18:public PdfShadingPattern(com.itextpdf.text.pdf.PdfShading)
    25:25:com.itextpdf.text.pdf.PdfName getShadingName()
    49:52:public void setMatrix(float[])
    55:55:public float[] getMatrix()
com.itextpdf.text.pdf.PdfSigGenericPKCS
com.itextpdf.text.pdf.PdfSigGenericPKCS$PPKLite
com.itextpdf.text.pdf.PdfSigGenericPKCS$PPKMS
com.itextpdf.text.pdf.PdfSigGenericPKCS$VeriSign
com.itextpdf.text.pdf.PdfSignature
com.itextpdf.text.pdf.PdfSpotColor:
    12:15:public PdfSpotColor(java.lang.String,com.itextpdf.text.BaseColor)
com.itextpdf.text.pdf.PdfStream:
    public static final int DEFAULT_COMPRESSION
    public static final int NO_COMPRESSION
    public static final int BEST_SPEED
    public static final int BEST_COMPRESSION
    68:69:public void flateCompress()
    168:172:public void writeContent(java.io.OutputStream)
com.itextpdf.text.pdf.PdfString:
    76:76:public java.lang.String getEncoding()
    85:87:public byte[] getOriginalBytes()
com.itextpdf.text.pdf.PdfStructureElement:
    private com.itextpdf.text.pdf.PdfStructureElement parent
    private com.itextpdf.text.pdf.PdfStructureTreeRoot top
    11:17:public PdfStructureElement(com.itextpdf.text.pdf.PdfStructureElement,com.itextpdf.text.pdf.PdfName)
    19:24:public PdfStructureElement(com.itextpdf.text.pdf.PdfStructureTreeRoot,com.itextpdf.text.pdf.PdfName)
    27:40:private void init(com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.PdfName)
    43:43:public com.itextpdf.text.pdf.PdfDictionary getParent()
    47:50:void setPageMark(int,int)
com.itextpdf.text.pdf.PdfStructureTreeRoot:
    19:25:public void mapRole(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfName)
    28:28:public com.itextpdf.text.pdf.PdfWriter getWriter()
    36:43:void setPageMark(int,com.itextpdf.text.pdf.PdfIndirectReference)
com.itextpdf.text.pdf.PdfTemplate:
    public static final int TYPE_TEMPLATE
    public static final int TYPE_IMPORTED
    public static final int TYPE_PATTERN
    25:30:PdfTemplate(com.itextpdf.text.pdf.PdfWriter)
    33:33:public static com.itextpdf.text.pdf.PdfTemplate createTemplate(com.itextpdf.text.pdf.PdfWriter,float,float)
    37:41:static com.itextpdf.text.pdf.PdfTemplate createTemplate(com.itextpdf.text.pdf.PdfWriter,float,float,com.itextpdf.text.pdf.PdfName)
    45:47:public void setWidth(float)
    50:52:public void setHeight(float)
    55:55:public float getWidth()
    59:59:public float getHeight()
    67:68:public void setBoundingBox(com.itextpdf.text.Rectangle)
    71:72:public void setLayer(com.itextpdf.text.pdf.PdfOCG)
    79:86:public void setMatrix(float,float,float,float,float,float)
    100:101:public void beginVariableText()
    104:105:public void endVariableText()
    145:146:public void setGroup(com.itextpdf.text.pdf.PdfTransparencyGroup)
    153:154:public void setAdditional(com.itextpdf.text.pdf.PdfDictionary)
com.itextpdf.text.pdf.PdfTextArray:
    19:20:public void add(com.itextpdf.text.pdf.PdfNumber)
com.itextpdf.text.pdf.PdfTransition
com.itextpdf.text.pdf.PdfTransparencyGroup:
    6:8:public PdfTransparencyGroup()
    11:15:public void setIsolated(boolean)
    18:22:public void setKnockout(boolean)
com.itextpdf.text.pdf.PdfVisibilityExpression
com.itextpdf.text.pdf.PdfWriter:
    public static final int GENERATION_MAX
    public static final char VERSION_1_2
    public static final char VERSION_1_3
    public static final char VERSION_1_4
    public static final char VERSION_1_5
    public static final char VERSION_1_6
    public static final char VERSION_1_7
    public static final int PageLayoutSinglePage
    public static final int PageLayoutOneColumn
    public static final int PageLayoutTwoColumnLeft
    public static final int PageLayoutTwoColumnRight
    public static final int PageLayoutTwoPageLeft
    public static final int PageLayoutTwoPageRight
    public static final int PageModeUseNone
    public static final int PageModeUseOutlines
    public static final int PageModeUseThumbs
    public static final int PageModeFullScreen
    public static final int PageModeUseOC
    public static final int PageModeUseAttachments
    public static final int HideToolbar
    public static final int HideMenubar
    public static final int HideWindowUI
    public static final int FitWindow
    public static final int CenterWindow
    public static final int DisplayDocTitle
    public static final int NonFullScreenPageModeUseNone
    public static final int NonFullScreenPageModeUseOutlines
    public static final int NonFullScreenPageModeUseThumbs
    public static final int NonFullScreenPageModeUseOC
    public static final int DirectionL2R
    public static final int DirectionR2L
    public static final int PrintScalingNone
    public static final int SIGNATURE_EXISTS
    public static final int SIGNATURE_APPEND_ONLY
    public static final int PDFXNONE
    public static final int PDFX1A2001
    public static final int PDFX32002
    public static final int PDFA1A
    public static final int PDFA1B
    public static final int STANDARD_ENCRYPTION_40
    public static final int STANDARD_ENCRYPTION_128
    public static final int ENCRYPTION_AES_128
    public static final int ENCRYPTION_AES_256
    static final int ENCRYPTION_MASK
    public static final int DO_NOT_ENCRYPT_METADATA
    public static final int EMBEDDED_FILES_ONLY
    public static final int ALLOW_PRINTING
    public static final int ALLOW_MODIFY_CONTENTS
    public static final int ALLOW_COPY
    public static final int ALLOW_MODIFY_ANNOTATIONS
    public static final int ALLOW_FILL_IN
    public static final int ALLOW_SCREENREADERS
    public static final int ALLOW_ASSEMBLY
    public static final int ALLOW_DEGRADED_PRINTING
    public static final int AllowPrinting
    public static final int AllowModifyContents
    public static final int AllowCopy
    public static final int AllowModifyAnnotations
    public static final int AllowFillIn
    public static final int AllowScreenReaders
    public static final int AllowAssembly
    public static final int AllowDegradedPrinting
    public static final boolean STRENGTH40BITS
    public static final boolean STRENGTH128BITS
    public static final float SPACE_CHAR_RATIO_DEFAULT
    public static final float NO_SPACE_CHAR_RATIO
    public static final int RUN_DIRECTION_DEFAULT
    public static final int RUN_DIRECTION_NO_BIDI
    public static final int RUN_DIRECTION_LTR
    public static final int RUN_DIRECTION_RTL
    368:373:public static com.itextpdf.text.pdf.PdfWriter getInstance(com.itextpdf.text.Document,java.io.OutputStream,com.itextpdf.text.DocListener)
    387:387:public float getVerticalPosition(boolean)
    391:394:public void setInitialLeading(float)
    458:459:public com.itextpdf.text.pdf.PdfIndirectObject addToBody(com.itextpdf.text.pdf.PdfObject,int,boolean)
    512:513:public void addPageDictEntry(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)
    524:525:public void setLinearPageMode()
    528:528:public int reorderPages(int[])
    554:554:public int getPageNumber()
    566:567:public void setPageViewport(com.itextpdf.text.pdf.PdfArray)
    570:571:public void setTabs(com.itextpdf.text.pdf.PdfName)
    783:783:public com.itextpdf.text.pdf.PdfOutline getRootOutline()
    789:790:public void setOutlines(java.util.List)
    820:821:public void setPdfVersion(char)
    824:825:public void setAtLeastPdfVersion(char)
    828:829:public void setPdfVersion(com.itextpdf.text.pdf.PdfName)
    832:833:public void addDeveloperExtension(com.itextpdf.text.pdf.PdfDeveloperExtension)
    866:867:public void setViewerPreferences(int)
    870:871:public void addViewerPreference(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)
    874:875:public void setPageLabels(com.itextpdf.text.pdf.PdfPageLabels)
    881:887:public void addNamedDestinations(java.util.Map,int)
    890:892:public void addNamedDestination(java.lang.String,int,com.itextpdf.text.pdf.PdfDestination)
    895:896:public void addJavaScript(com.itextpdf.text.pdf.PdfAction)
    899:900:public void addJavaScript(java.lang.String,boolean)
    903:904:public void addJavaScript(java.lang.String)
    907:908:public void addJavaScript(java.lang.String,com.itextpdf.text.pdf.PdfAction)
    911:912:public void addJavaScript(java.lang.String,java.lang.String,boolean)
    915:916:public void addJavaScript(java.lang.String,java.lang.String)
    919:920:public void addFileAttachment(java.lang.String,byte[],java.lang.String,java.lang.String)
    923:924:public void addFileAttachment(java.lang.String,com.itextpdf.text.pdf.PdfFileSpecification)
    927:928:public void addFileAttachment(com.itextpdf.text.pdf.PdfFileSpecification)
    937:938:public void setOpenAction(java.lang.String)
    941:942:public void setOpenAction(com.itextpdf.text.pdf.PdfAction)
    945:953:public void setAdditionalAction(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)
    956:958:public void setCollection(com.itextpdf.text.pdf.collection.PdfCollection)
    964:964:public com.itextpdf.text.pdf.PdfAcroForm getAcroForm()
    972:973:void addAnnotation(com.itextpdf.text.pdf.PdfAnnotation,int)
    976:977:public void addCalculationOrder(com.itextpdf.text.pdf.PdfFormField)
    980:981:public void setSigFlags(int)
    986:987:public void setXmpMetadata(byte[])
    990:991:public void setPageXmpMetadata(byte[])
    994:995:public void createXmpMetadata()
    998:1006:private byte[] createXmpMetadataBytes()
    1017:1026:public void setPDFXConformance(int)
    1037:1063:public void setOutputIntents(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.itextpdf.text.pdf.ICC_Profile)
    1066:1068:public void setOutputIntents(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[])
    1072:1091:public boolean setOutputIntents(com.itextpdf.text.pdf.PdfReader,boolean)
    1095:1098:private static java.lang.String getNameString(com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.PdfName)
    1133:1135:public void setFullCompression()
    1144:1148:public void setCompressionLevel(int)
    1178:1205:com.itextpdf.text.pdf.PdfName addDirectTemplateSimple(com.itextpdf.text.pdf.PdfTemplate,com.itextpdf.text.pdf.PdfName)
    1209:1220:public void releaseTemplate(com.itextpdf.text.pdf.PdfTemplate)
    1225:1225:public com.itextpdf.text.pdf.PdfImportedPage getImportedPage(com.itextpdf.text.pdf.PdfReader,int)
    1238:1244:public void freeReader(com.itextpdf.text.pdf.PdfReader)
    1247:1247:public long getCurrentDocumentSize()
    1260:1260:com.itextpdf.text.pdf.RandomAccessFileOrArray getReaderFile(com.itextpdf.text.pdf.PdfReader)
    1319:1323:com.itextpdf.text.pdf.PdfObject[] addSimpleExtGState(com.itextpdf.text.pdf.PdfDictionary)
    1328:1333:com.itextpdf.text.pdf.PdfObject[] addSimpleProperty(java.lang.Object,com.itextpdf.text.pdf.PdfIndirectReference)
    1337:1337:boolean propertyExists(java.lang.Object)
    1344:1347:public void setTagged()
    1366:1367:public com.itextpdf.text.pdf.PdfOCProperties getOCProperties()
    1371:1380:public void addOCGRadioGroup(java.util.ArrayList)
    1383:1384:public void lockLayer(com.itextpdf.text.pdf.PdfLayer)
    1478:1493:void registerLayer(com.itextpdf.text.pdf.PdfOCG)
    1500:1501:public void setCropBoxSize(com.itextpdf.text.Rectangle)
    1504:1505:public void setBoxSize(java.lang.String,com.itextpdf.text.Rectangle)
    1508:1508:public com.itextpdf.text.Rectangle getBoxSize(java.lang.String)
    1512:1515:public void setPageEmpty(boolean)
    1518:1518:public boolean isPageEmpty()
    1525:1528:public void setPageAction(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfAction)
    1531:1532:public void setDuration(int)
    1535:1536:public void setTransition(com.itextpdf.text.pdf.PdfTransition)
    1541:1541:public com.itextpdf.text.pdf.PdfDictionary getGroup()
    1545:1546:public void setGroup(com.itextpdf.text.pdf.PdfDictionary)
    1557:1561:public void setSpaceCharRatio(float)
    1570:1573:public void setRunDirection(int)
    1576:1576:public int getRunDirection()
    1580:1583:public void setUserunit(float)
    1654:1654:public boolean isStrictImageSequence()
    1658:1659:public void setStrictImageSequence(boolean)
    1662:1663:public void clearTextWrap()
    1668:1686:com.itextpdf.text.pdf.PdfIndirectReference add(com.itextpdf.text.pdf.PdfImage,com.itextpdf.text.pdf.PdfIndirectReference)
    1690:1690:com.itextpdf.text.pdf.PdfIndirectReference getImageReference(com.itextpdf.text.pdf.PdfName)
    1696:1701:protected com.itextpdf.text.pdf.PdfIndirectReference add(com.itextpdf.text.pdf.PdfICCBased)
    1707:1721:protected com.itextpdf.text.pdf.PdfIndirectReference getReferenceJBIG2Globals(byte[])
    1727:1727:public boolean isUserProperties()
    1731:1732:public void setUserProperties(boolean)
    1741:1742:public void setRgbTransparencyBlending(boolean)
com.itextpdf.text.pdf.PdfWriter$PdfBody:
    private static final int OBJSINSTREAM
    143:144:void setRefnum(int)
com.itextpdf.text.pdf.PdfXConformanceException:
    private static final long serialVersionUID
com.itextpdf.text.pdf.PushbuttonField
com.itextpdf.text.pdf.RandomAccessFileOrArray:
    32:33:public RandomAccessFileOrArray(java.lang.String)
    110:118:public RandomAccessFileOrArray(java.net.URL)
    198:198:public int read(byte[])
    262:262:public boolean isOpen()
    373:377:public final char readCharLE()
    401:407:public final long readUnsignedInt()
    411:417:public final long readUnsignedIntLE()
    425:427:public final long readLongLE()
    435:435:public final float readFloatLE()
    443:443:public final double readDoubleLE()
    481:481:public long getStartOffset()
    485:486:public void setStartOffset(long)
    489:497:public java.nio.ByteBuffer getNioByteBuffer()
com.itextpdf.text.pdf.SequenceList
com.itextpdf.text.pdf.ShadingColor:
    8:10:public ShadingColor(com.itextpdf.text.pdf.PdfShadingPattern)
com.itextpdf.text.pdf.SimpleBookmark:
    private java.util.ArrayList topList
    private final java.util.Stack attr
    29:30:private SimpleBookmark()
    33:142:private static java.util.List bookmarkDepth(com.itextpdf.text.pdf.PdfReader,com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.IntHashtable)
    147:154:private static void mapGotoBookmark(java.util.HashMap,com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.IntHashtable)
    158:167:private static java.lang.String makeBookmarkParam(com.itextpdf.text.pdf.PdfArray,com.itextpdf.text.pdf.IntHashtable)
    172:178:private static int getNumber(com.itextpdf.text.pdf.PdfIndirectReference)
    182:193:public static java.util.List getBookmark(com.itextpdf.text.pdf.PdfReader)
    198:240:public static void eliminatePages(java.util.List,int[])
    244:283:public static void shiftPageNumbers(java.util.List,int,int[])
    460:499:public static void exportToXMLNode(java.util.List,java.io.Writer,int,boolean)
    502:505:public static void exportToXML(java.util.List,java.io.OutputStream,java.lang.String,boolean)
    508:514:public static void exportToXML(java.util.List,java.io.Writer,java.lang.String,boolean)
    517:519:public static java.util.List importFromXML(java.io.InputStream)
    523:525:public static java.util.List importFromXML(java.io.Reader)
    529:529:public void endDocument()
    533:561:public void endElement(java.lang.String)
    564:564:public void startDocument()
    567:581:public void startElement(java.lang.String,java.util.Map)
    584:590:public void text(java.lang.String)
com.itextpdf.text.pdf.SimpleNamedDestination
com.itextpdf.text.pdf.SpotColor:
    9:15:public SpotColor(com.itextpdf.text.pdf.PdfSpotColor,float)
com.itextpdf.text.pdf.TSAClient
com.itextpdf.text.pdf.TextField
com.itextpdf.text.pdf.TrueTypeFont:
    743:751:public int getKerning(int,int)
    1051:1057:public com.itextpdf.text.pdf.PdfStream getFullFontStream()
    1133:1149:public java.lang.String[] getCodePagesSupported()
    1154:1154:public java.lang.String[][] getFullFontName()
    1159:1159:public java.lang.String[][] getAllNameEntries()
    1169:1169:public boolean hasKernPairs()
    1174:1175:public void setPostscriptFontName(java.lang.String)
    1179:1188:public boolean setKerning(int,int,int)
com.itextpdf.text.pdf.TrueTypeFontSubSet:
    static final int TABLE_CHECKSUM
    static final int TABLE_OFFSET
    static final int TABLE_LENGTH
    static final int HEAD_LOCA_FORMAT_OFFSET
    static final int ARG_1_AND_2_ARE_WORDS
    static final int WE_HAVE_A_SCALE
    static final int MORE_COMPONENTS
    static final int WE_HAVE_AN_X_AND_Y_SCALE
    static final int WE_HAVE_A_TWO_BY_TWO
com.itextpdf.text.pdf.TrueTypeFontUnicode:
    300:303:public com.itextpdf.text.pdf.PdfStream getFullFontStream()
    339:339:public boolean charExists(int)
    344:348:public boolean setCharAdvance(int,int)
    353:358:public int[] getCharBBox(int)
com.itextpdf.text.pdf.Type1Font:
    168:181:public int getKerning(int,int)
    529:529:public java.lang.String[][] getFullFontName()
    534:534:public java.lang.String[][] getAllNameEntries()
    544:544:public boolean hasKernPairs()
    549:550:public void setPostscriptFontName(java.lang.String)
    554:578:public boolean setKerning(int,int,int)
com.itextpdf.text.pdf.XfaForm
com.itextpdf.text.pdf.XfaForm$AcroFieldsSearch
com.itextpdf.text.pdf.XfaForm$InverseStore
com.itextpdf.text.pdf.XfaForm$Stack2
com.itextpdf.text.pdf.XfaForm$Xml2Som
com.itextpdf.text.pdf.XfaForm$Xml2SomDatasets
com.itextpdf.text.pdf.XfaForm$Xml2SomTemplate
com.itextpdf.text.pdf.XfdfReader
com.itextpdf.text.pdf.codec.Base64
com.itextpdf.text.pdf.codec.Base64$InputStream
com.itextpdf.text.pdf.codec.Base64$OutputStream
com.itextpdf.text.pdf.codec.TIFFConstants
com.itextpdf.text.pdf.codec.TIFFFaxDecoder:
    private int oneD
    540:542:public static void reverseBits(byte[])
    548:560:public void decode1D(byte[],byte[],int,int)
    564:697:public void decodeNextScanline(byte[],int,int)
    706:849:public void decode2D(byte[],byte[],int,int,long)
    1207:1268:private int readEOL(boolean)
    1432:1437:private boolean advancePointer()
com.itextpdf.text.pdf.collection.PdfCollection:
    public static final int DETAILS
    public static final int TILE
    public static final int HIDDEN
    public static final int CUSTOM
    15:29:public PdfCollection(int)
    32:33:public void setInitialDocument(java.lang.String)
    36:37:public void setSchema(com.itextpdf.text.pdf.collection.PdfCollectionSchema)
    40:40:public com.itextpdf.text.pdf.collection.PdfCollectionSchema getSchema()
    44:45:public void setSort(com.itextpdf.text.pdf.collection.PdfCollectionSort)
com.itextpdf.text.pdf.collection.PdfCollectionField
com.itextpdf.text.pdf.collection.PdfCollectionItem
com.itextpdf.text.pdf.collection.PdfCollectionSchema
com.itextpdf.text.pdf.collection.PdfCollectionSort
com.itextpdf.text.pdf.collection.PdfTargetDictionary
com.itextpdf.text.pdf.draw.LineSeparator:
    15:21:public LineSeparator(float,float,com.itextpdf.text.BaseColor,int,float)
    63:64:public void setLineWidth(float)
    71:72:public void setPercentage(float)
    79:80:public void setLineColor(com.itextpdf.text.BaseColor)
    87:88:public void setAlignment(int)
com.itextpdf.text.pdf.draw.VerticalPositionMark:
    20:23:public VerticalPositionMark(com.itextpdf.text.pdf.draw.DrawInterface,float)
    58:58:public com.itextpdf.text.pdf.draw.DrawInterface getDrawInterface()
    62:63:public void setDrawInterface(com.itextpdf.text.pdf.draw.DrawInterface)
    66:66:public float getOffset()
    70:71:public void setOffset(float)
com.itextpdf.text.pdf.events.PdfPCellEventForwarder
com.itextpdf.text.pdf.events.PdfPTableEventForwarder
com.itextpdf.text.pdf.fonts.cmaps.AbstractCMap:
    17:17:public java.lang.String getName()
com.itextpdf.text.pdf.fonts.cmaps.CMapByteCid
com.itextpdf.text.pdf.fonts.cmaps.CMapCache:
    6:6:public CMapCache()
    58:69:public static com.itextpdf.text.pdf.fonts.cmaps.CMapByteCid getCachedCMapByteCid(java.lang.String)
com.itextpdf.text.pdf.fonts.cmaps.CMapParserEx:
    private static final java.lang.String DEF
    private static final java.lang.String ENDCIDRANGE
    private static final java.lang.String ENDCIDCHAR
    private static final java.lang.String ENDBFRANGE
    private static final java.lang.String ENDBFCHAR
    private static final java.lang.String USECMAP
    private static final int MAXLEVEL
    13:13:public CMapParserEx()
com.itextpdf.text.pdf.fonts.cmaps.CMapSequence
com.itextpdf.text.pdf.fonts.cmaps.CMapToUnicode
com.itextpdf.text.pdf.fonts.cmaps.CidLocationFromByte
com.itextpdf.text.pdf.interfaces.PdfAnnotations
com.itextpdf.text.pdf.interfaces.PdfDocumentActions
com.itextpdf.text.pdf.interfaces.PdfPageActions
com.itextpdf.text.pdf.interfaces.PdfRunDirection
com.itextpdf.text.pdf.interfaces.PdfVersion
com.itextpdf.text.pdf.interfaces.PdfViewerPreferences
com.itextpdf.text.pdf.interfaces.PdfXConformance
com.itextpdf.text.pdf.internal.PdfAnnotationsImp:
    43:44:public void setSigFlags(int)
    47:48:public void addCalculationOrder(com.itextpdf.text.pdf.PdfFormField)
com.itextpdf.text.pdf.internal.PdfVersionImp:
    28:34:public void setPdfVersion(char)
    37:40:public void setAtLeastPdfVersion(char)
    43:46:public void setPdfVersion(com.itextpdf.text.pdf.PdfName)
    49:50:public void setAppendmode(boolean)
    97:112:public void addDeveloperExtension(com.itextpdf.text.pdf.PdfDeveloperExtension)
com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp:
    private static final int viewerPreferencesMask
    56:56:public int getPageLayoutAndMode()
    60:60:public com.itextpdf.text.pdf.PdfDictionary getViewerPreferences()
    64:97:public void setViewerPreferences(int)
    100:104:private int getIndex(com.itextpdf.text.pdf.PdfName)
    108:113:private boolean isPossibleValue(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfName[])
    117:174:public void addViewerPreference(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject)
    212:257:public static com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp getViewerPreferences(com.itextpdf.text.pdf.PdfDictionary)
com.itextpdf.text.pdf.internal.PdfXConformanceImp:
    public static final int PDFXKEY_COLOR
    public static final int PDFXKEY_CMYK
    public static final int PDFXKEY_RGB
    public static final int PDFXKEY_FONT
    public static final int PDFXKEY_IMAGE
    public static final int PDFXKEY_GSTATE
    public static final int PDFXKEY_LAYER
    36:37:public void setPDFXConformance(int)
    60:60:public boolean isPdfA1A()
com.itextpdf.text.xml.XMLUtil
com.itextpdf.text.xml.XmlDomWriter
com.itextpdf.text.xml.XmlToTxt
com.itextpdf.text.xml.simpleparser.EntitiesToUnicode
com.itextpdf.text.xml.simpleparser.IanaEncodings
com.itextpdf.text.xml.simpleparser.NewLineHandler
com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandler
com.itextpdf.text.xml.simpleparser.SimpleXMLDocHandlerComment
com.itextpdf.text.xml.simpleparser.SimpleXMLParser
com.itextpdf.text.xml.simpleparser.handler.HTMLNewLineHandler
com.itextpdf.text.xml.simpleparser.handler.NeverNewLineHandler
com.itextpdf.text.xml.xmp.DublinCoreSchema
com.itextpdf.text.xml.xmp.LangAlt
com.itextpdf.text.xml.xmp.PdfA1Schema
com.itextpdf.text.xml.xmp.PdfSchema
com.itextpdf.text.xml.xmp.XmpArray
com.itextpdf.text.xml.xmp.XmpBasicSchema
com.itextpdf.text.xml.xmp.XmpReader
com.itextpdf.text.xml.xmp.XmpSchema
com.itextpdf.text.xml.xmp.XmpWriter
com.vinsol.expensetracker.Constants:
    public static final java.lang.String IMAGE_SMALL_SUFFIX
    public static final java.lang.String IMAGE_THUMBNAIL_SUFFIX
    public static final java.lang.String IMAGE_LARGE_SUFFIX
    public static final java.lang.String AUDIO_FILE_SUFFIX
    public static final java.lang.String ET_FOLDER
    public static final java.lang.String DIRECTORY_AUDIO
    public static final java.lang.String DIRECTORY_FAVORITE
    public static final java.lang.String KEY_HIGHLIGHT
    public static final java.lang.String KEY_ID
    public static final java.lang.String KEY_SET_LOCATION
    public static final java.lang.String KEY_ENTRY_LIST_EXTRA
    public static final java.lang.String KEY_POSITION
    public static final java.lang.String KEY_IS_COMING_FROM_SHOW_PAGE
    public static final java.lang.String KEY_IS_COMING_FROM_FAVORITE
    public static final java.lang.String KEY_IS_FAVORITE
    public static final java.lang.String KEY_DATA_CHANGED
    public static final java.lang.String KEY_TYPE
    public static final java.lang.String KEY_TIME_IN_MILLIS_TO_SET_TAB
    public static final java.lang.String KEY_FULL_SIZE_IMAGE_PATH
    public static final java.lang.String KEY_TIME_IN_MILLIS
    public static final java.lang.String KEY_MANAGE_FAVORITE
    public static final java.lang.String EXPENSE_TRACKER_MARKET_URI
    9:9:public Constants()
com.vinsol.expensetracker.R
com.vinsol.expensetracker.R$anim
com.vinsol.expensetracker.R$array
com.vinsol.expensetracker.R$attr
com.vinsol.expensetracker.R$color
com.vinsol.expensetracker.R$dimen
com.vinsol.expensetracker.R$drawable
com.vinsol.expensetracker.R$id
com.vinsol.expensetracker.R$layout
com.vinsol.expensetracker.R$menu
com.vinsol.expensetracker.R$string
com.vinsol.expensetracker.R$style
com.vinsol.expensetracker.R$xml
com.vinsol.expensetracker.cameraservice.Camera:
    private static final int FIRST_TIME_INIT
    private static final int NOT_FOUND
    private static final int RESTART_PREVIEW
    private static final int CLEAR_SCREEN_DELAY
    private static final int SET_CAMERA_PARAMETERS_WHEN_IDLE
    private static final java.lang.String KEY_PICTURE_SIZE
    private static final int UPDATE_PARAM_INITIALIZE
    private static final int UPDATE_PARAM_PREFERENCE
    private static final int UPDATE_PARAM_ALL
    private static final int ORIENTATION_HYSTERESIS
    private static final float DEFAULT_CAMERA_BRIGHTNESS
    private static final int SCREEN_DELAY
    private static final int IDLE
    private static final int IMAGE_DISPLAYED
    private static final int SNAPSHOT_IN_PROGRESS
    private static final int NO_STORAGE_ERROR
    private static final int CANNOT_STAT_ERROR
    private static final int FOCUS_NOT_STARTED
    private static final int FOCUSING
    private static final int FOCUSING_SNAP_ON_FINISH
    private static final int FOCUS_SUCCESS
    private static final int FOCUS_FAIL
com.vinsol.expensetracker.cameraservice.CameraButton:
    private static final int ANIMATION_SPEED
    29:30:public CameraButton(android.content.Context)
com.vinsol.expensetracker.cameraservice.CameraFlashButton:
    private static final int ANIMATION_SPEED
    39:40:public CameraFlashButton(android.content.Context)
com.vinsol.expensetracker.cameraservice.CameraHardwareException:
    private static final long serialVersionUID
com.vinsol.expensetracker.cameraservice.CameraHolder:
    private static final int RELEASE_CAMERA
    92:97:public synchronized android.hardware.Camera tryOpen()
    122:124:public synchronized void keep()
com.vinsol.expensetracker.cameraservice.PreviewFrameLayout:
    private static final int MIN_HORIZONTAL_MARGIN
    36:37:public void setOnSizeChangedListener(com.vinsol.expensetracker.cameraservice.PreviewFrameLayout$OnSizeChangedListener)
com.vinsol.expensetracker.cameraservice.ShutterButton:
    22:23:public ShutterButton(android.content.Context)
com.vinsol.expensetracker.edit.CameraActivity:
    private static final int PICTURE_RESULT
com.vinsol.expensetracker.helpers.DatabaseAdapter:
    public static final java.lang.String KEY_ID
    public static final java.lang.String KEY_TAG
    public static final java.lang.String KEY_AMOUNT
    public static final java.lang.String KEY_DATE_TIME
    public static final java.lang.String KEY_LOCATION
    public static final java.lang.String KEY_FAVORITE
    public static final java.lang.String KEY_TYPE
    79:80:protected void dropEntryTable()
    83:84:protected void dropFavoriteTable()
com.vinsol.expensetracker.helpers.DisplayDate:
    34:34:public java.util.Calendar getCalendar()
com.vinsol.expensetracker.listing.ExpenseSubListing:
    84:90:protected void noItemButtonAction(android.widget.Button)
com.vinsol.expensetracker.listing.ExpenseSubListing$2
com.vinsol.expensetracker.listing.FavoriteActivity:
    private static final int ACTIVITY_RESULT
com.vinsol.expensetracker.listing.ListingAbstract:
    private static final int RESULT
    protected abstract void noItemButtonAction(android.widget.Button)
com.vinsol.expensetracker.listing.SeparatedListAdapter:
    public static final int TYPE_SECTION_HEADER
    public static final int TYPE_SECTION_FOOTER
    292:302:public int getListPosition(int)
com.vinsol.expensetracker.show.ShowDateHandler:
    33:41:public ShowDateHandler(android.app.Activity,android.widget.TextView,java.lang.Long)
    43:46:public ShowDateHandler(android.app.Activity,android.widget.TextView,int)
com.vinsol.expensetracker.utils.ImageViewExtended:
    24:25:public ImageViewExtended(android.content.Context)
com.vinsol.expensetracker.utils.Log:
    9:9:public Log()
    15:17:public static final void d(java.lang.Throwable)
    25:27:public static final void d(java.lang.Object,java.lang.Throwable)
