com.flurry.android.AdImage -> com.flurry.android.a:
    long a -> a
    int b -> b
    int c -> c
    java.lang.String d -> d
    byte[] e -> e
    void a(java.io.DataInput) -> a
com.flurry.android.AppCircle -> com.flurry.android.b:
com.flurry.android.AppCircleCallback -> com.flurry.android.c:
com.flurry.android.CallbackEvent -> com.flurry.android.d:
    int a -> a
    long b -> b
    java.lang.String c -> c
    void setMessage(java.lang.String) -> a
com.flurry.android.CatalogActivity -> com.flurry.android.CatalogActivity:
    java.lang.String a -> a
    android.webkit.WebView b -> b
    com.flurry.android.w c -> c
    java.util.List d -> d
    com.flurry.android.u e -> e
    com.flurry.android.p f -> f
    void onCreate(android.os.Bundle) -> onCreate
    void finish() -> finish
    void onDestroy() -> onDestroy
    void onClick(android.view.View) -> onClick
    void a(com.flurry.android.x) -> a
    com.flurry.android.p a(com.flurry.android.CatalogActivity) -> a
    long b(com.flurry.android.CatalogActivity) -> b
    com.flurry.android.u c(com.flurry.android.CatalogActivity) -> c
com.flurry.android.FlurryAgent -> com.flurry.android.e:
    java.lang.String[] b -> b
    java.lang.String c -> c
    java.lang.String kInsecureReportUrl -> d
    java.lang.String kSecureReportUrl -> e
    java.lang.String d -> f
    java.lang.String e -> g
    java.lang.String f -> h
    java.lang.String g -> i
    com.flurry.android.FlurryAgent h -> j
    long i -> k
    boolean j -> l
    boolean k -> m
    boolean l -> n
    boolean m -> o
    android.location.Criteria n -> p
    boolean o -> q
    com.flurry.android.AppCircle p -> r
    android.os.Handler q -> s
    java.io.File r -> t
    java.io.File s -> u
    boolean t -> v
    boolean u -> w
    long v -> x
    java.util.Map w -> y
    java.lang.String x -> z
    java.lang.String y -> A
    java.lang.String z -> B
    boolean A -> C
    java.util.List B -> D
    android.location.LocationManager C -> E
    java.lang.String D -> F
    boolean E -> G
    long F -> H
    java.util.List G -> I
    long H -> J
    long I -> K
    long J -> L
    java.lang.String K -> M
    java.lang.String L -> N
    byte M -> O
    java.lang.String N -> P
    byte O -> Q
    java.lang.Long P -> R
    int Q -> S
    android.location.Location R -> T
    java.util.Map S -> U
    java.util.List T -> V
    boolean U -> W
    int V -> X
    java.util.List W -> Y
    int X -> Z
    com.flurry.android.u Y -> aa
    java.lang.String a -> a
    void a(java.lang.Throwable) -> a
    void onStartSession(android.content.Context,java.lang.String) -> a
    void onEndSession(android.content.Context) -> a
    void onEvent(java.lang.String) -> a
    boolean isCaptureUncaughtExceptions() -> a
    com.flurry.android.u b() -> b
    void b(android.content.Context,java.lang.String) -> b
    void a(android.content.Context,boolean) -> a
    void i() -> g
    double a(double) -> a
    void a(java.lang.Runnable) -> a
    void a$42701bee(java.lang.String) -> b
    void a(java.lang.String,java.lang.String,java.lang.String) -> a
    byte[] b(boolean) -> a
    java.lang.String k() -> h
    boolean a(byte[]) -> a
    boolean a(byte[],java.lang.String) -> a
    void a(java.io.DataInputStream) -> a
    void c(boolean) -> b
    void a(android.content.Context) -> b
    void b(java.io.DataInputStream) -> b
    java.lang.String d(java.lang.String) -> c
    void l() -> i
    boolean a(java.io.File) -> a
    void c(android.content.Context,java.lang.String) -> c
    java.lang.String b(android.content.Context) -> c
    java.lang.String c(android.content.Context) -> d
    android.location.Location d(android.content.Context) -> e
    void m() -> j
    java.lang.String e() -> c
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    org.apache.http.client.HttpClient a(org.apache.http.params.HttpParams) -> a
    com.flurry.android.FlurryAgent f() -> d
    boolean a(com.flurry.android.FlurryAgent) -> a
    void a(com.flurry.android.FlurryAgent,android.content.Context) -> a
    void a(com.flurry.android.FlurryAgent,android.content.Context,boolean) -> a
    void b(com.flurry.android.FlurryAgent) -> b
    void c(com.flurry.android.FlurryAgent) -> c
    void b$220cd6b8(com.flurry.android.FlurryAgent) -> d
    long g() -> e
    android.os.Handler d(com.flurry.android.FlurryAgent) -> e
    boolean h() -> f
    com.flurry.android.u e(com.flurry.android.FlurryAgent) -> f
com.flurry.android.FlurryAgent$FlurryDefaultExceptionHandler -> com.flurry.android.f:
    java.lang.Thread$UncaughtExceptionHandler a -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
com.flurry.android.InstallReceiver -> com.flurry.android.InstallReceiver:
    android.os.Handler a -> a
    java.io.File b -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    java.util.Map a(java.lang.String) -> a
    void a(java.util.Map) -> a
    java.io.File a(com.flurry.android.InstallReceiver) -> a
com.flurry.android.a -> com.flurry.android.g:
    java.lang.String a -> a
    long b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    android.os.Handler e -> e
com.flurry.android.aa -> com.flurry.android.h:
    long a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
com.flurry.android.ab -> com.flurry.android.i:
    android.text.SpannedString a -> a
    android.text.SpannedString b -> b
    android.text.SpannedString a(com.flurry.android.ab) -> a
    android.text.SpannedString b(com.flurry.android.ab) -> b
com.flurry.android.ac -> com.flurry.android.j:
    android.widget.TextView a -> a
    com.flurry.android.ab b -> b
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.flurry.android.ad -> com.flurry.android.k:
    int a -> a
    com.flurry.android.u b -> b
    void run() -> run
com.flurry.android.ae -> com.flurry.android.l:
    java.lang.String a -> a
    com.flurry.android.u b -> b
    void run() -> run
com.flurry.android.af -> com.flurry.android.m:
    java.util.LinkedHashMap a -> a
    int b -> b
    java.lang.Object a(java.lang.Object) -> a
    void a(java.lang.Object,java.lang.Object) -> a
    int a() -> a
    java.util.List b() -> b
    java.util.Set c() -> c
    int a(com.flurry.android.af) -> a
com.flurry.android.ag -> com.flurry.android.n:
    java.util.List a -> a
    android.os.Handler b -> b
    android.os.Handler c -> c
    int d -> d
    java.lang.Runnable e -> e
    void a() -> a
    void b() -> b
    void a(com.flurry.android.ag) -> a
com.flurry.android.ah -> com.flurry.android.o:
    boolean a -> a
    int b -> b
    boolean a(java.lang.String) -> a
    int a(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    int a(java.lang.String,java.lang.String) -> a
    int b(java.lang.String,java.lang.String,java.lang.Throwable) -> b
    int b(java.lang.String,java.lang.String) -> b
    int c(java.lang.String,java.lang.String,java.lang.Throwable) -> c
    int c(java.lang.String,java.lang.String) -> c
    int d(java.lang.String,java.lang.String) -> d
com.flurry.android.ai -> com.flurry.android.p:
    javax.net.ssl.SSLContext a -> a
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    java.net.Socket createSocket() -> createSocket
com.flurry.android.aj -> com.flurry.android.q:
com.flurry.android.ak -> com.flurry.android.r:
    java.lang.String a -> a
    android.content.Context b -> b
    com.flurry.android.p c -> c
    com.flurry.android.u d -> d
    void run() -> run
com.flurry.android.al -> com.flurry.android.s:
    java.lang.String a -> a
    java.lang.String b -> b
    int c -> c
com.flurry.android.b -> com.flurry.android.t:
    boolean c -> c
    android.content.Context a -> a
    com.flurry.android.FlurryAgent b -> b
    void run() -> run
com.flurry.android.c -> com.flurry.android.u:
    byte a -> a
    java.lang.String b -> b
    long c -> c
    long r -> r
    java.lang.String d -> d
    int e -> e
    int f -> f
    java.lang.String g -> g
    int h -> h
    int i -> i
    java.lang.String j -> j
    int k -> k
    int l -> l
    java.lang.String s -> s
    int t -> t
    int u -> u
    java.lang.String v -> v
    int w -> w
    int x -> x
    java.lang.String y -> y
    int z -> z
    int A -> A
    int B -> B
    int C -> C
    int m -> m
    int n -> n
    int o -> o
    int p -> p
    int D -> D
    int E -> E
    int F -> F
    int G -> G
    int H -> H
    int I -> I
    int J -> J
    int K -> K
    int q -> q
    int L -> L
    int M -> M
    int N -> N
    int O -> O
    int P -> P
    int Q -> Q
    int R -> R
    int S -> S
    int T -> T
    int U -> U
    int V -> V
    int W -> W
    int X -> X
    int Y -> Y
    int Z -> Z
    int aa -> aa
    int ab -> ab
    int ac -> ac
    int ad -> ad
    int ae -> ae
    int af -> af
    boolean ag -> ag
    void c(java.io.DataInput) -> c
    void a(java.io.DataInput) -> a
    void b(java.io.DataInput) -> b
    void a(java.io.DataOutput) -> a
com.flurry.android.d -> com.flurry.android.v:
    android.content.Context a -> a
    boolean b -> b
    com.flurry.android.FlurryAgent c -> c
    void run() -> run
com.flurry.android.e -> com.flurry.android.w:
    java.lang.String a -> a
    byte b -> b
    byte c -> c
    com.flurry.android.c d -> d
    java.lang.String toString() -> toString
com.flurry.android.f -> com.flurry.android.x:
    byte a -> a
    long b -> b
    java.lang.String toString() -> toString
com.flurry.android.g -> com.flurry.android.y:
    int a -> a
com.flurry.android.h -> com.flurry.android.z:
    com.flurry.android.af a -> a
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
com.flurry.android.i -> com.flurry.android.aa:
    java.lang.String a -> a
    java.util.Map b -> b
    long c -> c
    boolean d -> d
    long e -> e
    byte[] a() -> a
com.flurry.android.j -> com.flurry.android.ab:
    java.util.List a -> a
    void run() -> run
com.flurry.android.k -> com.flurry.android.ac:
    com.flurry.android.ag a -> a
    void run() -> run
com.flurry.android.l -> com.flurry.android.ad:
    com.flurry.android.b a -> a
    void run() -> run
com.flurry.android.m -> com.flurry.android.ae:
    java.lang.String a -> a
    com.flurry.android.ak b -> b
    void run() -> run
com.flurry.android.n -> com.flurry.android.af:
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
com.flurry.android.o -> com.flurry.android.ag:
    com.flurry.android.u a -> a
    android.content.Context b -> b
    java.lang.String c -> c
    int d -> d
    boolean e -> e
    boolean f -> f
    void a() -> a
    android.widget.RelativeLayout$LayoutParams b() -> b
    com.flurry.android.y c() -> c
com.flurry.android.p -> com.flurry.android.ah:
    java.lang.String a -> a
    byte e -> e
    com.flurry.android.v b -> b
    long c -> c
    java.util.List d -> d
    void a(com.flurry.android.f) -> a
    long a() -> a
    void a(java.io.DataOutput) -> a
    java.lang.String toString() -> toString
com.flurry.android.q -> com.flurry.android.ai:
    com.flurry.android.CatalogActivity a -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
com.flurry.android.r -> com.flurry.android.aj:
    java.lang.String a(java.lang.String,int) -> a
    java.lang.String a(java.lang.String) -> a
    void a(java.io.Closeable) -> a
    void a(android.content.Context,android.widget.ImageView,int,int) -> a
    int a(android.content.Context,int) -> a
com.flurry.android.s -> com.flurry.android.ak:
com.flurry.android.t -> com.flurry.android.al:
    java.util.Map a -> a
    com.flurry.android.InstallReceiver b -> b
    void run() -> run
com.flurry.android.u -> com.flurry.android.am:
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String a -> a
    int g -> g
    java.lang.String b -> b
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    long k -> k
    long l -> l
    long m -> m
    long n -> n
    com.flurry.android.z o -> o
    boolean p -> p
    boolean q -> q
    java.lang.String r -> r
    java.util.Map s -> s
    android.os.Handler t -> t
    boolean u -> u
    java.util.Map v -> v
    com.flurry.android.ag w -> w
    java.util.List x -> x
    java.util.Map y -> y
    com.flurry.android.AppCircleCallback z -> z
    long A -> A
    void a(android.content.Context,com.flurry.android.a) -> a
    void a(long,long) -> a
    boolean a() -> a
    void a(java.lang.String) -> a
    void b() -> b
    void c() -> c
    void a(java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map) -> a
    long d() -> d
    java.util.Set e() -> e
    com.flurry.android.AdImage a(long) -> a
    com.flurry.android.AdImage n() -> k
    java.util.List f() -> f
    com.flurry.android.p b(long) -> b
    void g() -> g
    java.lang.String i() -> h
    void a(android.content.Context,com.flurry.android.p,java.lang.String) -> a
    java.lang.String d(java.lang.String) -> b
    void e(java.lang.String) -> c
    java.util.List a(android.content.Context,java.util.List,java.lang.Long,int,boolean) -> a
    long j() -> i
    void onClick(android.view.View) -> onClick
    java.lang.String a(com.flurry.android.p) -> a
    java.lang.String a(byte[]) -> a
    java.lang.String toString() -> toString
    com.flurry.android.AdImage l() -> j
    com.flurry.android.p b(com.flurry.android.p) -> b
    void a(java.lang.Runnable) -> a
    void a(int) -> a
    boolean p() -> l
    java.lang.String a(com.flurry.android.u,java.lang.String) -> a
    void a(com.flurry.android.u,android.content.Context,java.lang.String) -> a
    void b(com.flurry.android.u,java.lang.String) -> b
    com.flurry.android.AppCircleCallback a(com.flurry.android.u) -> a
com.flurry.android.v -> com.flurry.android.an:
    long a -> a
    long b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    long e -> e
    java.lang.Long f -> f
    byte[] g -> g
    com.flurry.android.AdImage h -> h
    void a(java.io.DataInput) -> a
    void b(java.io.DataInput) -> b
    java.lang.String toString() -> toString
    java.lang.String a(byte[]) -> a
com.flurry.android.w -> com.flurry.android.ao:
    android.view.View a -> a
    java.util.List b -> b
    boolean c -> c
    com.flurry.android.CatalogActivity d -> d
    java.util.List a(android.content.Context) -> a
    void a() -> a
    void a(java.util.List) -> a
    void a(java.util.List,boolean) -> a
    java.util.List b() -> b
com.flurry.android.x -> com.flurry.android.ap:
    java.lang.String a -> a
    java.util.List b -> b
com.flurry.android.y -> com.flurry.android.aq:
    com.flurry.android.u a -> a
    com.flurry.android.p b -> b
    int c -> c
    void a(android.content.Context,com.flurry.android.e,com.flurry.android.v,boolean) -> a
    com.flurry.android.p a() -> a
    void a(com.flurry.android.p) -> a
com.flurry.android.z -> com.flurry.android.ar:
    android.content.Context a -> a
    com.flurry.android.u b -> b
    com.flurry.android.a c -> c
    long d -> d
    com.flurry.android.af e -> e
    com.flurry.android.af f -> f
    java.util.Map g -> g
    java.util.Map h -> h
    java.util.Map i -> i
    java.util.Map j -> j
    boolean k -> k
    void a(android.content.Context,com.flurry.android.u,com.flurry.android.a) -> a
    com.flurry.android.v[] a(java.lang.String) -> a
    com.flurry.android.al a(long) -> b
    java.util.Set a() -> a
    com.flurry.android.AdImage b(long) -> a
    com.flurry.android.AdImage a$3dba2ef4() -> b
    com.flurry.android.e b(java.lang.String) -> b
    boolean b() -> c
    com.flurry.android.c a(byte) -> a
    void a(java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map) -> a
    long c() -> d
    void d() -> e
    void a(java.io.File) -> a
    void f() -> g
    void e() -> f
    void a(java.io.DataInputStream) -> a
    void a(java.io.DataOutputStream) -> a
    java.lang.String g() -> h
    void a(int) -> a
    java.lang.String toString() -> toString
com.itextpdf.text.Anchor -> com.a.a.a:
    java.lang.String name -> a
    java.lang.String reference -> b
    boolean process(com.itextpdf.text.ElementListener) -> a
    java.util.List getChunks() -> a
    int type() -> b
    java.lang.String getReference() -> c
com.itextpdf.text.Annotation -> com.a.a.b:
    int annotationtype -> a
    java.util.HashMap annotationAttributes -> b
    float llx -> c
    float lly -> d
    float urx -> e
    float ury -> f
    int type() -> b
    boolean process(com.itextpdf.text.ElementListener) -> a
    java.util.List getChunks() -> a
    float llx() -> c
    float lly() -> d
    float urx() -> e
    float ury() -> f
    float llx(float) -> a
    float lly(float) -> b
    float urx(float) -> c
    float ury(float) -> d
    int annotationType() -> g
    java.lang.String title() -> h
    java.lang.String content() -> i
    java.util.HashMap attributes() -> j
    boolean isContent() -> k
    boolean isNestable() -> l
com.itextpdf.text.BaseColor -> com.a.a.c:
    com.itextpdf.text.BaseColor WHITE -> a
    com.itextpdf.text.BaseColor LIGHT_GRAY -> b
    com.itextpdf.text.BaseColor GRAY -> c
    com.itextpdf.text.BaseColor DARK_GRAY -> d
    com.itextpdf.text.BaseColor BLACK -> e
    com.itextpdf.text.BaseColor RED -> f
    com.itextpdf.text.BaseColor PINK -> g
    com.itextpdf.text.BaseColor ORANGE -> h
    com.itextpdf.text.BaseColor YELLOW -> i
    com.itextpdf.text.BaseColor GREEN -> j
    com.itextpdf.text.BaseColor MAGENTA -> k
    com.itextpdf.text.BaseColor CYAN -> l
    com.itextpdf.text.BaseColor BLUE -> m
    int value -> n
    int getRed() -> a
    int getGreen() -> b
    int getBlue() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void validate(int) -> a
    java.lang.String toString() -> toString
com.itextpdf.text.Chapter -> com.a.a.d:
    int type() -> b
    boolean isNestable() -> l
com.itextpdf.text.ChapterAutoNumber -> com.a.a.e:
    boolean numberSet -> a
    int setAutomaticNumber(int) -> a
com.itextpdf.text.Chunk -> com.a.a.f:
    com.itextpdf.text.Chunk NEWLINE -> a
    com.itextpdf.text.Chunk NEXTPAGE -> b
    java.lang.StringBuffer content -> c
    com.itextpdf.text.Font font -> d
    java.util.HashMap attributes -> e
    boolean process(com.itextpdf.text.ElementListener) -> a
    int type() -> b
    java.util.List getChunks() -> a
    java.lang.StringBuffer append(java.lang.String) -> a
    void setFont(com.itextpdf.text.Font) -> a
    com.itextpdf.text.Font getFont() -> c
    java.lang.String getContent() -> d
    java.lang.String toString() -> toString
    boolean isEmpty() -> e
    boolean hasAttributes() -> f
    java.util.HashMap getAttributes() -> g
    void setAttributes(java.util.HashMap) -> a
    com.itextpdf.text.Chunk setAttribute(java.lang.String,java.lang.Object) -> a
    com.itextpdf.text.Chunk setHyphenation(com.itextpdf.text.pdf.HyphenationEvent) -> a
    com.itextpdf.text.Chunk setLocalGoto(java.lang.String) -> b
    com.itextpdf.text.Chunk setLocalDestination(java.lang.String) -> c
    com.itextpdf.text.Chunk setAction(com.itextpdf.text.pdf.PdfAction) -> a
    com.itextpdf.text.Chunk setAnchor(java.lang.String) -> d
    boolean isContent() -> k
    boolean isNestable() -> l
    com.itextpdf.text.pdf.HyphenationEvent getHyphenation() -> h
com.itextpdf.text.DocListener -> com.a.a.g:
    void open() -> a
    void close() -> b
    boolean newPage() -> c
    boolean setPageSize(com.itextpdf.text.Rectangle) -> a
    boolean setMargins(float,float,float,float) -> a
com.itextpdf.text.DocWriter -> com.a.a.h:
    com.itextpdf.text.Rectangle pageSize -> a
    com.itextpdf.text.Document document -> b
    com.itextpdf.text.pdf.OutputStreamCounter os -> c
    boolean open -> d
    boolean pause -> e
    boolean closeStream -> f
    boolean add(com.itextpdf.text.Element) -> a
    void open() -> a
    boolean setPageSize(com.itextpdf.text.Rectangle) -> a
    boolean setMargins(float,float,float,float) -> a
    boolean newPage() -> c
    void close() -> b
    byte[] getISOBytes(java.lang.String) -> a
    boolean isPaused() -> d
com.itextpdf.text.Document -> com.a.a.i:
    boolean compress -> a
    boolean plainRandomAccess -> b
    float wmfFontCorrection -> c
    java.util.ArrayList listeners -> d
    boolean open -> e
    boolean close -> f
    com.itextpdf.text.Rectangle pageSize -> g
    float marginLeft -> h
    float marginRight -> i
    float marginTop -> j
    float marginBottom -> k
    boolean marginMirroring -> l
    boolean marginMirroringTopBottom -> m
    java.lang.String javaScript_onLoad -> n
    java.lang.String javaScript_onUnLoad -> o
    java.lang.String htmlStyleClass -> p
    int pageN -> q
    int chapternumber -> r
    void addDocListener(com.itextpdf.text.DocListener) -> a
    boolean add(com.itextpdf.text.Element) -> a
    void open() -> a
    boolean setPageSize(com.itextpdf.text.Rectangle) -> a
    boolean setMargins(float,float,float,float) -> a
    boolean newPage() -> c
    int getPageNumber() -> d
    void close() -> b
    boolean addTitle(java.lang.String) -> a
    boolean addSubject(java.lang.String) -> b
    boolean addKeywords(java.lang.String) -> c
    boolean addAuthor(java.lang.String) -> d
    boolean addCreator(java.lang.String) -> e
    boolean addProducer() -> e
    boolean addCreationDate() -> f
    float leftMargin() -> g
    float rightMargin() -> h
    float left() -> i
    float right() -> j
    float top() -> k
    float bottom() -> l
    float left(float) -> a
    float right(float) -> b
    float top(float) -> c
    float bottom(float) -> d
    com.itextpdf.text.Rectangle getPageSize() -> m
    java.lang.String getRelease() -> n
    java.lang.String getVersion() -> o
    boolean isMarginMirroring() -> p
com.itextpdf.text.DocumentException -> com.a.a.j:
com.itextpdf.text.Element -> com.a.a.k:
    boolean process(com.itextpdf.text.ElementListener) -> a
    int type() -> b
    boolean isContent() -> k
    boolean isNestable() -> l
    java.util.List getChunks() -> a
com.itextpdf.text.ElementListener -> com.a.a.l:
    boolean add(com.itextpdf.text.Element) -> a
com.itextpdf.text.ExceptionConverter -> com.a.a.m:
    java.lang.Exception ex -> a
    java.lang.String prefix -> b
    java.lang.RuntimeException convertException(java.lang.Exception) -> a
    java.lang.String getMessage() -> getMessage
    java.lang.String getLocalizedMessage() -> getLocalizedMessage
    java.lang.String toString() -> toString
    void printStackTrace() -> printStackTrace
    void printStackTrace(java.io.PrintStream) -> printStackTrace
    void printStackTrace(java.io.PrintWriter) -> printStackTrace
    java.lang.Throwable fillInStackTrace() -> fillInStackTrace
com.itextpdf.text.Font -> com.a.a.n:
    com.itextpdf.text.Font$FontFamily family -> a
    float size -> b
    int style -> c
    com.itextpdf.text.BaseColor color -> d
    com.itextpdf.text.pdf.BaseFont baseFont -> e
    int[] $SWITCH_TABLE$com$itextpdf$text$Font$FontFamily -> f
    int compareTo(com.itextpdf.text.Font) -> a
    float getSize() -> a
    float getCalculatedLeading(float) -> a
    int getStyle() -> b
    boolean isUnderlined() -> c
    boolean isStrikethru() -> d
    void setStyle(int) -> a
    com.itextpdf.text.BaseColor getColor() -> e
    com.itextpdf.text.pdf.BaseFont getBaseFont() -> f
    com.itextpdf.text.pdf.BaseFont getCalculatedBaseFont$390c6034() -> g
    boolean isStandardFont() -> h
    com.itextpdf.text.Font difference(com.itextpdf.text.Font) -> b
    int compareTo(java.lang.Object) -> compareTo
    int[] $SWITCH_TABLE$com$itextpdf$text$Font$FontFamily() -> i
com.itextpdf.text.Font$FontFamily -> com.a.a.o:
    com.itextpdf.text.Font$FontFamily COURIER -> a
    com.itextpdf.text.Font$FontFamily HELVETICA -> b
    com.itextpdf.text.Font$FontFamily TIMES_ROMAN -> c
    com.itextpdf.text.Font$FontFamily SYMBOL -> d
    com.itextpdf.text.Font$FontFamily ZAPFDINGBATS -> e
    com.itextpdf.text.Font$FontFamily UNDEFINED -> f
    com.itextpdf.text.Font$FontFamily[] ENUM$VALUES -> g
    com.itextpdf.text.Font$FontFamily[] values() -> values
    com.itextpdf.text.Font$FontFamily valueOf(java.lang.String) -> valueOf
com.itextpdf.text.FontFactory -> com.a.a.p:
    com.itextpdf.text.FontFactoryImp fontImp -> c
    java.lang.String defaultEncoding -> a
    boolean defaultEmbedding -> b
    com.itextpdf.text.Font getFont(java.lang.String,float,int,com.itextpdf.text.BaseColor) -> a
com.itextpdf.text.FontFactoryImp -> com.a.a.q:
    com.itextpdf.text.log.Logger LOGGER -> c
    java.util.Hashtable trueTypeFonts -> d
    java.lang.String[] TTFamilyOrder -> e
    java.util.Hashtable fontFamilies -> f
    java.lang.String defaultEncoding -> a
    boolean defaultEmbedding -> b
    com.itextpdf.text.Font getFont(java.lang.String,java.lang.String,boolean,float,int,com.itextpdf.text.BaseColor) -> a
    com.itextpdf.text.Font getFont$23cc24a3(java.lang.String,java.lang.String,boolean,float,int,com.itextpdf.text.BaseColor) -> b
com.itextpdf.text.LargeElement -> com.a.a.r:
    boolean isComplete() -> c
    void flushContent() -> d
com.itextpdf.text.List -> com.a.a.s:
    java.util.ArrayList list -> a
    boolean numbered -> b
    boolean lettered -> c
    boolean lowercase -> d
    boolean autoindent -> e
    boolean alignindent -> f
    int first -> g
    com.itextpdf.text.Chunk symbol -> h
    java.lang.String preSymbol -> i
    java.lang.String postSymbol -> j
    float indentationLeft -> k
    float indentationRight -> l
    float symbolIndent -> m
    boolean process(com.itextpdf.text.ElementListener) -> a
    int type() -> b
    java.util.List getChunks() -> a
    void normalizeIndentation() -> c
    void setIndentationLeft(float) -> a
    void setIndentationRight(float) -> b
    java.util.ArrayList getItems() -> d
    boolean isAlignindent() -> e
    float getIndentationLeft() -> f
    float getIndentationRight() -> g
    boolean isContent() -> k
    boolean isNestable() -> l
com.itextpdf.text.ListItem -> com.a.a.t:
    com.itextpdf.text.Chunk symbol -> a
    int type() -> b
    com.itextpdf.text.Chunk getListSymbol() -> c
com.itextpdf.text.MarkedObject -> com.a.a.u:
    com.itextpdf.text.Element element -> a
    java.util.Properties markupAttributes -> b
    java.util.List getChunks() -> a
    boolean process(com.itextpdf.text.ElementListener) -> a
    int type() -> b
    boolean isContent() -> k
    boolean isNestable() -> l
com.itextpdf.text.MarkedSection -> com.a.a.v:
    com.itextpdf.text.MarkedObject title -> c
    boolean process(com.itextpdf.text.ElementListener) -> a
    com.itextpdf.text.MarkedObject getTitle() -> c
com.itextpdf.text.Meta -> com.a.a.w:
    int type -> a
    java.lang.StringBuffer content -> b
    boolean process(com.itextpdf.text.ElementListener) -> a
    int type() -> b
    java.util.List getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    java.lang.String getContent() -> c
    java.lang.String getName() -> d
com.itextpdf.text.PageSize -> com.a.a.x:
    com.itextpdf.text.Rectangle LETTER -> a
    com.itextpdf.text.Rectangle NOTE -> b
    com.itextpdf.text.Rectangle LEGAL -> c
    com.itextpdf.text.Rectangle TABLOID -> d
    com.itextpdf.text.Rectangle EXECUTIVE -> e
    com.itextpdf.text.Rectangle POSTCARD -> f
    com.itextpdf.text.Rectangle A0 -> g
    com.itextpdf.text.Rectangle A1 -> h
    com.itextpdf.text.Rectangle A2 -> i
    com.itextpdf.text.Rectangle A3 -> j
    com.itextpdf.text.Rectangle A4 -> k
    com.itextpdf.text.Rectangle A5 -> l
    com.itextpdf.text.Rectangle A6 -> m
    com.itextpdf.text.Rectangle A7 -> n
    com.itextpdf.text.Rectangle A8 -> o
    com.itextpdf.text.Rectangle A9 -> p
    com.itextpdf.text.Rectangle A10 -> q
    com.itextpdf.text.Rectangle B0 -> r
    com.itextpdf.text.Rectangle B1 -> s
    com.itextpdf.text.Rectangle B2 -> t
    com.itextpdf.text.Rectangle B3 -> u
    com.itextpdf.text.Rectangle B4 -> v
    com.itextpdf.text.Rectangle B5 -> w
    com.itextpdf.text.Rectangle B6 -> x
    com.itextpdf.text.Rectangle B7 -> y
    com.itextpdf.text.Rectangle B8 -> z
    com.itextpdf.text.Rectangle B9 -> A
    com.itextpdf.text.Rectangle B10 -> B
    com.itextpdf.text.Rectangle ARCH_E -> C
    com.itextpdf.text.Rectangle ARCH_D -> D
    com.itextpdf.text.Rectangle ARCH_C -> E
    com.itextpdf.text.Rectangle ARCH_B -> F
    com.itextpdf.text.Rectangle ARCH_A -> G
    com.itextpdf.text.Rectangle FLSA -> H
    com.itextpdf.text.Rectangle FLSE -> I
    com.itextpdf.text.Rectangle HALFLETTER -> J
    com.itextpdf.text.Rectangle _11X17 -> K
    com.itextpdf.text.Rectangle ID_1 -> L
    com.itextpdf.text.Rectangle ID_2 -> M
    com.itextpdf.text.Rectangle ID_3 -> N
    com.itextpdf.text.Rectangle LEDGER -> O
    com.itextpdf.text.Rectangle CROWN_QUARTO -> P
    com.itextpdf.text.Rectangle LARGE_CROWN_QUARTO -> Q
    com.itextpdf.text.Rectangle DEMY_QUARTO -> R
    com.itextpdf.text.Rectangle ROYAL_QUARTO -> S
    com.itextpdf.text.Rectangle CROWN_OCTAVO -> T
    com.itextpdf.text.Rectangle LARGE_CROWN_OCTAVO -> U
    com.itextpdf.text.Rectangle DEMY_OCTAVO -> V
    com.itextpdf.text.Rectangle ROYAL_OCTAVO -> W
    com.itextpdf.text.Rectangle SMALL_PAPERBACK -> X
    com.itextpdf.text.Rectangle PENGUIN_SMALL_PAPERBACK -> Y
    com.itextpdf.text.Rectangle PENGUIN_LARGE_PAPERBACK -> Z
    com.itextpdf.text.Rectangle LETTER_LANDSCAPE -> aa
    com.itextpdf.text.Rectangle LEGAL_LANDSCAPE -> ab
    com.itextpdf.text.Rectangle A4_LANDSCAPE -> ac
com.itextpdf.text.Paragraph -> com.a.a.y:
    int alignment -> b
    float multipliedLeading -> c
    float indentationLeft -> d
    float indentationRight -> e
    float firstLineIndent -> a
    float spacingBefore -> f
    float spacingAfter -> g
    float extraParagraphSpace -> l
    boolean keeptogether -> h
    int type() -> b
    boolean add(com.itextpdf.text.Element) -> a
    void setAlignment$13462e() -> d
    void setIndentationLeft(float) -> a
    boolean getKeepTogether() -> e
    int getAlignment() -> f
    float getMultipliedLeading() -> g
    float getTotalLeading() -> h
    float getIndentationLeft() -> i
    float getIndentationRight() -> j
    float getFirstLineIndent() -> m
    float getSpacingBefore() -> n
    float getSpacingAfter() -> o
    float getExtraParagraphSpace() -> p
com.itextpdf.text.Phrase -> com.a.a.z:
    float leading -> i
    com.itextpdf.text.Font font -> j
    com.itextpdf.text.pdf.HyphenationEvent hyphenation -> k
    boolean process(com.itextpdf.text.ElementListener) -> a
    int type() -> b
    java.util.List getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    void add(int,com.itextpdf.text.Element) -> a
    boolean add(com.itextpdf.text.Element) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean addChunk(com.itextpdf.text.Chunk) -> a
    float getLeading() -> q
    boolean hasLeading() -> r
    com.itextpdf.text.Font getFont() -> s
    boolean isEmpty() -> isEmpty
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
com.itextpdf.text.Rectangle -> com.a.a.aa:
    float llx -> a
    float lly -> b
    float urx -> c
    float ury -> d
    int rotation -> e
    com.itextpdf.text.BaseColor backgroundColor -> f
    int border -> g
    boolean useVariableBorders -> h
    float borderWidth -> i
    float borderWidthLeft -> j
    float borderWidthRight -> k
    float borderWidthTop -> l
    float borderWidthBottom -> m
    com.itextpdf.text.BaseColor borderColor -> n
    com.itextpdf.text.BaseColor borderColorLeft -> o
    com.itextpdf.text.BaseColor borderColorRight -> p
    com.itextpdf.text.BaseColor borderColorTop -> q
    com.itextpdf.text.BaseColor borderColorBottom -> r
    boolean process(com.itextpdf.text.ElementListener) -> a
    int type() -> b
    java.util.List getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    void setLeft(float) -> a
    float getLeft() -> c
    float getLeft(float) -> b
    void setRight(float) -> c
    float getRight() -> d
    float getRight(float) -> d
    float getWidth() -> e
    void setTop$133aeb() -> f
    float getTop() -> g
    float getTop(float) -> e
    void setBottom(float) -> f
    float getBottom() -> h
    float getBottom(float) -> g
    float getHeight() -> i
    int getRotation() -> j
    void setRotation$13462e() -> m
    com.itextpdf.text.BaseColor getBackgroundColor() -> n
    void setBackgroundColor$23065b89() -> o
    boolean hasBorders() -> p
    boolean hasBorder(int) -> a
    void setBorder$13462e() -> q
    boolean isUseVariableBorders() -> r
    float getBorderWidth() -> s
    void setBorderWidth$133aeb() -> t
    float getVariableBorderWidth(float,int) -> a
    float getBorderWidthLeft() -> u
    float getBorderWidthRight() -> v
    float getBorderWidthTop() -> w
    float getBorderWidthBottom() -> x
    com.itextpdf.text.BaseColor getBorderColor() -> y
    com.itextpdf.text.BaseColor getBorderColorLeft() -> z
    com.itextpdf.text.BaseColor getBorderColorRight() -> A
    com.itextpdf.text.BaseColor getBorderColorTop() -> B
    com.itextpdf.text.BaseColor getBorderColorBottom() -> C
    void cloneNonPositionParameters(com.itextpdf.text.Rectangle) -> a
    java.lang.String toString() -> toString
com.itextpdf.text.RectangleReadOnly -> com.a.a.ab:
    void throwReadOnlyError() -> D
    void setRotation$13462e() -> m
    void setLeft(float) -> a
    void setRight(float) -> c
    void setTop$133aeb() -> f
    void setBottom(float) -> f
    void setBackgroundColor$23065b89() -> o
    void setBorder$13462e() -> q
    void setBorderWidth$133aeb() -> t
    void cloneNonPositionParameters(com.itextpdf.text.Rectangle) -> a
    java.lang.String toString() -> toString
com.itextpdf.text.Section -> com.a.a.ac:
    com.itextpdf.text.Paragraph title -> b
    java.lang.String bookmarkTitle -> c
    int numberDepth -> d
    int numberStyle -> e
    float indentationLeft -> f
    float indentationRight -> g
    float indentation -> h
    boolean bookmarkOpen -> i
    boolean triggerNewPage -> j
    int subsections -> k
    java.util.ArrayList numbers -> l
    boolean complete -> m
    boolean addedCompletely -> n
    boolean notAddedYet -> o
    boolean process(com.itextpdf.text.ElementListener) -> a
    int type() -> b
    java.util.List getChunks() -> a
    boolean isContent() -> k
    boolean isNestable() -> l
    boolean add(com.itextpdf.text.Element) -> a
    boolean addAll(java.util.Collection) -> addAll
    com.itextpdf.text.Paragraph getTitle() -> e
    com.itextpdf.text.Paragraph constructTitle(com.itextpdf.text.Paragraph,java.util.ArrayList,int,int) -> a
    float getIndentationLeft() -> f
    float getIndentationRight() -> g
    float getIndentation() -> h
    boolean isBookmarkOpen() -> i
    boolean isTriggerNewPage() -> j
    com.itextpdf.text.Paragraph getBookmarkTitle() -> m
    void setChapterNumber(int) -> b
    int getDepth() -> n
    void setNumbers(int,java.util.ArrayList) -> a
    boolean isNotAddedYet() -> o
    void flushContent() -> d
    boolean isComplete() -> c
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
com.itextpdf.text.SplitCharacter -> com.a.a.ad:
    boolean isSplitCharacter$8d056dd(int,char[],com.itextpdf.text.pdf.PdfChunk[]) -> a
com.itextpdf.text.TextElementArray -> com.a.a.ae:
com.itextpdf.text.Utilities -> com.a.a.af:
    java.lang.Object[][] addToArray(java.lang.Object[][],java.lang.Object[]) -> a
    boolean isSurrogateHigh(char) -> a
    boolean isSurrogateLow(char) -> b
    boolean isSurrogatePair(java.lang.String,int) -> a
    boolean isSurrogatePair(char[],int) -> a
    int convertToUtf32(char[],int) -> b
    int convertToUtf32(java.lang.String,int) -> b
com.itextpdf.text.error_messages.MessageLocalization -> com.a.a.a.a:
    java.util.HashMap defaultLanguage -> a
    java.util.HashMap currentLanguage -> b
    java.lang.String getComposedMessage(java.lang.String,int) -> a
    java.lang.String getComposedMessage(java.lang.String,java.lang.Object[]) -> a
    java.util.HashMap getLanguageMessages$4a0be0d4(java.lang.String) -> a
    java.util.HashMap readLanguageStream(java.io.Reader) -> a
com.itextpdf.text.exceptions.IllegalPdfSyntaxException -> com.a.a.b.a:
com.itextpdf.text.exceptions.InvalidPdfException -> com.a.a.b.b:
com.itextpdf.text.exceptions.UnsupportedPdfException -> com.a.a.b.c:
com.itextpdf.text.log.Logger -> com.a.a.c.a:
    com.itextpdf.text.log.Logger getLogger$39ba51c5() -> a
com.itextpdf.text.log.LoggerFactory -> com.a.a.c.b:
    com.itextpdf.text.log.LoggerFactory myself -> a
    com.itextpdf.text.log.Logger logger -> b
    com.itextpdf.text.log.Logger getLogger$39ba51c5() -> a
com.itextpdf.text.log.NoOpLogger -> com.a.a.c.c:
    com.itextpdf.text.log.Logger getLogger$39ba51c5() -> a
com.itextpdf.text.pdf.ArabicLigaturizer -> com.a.a.d.a:
    char[][] chartable -> a
    boolean isVowel(char) -> a
    char charshape(char,int) -> a
    int shapecount(char) -> b
    void copycstostring(java.lang.StringBuffer,com.itextpdf.text.pdf.ArabicLigaturizer$charstruct,int) -> a
    void doublelig(java.lang.StringBuffer,int) -> a
    boolean connects_to_left(com.itextpdf.text.pdf.ArabicLigaturizer$charstruct) -> a
    void shape(char[],java.lang.StringBuffer,int) -> a
    int arabic_shape$3b522b51(char[],int,int,char[],int,int) -> a
    void processNumbers$7f81bec6(char[],int,int) -> a
    void shapeToArabicDigitsWithContext$70b41294(char[],int,char,boolean) -> a
com.itextpdf.text.pdf.ArabicLigaturizer$charstruct -> com.a.a.d.b:
    char basechar -> a
    char mark1 -> b
    char vowel -> c
    int lignum -> d
    int numshapes -> e
com.itextpdf.text.pdf.BadPdfFormatException -> com.a.a.d.c:
com.itextpdf.text.pdf.BaseFont -> com.a.a.d.d:
    int[] CHAR_RANGE_LATIN -> a
    int[] CHAR_RANGE_ARABIC -> b
    int[] CHAR_RANGE_HEBREW -> c
    int[] CHAR_RANGE_CYRILLIC -> d
    java.util.ArrayList subsetRanges -> e
    int fontType -> f
    int[] widths -> g
    java.lang.String[] differences -> h
    char[] unicodeDifferences -> i
    int[][] charBBoxes -> j
    java.lang.String encoding -> k
    boolean embedded -> l
    int compressionLevel -> m
    boolean fontSpecific -> n
    java.util.HashMap fontCache -> o
    java.util.HashMap BuiltinFonts14 -> p
    boolean forceWidthsOutput -> q
    boolean directTextToByte -> r
    boolean subset -> s
    boolean fastWinansi -> t
    com.itextpdf.text.pdf.IntHashtable specialMap -> u
    com.itextpdf.text.pdf.BaseFont createFont$2c2651a0(java.lang.String,java.lang.String) -> a
    com.itextpdf.text.pdf.BaseFont createFont$10944acc$68fa59be(java.lang.String,java.lang.String,boolean) -> a
    com.itextpdf.text.pdf.BaseFont createFont$124b8612$3958aaa0(java.lang.String,java.lang.String,boolean,boolean) -> a
    com.itextpdf.text.pdf.BaseFont createFont$477bb38c$124b8612$3958aaa0(java.lang.String,java.lang.String,boolean,boolean) -> b
    java.lang.String getBaseName(java.lang.String) -> a
    void createEncoding() -> a
    int getRawWidth(int,java.lang.String) -> a
    int getWidth(int) -> a
    int getWidth(java.lang.String) -> b
    float getWidthPoint(java.lang.String,float) -> a
    float getWidthPoint(int,float) -> a
    byte[] convertToBytes(java.lang.String) -> c
    byte[] convertToBytes(int) -> b
    void writeFont(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    java.lang.String getEncoding() -> b
    float getFontDescriptor(int,float) -> b
    int getFontType() -> c
    boolean isEmbedded() -> d
    boolean isFontSpecific() -> e
    java.lang.String createSubsetPrefix() -> f
    char getUnicodeDifferences(int) -> c
    java.lang.String getPostscriptFontName() -> g
    java.lang.String[][] getFamilyFontName() -> h
    java.io.InputStream getResourceStream(java.lang.String) -> d
    java.io.InputStream getResourceStream(java.lang.String,java.lang.ClassLoader) -> a
    int getUnicodeEquivalent(int) -> d
    int getCidCode(int) -> e
    int[] getRawCharBBox(int,java.lang.String) -> b
com.itextpdf.text.pdf.BaseFont$StreamFont -> com.a.a.d.e:
com.itextpdf.text.pdf.BidiLine -> com.a.a.d.f:
    int runDirection -> a
    int pieceSize -> b
    char[] text -> c
    com.itextpdf.text.pdf.PdfChunk[] detailChunks -> d
    int totalTextLength -> e
    byte[] orderLevels -> f
    int[] indexChars -> g
    java.util.ArrayList chunks -> h
    int indexChunk -> i
    int indexChunkChar -> j
    int currentChar -> k
    int storedRunDirection -> l
    char[] storedText -> m
    com.itextpdf.text.pdf.PdfChunk[] storedDetailChunks -> n
    int storedTotalTextLength -> o
    byte[] storedOrderLevels -> p
    int[] storedIndexChars -> q
    int storedIndexChunk -> r
    int storedIndexChunkChar -> s
    int storedCurrentChar -> t
    boolean shortStore -> u
    com.itextpdf.text.pdf.IntHashtable mirrorChars -> v
    int arabicOptions -> w
    boolean isEmpty() -> a
    void addChunk(com.itextpdf.text.pdf.PdfChunk) -> a
    void restore() -> b
    com.itextpdf.text.pdf.PdfLine processLine(float,float,int,int,int) -> a
    float getWidth(int,int) -> a
    java.util.ArrayList createArrayOfPdfChunks(int,int) -> b
    java.util.ArrayList createArrayOfPdfChunks(int,int,com.itextpdf.text.pdf.PdfChunk) -> a
    int[] getWord(int,int) -> c
    int trimRightEx(int,int) -> d
    int trimLeftEx(int,int) -> e
    void flip(int,int) -> f
    boolean isWS(char) -> a
com.itextpdf.text.pdf.BidiOrder -> com.a.a.d.g:
    byte[] initialTypes -> a
    byte[] embeddings -> b
    byte paragraphEmbeddingLevel -> c
    int textLength -> d
    byte[] resultTypes -> e
    byte[] resultLevels -> f
    byte[] rtypes -> g
    char[] baseTypes -> h
    byte getDirection(char) -> a
    void runAlgorithm() -> b
    byte[] getLevels() -> a
    boolean isWhitespace(byte) -> a
    byte typeForLevel(int) -> a
    int findRunLimit(int,int,byte[]) -> a
    void setTypes(int,int,byte) -> a
com.itextpdf.text.pdf.ByteBuffer -> com.a.a.d.h:
    int count -> a
    byte[] buf -> b
    int byteCacheSize -> d
    byte[][] byteCache -> e
    char[] chars -> f
    byte[] bytes -> g
    boolean HIGH_PRECISION -> c
    java.text.DecimalFormatSymbols dfs -> h
    com.itextpdf.text.pdf.ByteBuffer append_i(int) -> a
    com.itextpdf.text.pdf.ByteBuffer append(byte[],int,int) -> a
    com.itextpdf.text.pdf.ByteBuffer append(byte[]) -> a
    com.itextpdf.text.pdf.ByteBuffer append(java.lang.String) -> a
    com.itextpdf.text.pdf.ByteBuffer append(char) -> a
    com.itextpdf.text.pdf.ByteBuffer append(com.itextpdf.text.pdf.ByteBuffer) -> a
    com.itextpdf.text.pdf.ByteBuffer append(int) -> b
    com.itextpdf.text.pdf.ByteBuffer appendHex(byte) -> a
    com.itextpdf.text.pdf.ByteBuffer append(float) -> a
    com.itextpdf.text.pdf.ByteBuffer append(double) -> b
    java.lang.String formatDouble(double) -> a
    java.lang.String formatDouble(double,com.itextpdf.text.pdf.ByteBuffer) -> a
    void reset() -> a
    byte[] toByteArray() -> b
    int size() -> c
    void setSize(int) -> c
    java.lang.String toString() -> toString
    void writeTo(java.io.OutputStream) -> a
    void write(int) -> write
    void write(byte[],int,int) -> write
com.itextpdf.text.pdf.CFFFont -> com.a.a.d.i:
    java.lang.String[] operatorNames -> a
    java.lang.String[] standardStrings -> b
    int nextIndexOffset -> c
    java.lang.String key -> d
    java.lang.Object[] args -> e
    int arg_count -> f
    com.itextpdf.text.pdf.RandomAccessFileOrArray buf -> g
    int nameIndexOffset -> h
    int topdictIndexOffset -> i
    int stringIndexOffset -> j
    int gsubrIndexOffset -> k
    int[] nameOffsets -> l
    int[] topdictOffsets -> m
    int[] stringOffsets -> n
    int[] gsubrOffsets -> o
    com.itextpdf.text.pdf.CFFFont$Font[] fonts -> p
    java.lang.String getString(char) -> a
    char getCard8() -> a
    char getCard16() -> b
    int getOffset(int) -> d
    void seek(int) -> a
    short getShort() -> f
    int getInt() -> g
    int getPosition() -> c
    int[] getIndex(int) -> b
    void getDictItem() -> d
    com.itextpdf.text.pdf.CFFFont$RangeItem getEntireIndexRange(int) -> c
    java.lang.String[] getNames() -> e
com.itextpdf.text.pdf.CFFFont$DictNumberItem -> com.a.a.d.j:
    int value -> a
    int size -> b
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.itextpdf.text.pdf.CFFFont$DictOffsetItem -> com.a.a.d.k:
    int size -> a
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.itextpdf.text.pdf.CFFFont$Font -> com.a.a.d.l:
    java.lang.String name -> a
    java.lang.String fullName -> b
    boolean isCID -> c
    int privateOffset -> d
    int privateLength -> e
    int privateSubrs -> f
    int charstringsOffset -> g
    int encodingOffset -> h
    int charsetOffset -> i
    int fdarrayOffset -> j
    int fdselectOffset -> k
    int[] fdprivateOffsets -> l
    int[] fdprivateLengths -> m
    int nglyphs -> n
    int nstrings -> o
    int CharsetLength -> p
    int[] charstringsOffsets -> q
    int[] FDSelect -> r
    int FDSelectLength -> s
    int FDSelectFormat -> t
    int CharstringType -> u
    int FDArrayCount -> v
    int FDArrayOffsize -> w
    int[] FDArrayOffsets -> x
    int[] PrivateSubrsOffset -> y
    int[][] PrivateSubrsOffsetsArray -> z
    int[] SubrsOffsets -> A
    com.itextpdf.text.pdf.CFFFont this$0 -> B
com.itextpdf.text.pdf.CFFFont$IndexBaseItem -> com.a.a.d.m:
com.itextpdf.text.pdf.CFFFont$IndexMarkerItem -> com.a.a.d.n:
    com.itextpdf.text.pdf.CFFFont$OffsetItem offItem -> a
    com.itextpdf.text.pdf.CFFFont$IndexBaseItem indexBase -> b
    void xref() -> a
com.itextpdf.text.pdf.CFFFont$IndexOffsetItem -> com.a.a.d.o:
    int size -> a
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.itextpdf.text.pdf.CFFFont$Item -> com.a.a.d.p:
    int myOffset -> c
    void increment(int[]) -> a
    void emit(byte[]) -> a
    void xref() -> a
com.itextpdf.text.pdf.CFFFont$MarkerItem -> com.a.a.d.q:
    com.itextpdf.text.pdf.CFFFont$OffsetItem p -> a
    void xref() -> a
com.itextpdf.text.pdf.CFFFont$OffsetItem -> com.a.a.d.r:
    int value -> b
com.itextpdf.text.pdf.CFFFont$RangeItem -> com.a.a.d.s:
    int offset -> a
    int length -> b
    com.itextpdf.text.pdf.RandomAccessFileOrArray buf -> d
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.itextpdf.text.pdf.CFFFont$StringItem -> com.a.a.d.t:
    java.lang.String s -> a
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.itextpdf.text.pdf.CFFFont$SubrMarkerItem -> com.a.a.d.u:
    com.itextpdf.text.pdf.CFFFont$OffsetItem offItem -> a
    com.itextpdf.text.pdf.CFFFont$IndexBaseItem indexBase -> b
    void xref() -> a
com.itextpdf.text.pdf.CFFFont$UInt16Item -> com.a.a.d.v:
    char value -> a
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.itextpdf.text.pdf.CFFFont$UInt24Item -> com.a.a.d.w:
    int value -> a
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.itextpdf.text.pdf.CFFFont$UInt32Item -> com.a.a.d.x:
    int value -> a
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.itextpdf.text.pdf.CFFFont$UInt8Item -> com.a.a.d.y:
    char value -> a
    void increment(int[]) -> a
    void emit(byte[]) -> a
com.itextpdf.text.pdf.CFFFontSubset -> com.a.a.d.z:
    java.lang.String[] SubrsFunctions -> q
    java.lang.String[] SubrsEscapeFuncs -> r
    java.util.HashMap GlyphsUsed -> s
    java.util.ArrayList glyphsInList -> t
    java.util.HashSet FDArrayUsed -> u
    java.util.HashMap[] hSubrsUsed -> v
    java.util.ArrayList[] lSubrsUsed -> w
    java.util.HashMap hGSubrsUsed -> x
    java.util.ArrayList lGSubrsUsed -> y
    java.util.HashMap hSubrsUsedNonCID -> z
    java.util.ArrayList lSubrsUsedNonCID -> A
    byte[][] NewLSubrsIndex -> B
    byte[] NewSubrsIndexNonCID -> C
    byte[] NewGSubrsIndex -> D
    byte[] NewCharStringsIndex -> E
    int GBias -> F
    java.util.LinkedList OutputList -> G
    int NumOfHints -> H
    int CountRange(int,int) -> a
    void readFDSelect(int) -> d
    void BuildFDArrayUsed(int) -> e
    byte[] Process(java.lang.String) -> a
    int CalcBias(int,int) -> b
    void BuildFDSubrsOffsets(int,int) -> c
    void BuildSubrUsed(int,int,int,int[],java.util.HashMap,java.util.ArrayList) -> a
    void BuildGSubrsUsed(int) -> f
    void ReadASubr(int,int,int,int,java.util.HashMap,java.util.ArrayList,int[]) -> a
    void HandelStack() -> f
    void EmptyStack() -> g
    void ReadCommand() -> h
    int CalcHints(int,int,int,int,int[]) -> a
    byte[] BuildNewIndex(int[],java.util.HashMap,byte) -> a
    byte[] BuildNewFile(int) -> g
    void BuildIndexHeader$4868d30e(int,int) -> d
    void CreateNewStringIndex(int) -> h
    void CreateFDSelect(com.itextpdf.text.pdf.CFFFont$OffsetItem,int) -> a
    void CreateFDArray(com.itextpdf.text.pdf.CFFFont$OffsetItem,com.itextpdf.text.pdf.CFFFont$OffsetItem,int) -> a
    void ReconstructFDArray(int,com.itextpdf.text.pdf.CFFFont$OffsetItem[]) -> a
    void ReconstructPrivateDict(int,com.itextpdf.text.pdf.CFFFont$OffsetItem[],com.itextpdf.text.pdf.CFFFont$IndexBaseItem[],com.itextpdf.text.pdf.CFFFont$OffsetItem[]) -> a
    void ReconstructPrivateSubrs(int,com.itextpdf.text.pdf.CFFFont$IndexBaseItem[],com.itextpdf.text.pdf.CFFFont$OffsetItem[]) -> a
    int CalcSubrOffsetSize(int,int) -> e
    void CreateNonCIDPrivate(int,com.itextpdf.text.pdf.CFFFont$OffsetItem) -> a
com.itextpdf.text.pdf.CJKFont -> com.a.a.d.aa:
    java.util.Properties cjkFonts -> v
    java.util.Properties cjkEncodings -> w
    java.util.HashMap allFonts -> x
    boolean propertiesLoaded -> y
    java.util.HashMap registryNames -> z
    com.itextpdf.text.pdf.fonts.cmaps.CMapCidByte cidByte -> A
    com.itextpdf.text.pdf.fonts.cmaps.CMapUniCid uniCid -> B
    com.itextpdf.text.pdf.fonts.cmaps.CMapCidUni cidUni -> C
    java.lang.String uniMap -> D
    java.lang.String fontName -> E
    java.lang.String style -> F
    java.lang.String CMap -> G
    boolean cidDirect -> H
    com.itextpdf.text.pdf.IntHashtable vMetrics -> I
    com.itextpdf.text.pdf.IntHashtable hMetrics -> J
    java.util.HashMap fontDesc -> K
    boolean vertical -> L
    void loadProperties() -> j
    boolean isCJKFont(java.lang.String,java.lang.String) -> b
    int getWidth(int) -> a
    int getWidth(java.lang.String) -> b
    int getRawWidth(int,java.lang.String) -> a
    void writeFont(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    float getDescNumber(java.lang.String) -> e
    float getBBox(int) -> f
    float getFontDescriptor(int,float) -> b
    java.lang.String getPostscriptFontName() -> g
    java.lang.String[][] getFamilyFontName() -> h
    com.itextpdf.text.pdf.IntHashtable createMetric(java.lang.String) -> f
    java.lang.String convertToHCIDMetrics(int[],com.itextpdf.text.pdf.IntHashtable) -> a
    java.lang.String convertToVCIDMetrics(int[],com.itextpdf.text.pdf.IntHashtable,com.itextpdf.text.pdf.IntHashtable) -> a
    java.util.HashMap readFontProperties(java.lang.String) -> g
    int getUnicodeEquivalent(int) -> d
    int getCidCode(int) -> e
    int[] getRawCharBBox(int,java.lang.String) -> b
    byte[] convertToBytes(java.lang.String) -> c
    byte[] convertToBytes(int) -> b
    boolean isIdentity() -> i
com.itextpdf.text.pdf.CMYKColor -> com.a.a.d.ab:
    float cyan -> n
    float magenta -> o
    float yellow -> p
    float black -> q
    float getCyan() -> d
    float getMagenta() -> e
    float getYellow() -> f
    float getBlack() -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.itextpdf.text.pdf.ColorDetails -> com.a.a.d.ac:
    com.itextpdf.text.pdf.PdfIndirectReference indirectReference -> a
    com.itextpdf.text.pdf.PdfName colorName -> b
    com.itextpdf.text.pdf.PdfSpotColor spotcolor -> c
    com.itextpdf.text.pdf.PdfObject getSpotColor(com.itextpdf.text.pdf.PdfWriter) -> a
com.itextpdf.text.pdf.ColumnText -> com.a.a.d.ad:
    int runDirection -> a
    float maxY -> b
    float minY -> c
    float leftX -> d
    float rightX -> e
    int alignment -> f
    java.util.ArrayList leftWall -> g
    java.util.ArrayList rightWall -> h
    com.itextpdf.text.pdf.BidiLine bidiLine -> i
    float yLine -> j
    float lastX -> k
    float currentLeading -> l
    float fixedLeading -> m
    float multipliedLeading -> n
    com.itextpdf.text.pdf.PdfContentByte canvas -> o
    com.itextpdf.text.pdf.PdfContentByte[] canvases -> p
    int lineStatus -> q
    float indent -> r
    float followingIndent -> s
    float rightIndent -> t
    float extraParagraphSpace -> u
    float rectangularWidth -> v
    boolean rectangularMode -> w
    float spaceCharRatio -> E
    boolean lastWasNewline -> F
    int linesWritten -> G
    float firstLineY -> H
    boolean firstLineYDone -> I
    int arabicOptions -> J
    float descender -> x
    boolean composite -> y
    com.itextpdf.text.pdf.ColumnText compositeColumn -> z
    java.util.LinkedList compositeElements -> A
    int listIdx -> B
    int rowIdx -> C
    int splittedRow -> K
    com.itextpdf.text.Phrase waitPhrase -> D
    boolean useAscender -> L
    float filledWidth -> M
    boolean adjustFirstLine -> N
    com.itextpdf.text.pdf.ColumnText duplicate(com.itextpdf.text.pdf.ColumnText) -> a
    void addWaitingPhrase() -> j
    void addText(com.itextpdf.text.Phrase) -> a
    void setText(com.itextpdf.text.Phrase) -> b
    void addElement(com.itextpdf.text.Element) -> a
    java.util.ArrayList convertColumn(float[]) -> a
    float findLimitsPoint(java.util.ArrayList) -> a
    float[] findLimitsOneLine() -> k
    float[] findLimitsTwoLines() -> l
    void setColumns(float[],float[]) -> a
    void setSimpleColumn(float,float,float,float) -> a
    void setLeading(float,float) -> a
    void setYLine(float) -> a
    float getYLine() -> a
    void setAlignment(int) -> a
    int getAlignment() -> b
    void setIndent(float) -> b
    void setFollowingIndent(float) -> c
    void setRightIndent(float) -> d
    int go() -> c
    int go(boolean) -> a
    void setRunDirection(int) -> b
    int getRunDirection() -> d
    float getDescender() -> e
    void showTextAligned$47abfabf(com.itextpdf.text.pdf.PdfContentByte,com.itextpdf.text.Phrase,float,float) -> a
    void setCanvas(com.itextpdf.text.pdf.PdfContentByte) -> a
    void setCanvases(com.itextpdf.text.pdf.PdfContentByte[]) -> a
    boolean zeroHeightElement() -> f
    float getFilledWidth() -> g
    void setFilledWidth$133aeb() -> h
    void updateFilledWidth(float) -> e
    void setAdjustFirstLine$1385ff() -> i
com.itextpdf.text.pdf.DefaultSplitCharacter -> com.a.a.d.ae:
    com.itextpdf.text.SplitCharacter DEFAULT -> a
    boolean isSplitCharacter$8d056dd(int,char[],com.itextpdf.text.pdf.PdfChunk[]) -> a
com.itextpdf.text.pdf.DocumentFont -> com.a.a.d.af:
    java.util.HashMap metrics -> v
    java.lang.String fontName -> w
    com.itextpdf.text.pdf.PRIndirectReference refFont -> x
    com.itextpdf.text.pdf.IntHashtable uni2byte -> y
    float ascender -> z
    float capHeight -> A
    float descender -> B
    float italicAngle -> C
    float fontWeight -> D
    float llx -> E
    float lly -> F
    float urx -> G
    float ury -> H
    boolean isType0 -> I
    com.itextpdf.text.pdf.BaseFont cjkMirror -> J
    int[] stdEnc -> K
    java.lang.String[][] getFamilyFontName() -> h
    float getFontDescriptor(int,float) -> b
    java.lang.String getPostscriptFontName() -> g
    int getRawWidth(int,java.lang.String) -> a
    void writeFont(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    int getWidth(int) -> a
    int getWidth(java.lang.String) -> b
    byte[] convertToBytes(java.lang.String) -> c
    byte[] convertToBytes(int) -> b
    com.itextpdf.text.pdf.PdfIndirectReference getIndirectReference() -> i
    int[] getRawCharBBox(int,java.lang.String) -> b
com.itextpdf.text.pdf.ExtendedColor -> com.a.a.d.ag:
    int type -> r
    int getType() -> h
    int getType(com.itextpdf.text.BaseColor) -> a
    float normalize(float) -> a
com.itextpdf.text.pdf.ExtraEncoding -> com.a.a.d.ah:
    byte[] charToByte$3b9947f4(java.lang.String) -> a
    byte[] charToByte$777d2fab(char) -> a
    java.lang.String byteToChar$2427f066(byte[]) -> a
com.itextpdf.text.pdf.FilterHandlers -> com.a.a.d.ai:
    java.util.Map defaults -> a
    java.util.Map getDefaultFilterHandlers() -> a
com.itextpdf.text.pdf.FilterHandlers$FilterHandler -> com.a.a.d.aj:
    byte[] decode$4601eee(byte[],com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfDictionary) -> a
com.itextpdf.text.pdf.FilterHandlers$Filter_ASCII85DECODE -> com.a.a.d.ak:
    byte[] decode$4601eee(byte[],com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfDictionary) -> a
com.itextpdf.text.pdf.FilterHandlers$Filter_ASCIIHEXDECODE -> com.a.a.d.al:
    byte[] decode$4601eee(byte[],com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfDictionary) -> a
com.itextpdf.text.pdf.FilterHandlers$Filter_CCITTFAXDECODE -> com.a.a.d.am:
    byte[] decode$4601eee(byte[],com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfDictionary) -> a
com.itextpdf.text.pdf.FilterHandlers$Filter_DoNothing -> com.a.a.d.an:
    byte[] decode$4601eee(byte[],com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfDictionary) -> a
com.itextpdf.text.pdf.FilterHandlers$Filter_FLATEDECODE -> com.a.a.d.ao:
    byte[] decode$4601eee(byte[],com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfDictionary) -> a
com.itextpdf.text.pdf.FilterHandlers$Filter_LZWDECODE -> com.a.a.d.ap:
    byte[] decode$4601eee(byte[],com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfDictionary) -> a
com.itextpdf.text.pdf.FilterHandlers$Filter_RUNLENGTHDECODE -> com.a.a.d.aq:
    byte[] decode$4601eee(byte[],com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfDictionary) -> a
com.itextpdf.text.pdf.FontDetails -> com.a.a.d.ar:
    com.itextpdf.text.pdf.PdfIndirectReference indirectReference -> a
    com.itextpdf.text.pdf.PdfName fontName -> b
    com.itextpdf.text.pdf.BaseFont baseFont -> c
    com.itextpdf.text.pdf.TrueTypeFontUnicode ttu -> d
    com.itextpdf.text.pdf.CJKFont cjkFont -> e
    byte[] shortTag -> f
    java.util.HashMap longTag -> g
    com.itextpdf.text.pdf.IntHashtable cjkTag -> h
    int fontType -> i
    boolean symbolic -> j
    boolean subset -> k
    byte[] convertToBytes(java.lang.String) -> a
    void writeFont(com.itextpdf.text.pdf.PdfWriter) -> a
    void setSubset$1385ff() -> a
com.itextpdf.text.pdf.GlyphList -> com.a.a.d.as:
    java.util.HashMap unicode2names -> a
    java.util.HashMap names2unicode -> b
    int[] nameToUnicode(java.lang.String) -> a
    java.lang.String unicodeToName(int) -> a
com.itextpdf.text.pdf.GrayColor -> com.a.a.d.at:
    float gray -> p
    com.itextpdf.text.pdf.GrayColor GRAYBLACK -> n
    com.itextpdf.text.pdf.GrayColor GRAYWHITE -> o
    float getGray() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.itextpdf.text.pdf.HyphenationEvent -> com.a.a.d.au:
    java.lang.String getHyphenatedWordPre$3f15c0cc() -> a
    java.lang.String getHyphenatedWordPost() -> b
com.itextpdf.text.pdf.IntHashtable -> com.a.a.d.av:
    com.itextpdf.text.pdf.IntHashtable$Entry[] table -> a
    int count -> b
    int threshold -> c
    float loadFactor -> d
    boolean containsKey(int) -> a
    int get(int) -> b
    int put(int,int) -> a
    int remove(int) -> c
    int[] toOrderedKeys() -> a
    java.lang.Object clone() -> clone
com.itextpdf.text.pdf.IntHashtable$Entry -> com.a.a.d.aw:
    int hash -> a
    int key -> b
    int value -> c
    com.itextpdf.text.pdf.IntHashtable$Entry next -> d
    java.lang.Object clone() -> clone
com.itextpdf.text.pdf.LZWDecoder -> com.a.a.d.ax:
    byte[][] stringTable -> a
    byte[] data -> b
    java.io.OutputStream uncompData -> c
    int tableIndex -> d
    int bitsToGet -> e
    int bytePointer -> f
    int bitPointer -> g
    int nextData -> h
    int nextBits -> i
    int[] andTable -> j
    void decode(byte[],java.io.OutputStream) -> a
    void initializeStringTable() -> a
    void writeString(byte[]) -> a
    int getNextCode() -> b
com.itextpdf.text.pdf.LongHashtable -> com.a.a.d.ay:
    com.itextpdf.text.pdf.LongHashtable$Entry[] table -> a
    int threshold -> b
    float loadFactor -> c
    long get(long) -> a
    java.lang.Object clone() -> clone
com.itextpdf.text.pdf.LongHashtable$Entry -> com.a.a.d.az:
    int hash -> a
    long key -> b
    long value -> c
    com.itextpdf.text.pdf.LongHashtable$Entry next -> d
    java.lang.Object clone() -> clone
com.itextpdf.text.pdf.MappedRandomAccessFile -> com.a.a.d.ba:
    java.nio.channels.FileChannel channel -> a
    java.nio.MappedByteBuffer[] mappedBuffers -> b
    long size -> c
    long pos -> d
    void init(java.nio.channels.FileChannel,java.nio.channels.FileChannel$MapMode) -> a
    int read() -> a
    int read(byte[],int,int) -> a
    long getFilePointer() -> b
    void seek(long) -> a
    long length() -> c
    void close() -> d
    void finalize() -> finalize
com.itextpdf.text.pdf.MappedRandomAccessFile$1 -> com.a.a.d.bb:
    java.nio.ByteBuffer val$buffer -> a
    java.lang.Boolean run() -> a
    java.lang.Object run() -> run
com.itextpdf.text.pdf.MultiColumnText -> com.a.a.d.bc:
    float desiredHeight -> a
    float totalHeight -> b
    boolean overflow -> c
    float top -> d
    com.itextpdf.text.pdf.ColumnText columnText -> e
    java.util.ArrayList columnDefs -> f
    boolean simple -> g
    int currentColumn -> h
    float nextY -> i
    boolean columnsRightToLeft -> j
    com.itextpdf.text.pdf.PdfDocument document -> k
    float write(com.itextpdf.text.pdf.PdfContentByte,com.itextpdf.text.pdf.PdfDocument,float) -> a
    boolean process(com.itextpdf.text.ElementListener) -> a
    int type() -> b
    boolean isContent() -> k
    boolean isNestable() -> l
    java.util.List getChunks() -> a
    float access$1(com.itextpdf.text.pdf.MultiColumnText) -> a
    float access$3(com.itextpdf.text.pdf.MultiColumnText) -> b
com.itextpdf.text.pdf.MultiColumnText$ColumnDef -> com.a.a.d.bd:
    float[] left -> b
    float[] right -> c
    com.itextpdf.text.pdf.MultiColumnText this$0 -> a
    float[] resolvePositions(int) -> a
    float[] resolvePositions(float[]) -> a
    boolean isSimple() -> a
    boolean access$0(com.itextpdf.text.pdf.MultiColumnText$ColumnDef) -> a
com.itextpdf.text.pdf.NumberArray -> com.a.a.d.be:
com.itextpdf.text.pdf.OutputStreamCounter -> com.a.a.d.bf:
    java.io.OutputStream out -> a
    long counter -> b
    void close() -> close
    void flush() -> flush
    void write(byte[]) -> write
    void write(int) -> write
    void write(byte[],int,int) -> write
    long getCounter() -> a
com.itextpdf.text.pdf.PRIndirectReference -> com.a.a.d.bg:
    com.itextpdf.text.pdf.PdfReader reader -> a
    void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream) -> a
    com.itextpdf.text.pdf.PdfReader getReader() -> a
com.itextpdf.text.pdf.PRStream -> com.a.a.d.bh:
    com.itextpdf.text.pdf.PdfReader reader -> a
    long offset -> b
    int length -> c
    int objNum -> d
    int objGen -> e
    void setLength(int) -> a
    long getOffset() -> a
    int getLength() -> b
    com.itextpdf.text.pdf.PdfReader getReader() -> c
    byte[] getBytes() -> d
    void setObjNum(int,int) -> a
    void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream) -> a
com.itextpdf.text.pdf.PRTokeniser -> com.a.a.d.bi:
    boolean[] delims -> a
    com.itextpdf.text.pdf.RandomAccessFileOrArray file -> b
    com.itextpdf.text.pdf.PRTokeniser$TokenType type -> c
    java.lang.String stringValue -> d
    int reference -> e
    int generation -> f
    boolean hexString -> g
    void seek(long) -> a
    long getFilePointer() -> a
    void close() -> b
    long length() -> c
    int read() -> d
    com.itextpdf.text.pdf.RandomAccessFileOrArray getSafeFile() -> e
    com.itextpdf.text.pdf.RandomAccessFileOrArray getFile() -> f
    java.lang.String readString(int) -> a
    boolean isWhitespace(int) -> b
    com.itextpdf.text.pdf.PRTokeniser$TokenType getTokenType() -> g
    java.lang.String getStringValue() -> h
    int getReference() -> i
    int getGeneration() -> j
    void backOnePosition(int) -> c
    void throwError(java.lang.String) -> a
    int getHex(int) -> d
    void nextValidToken() -> k
    boolean nextToken() -> l
    int intValue() -> m
    boolean readLineSegment(byte[]) -> a
    boolean isHexString() -> n
com.itextpdf.text.pdf.PRTokeniser$TokenType -> com.a.a.d.bj:
    com.itextpdf.text.pdf.PRTokeniser$TokenType NUMBER -> a
    com.itextpdf.text.pdf.PRTokeniser$TokenType STRING -> b
    com.itextpdf.text.pdf.PRTokeniser$TokenType NAME -> c
    com.itextpdf.text.pdf.PRTokeniser$TokenType COMMENT -> d
    com.itextpdf.text.pdf.PRTokeniser$TokenType START_ARRAY -> e
    com.itextpdf.text.pdf.PRTokeniser$TokenType END_ARRAY -> f
    com.itextpdf.text.pdf.PRTokeniser$TokenType START_DIC -> g
    com.itextpdf.text.pdf.PRTokeniser$TokenType END_DIC -> h
    com.itextpdf.text.pdf.PRTokeniser$TokenType REF -> i
    com.itextpdf.text.pdf.PRTokeniser$TokenType OTHER -> j
    com.itextpdf.text.pdf.PRTokeniser$TokenType ENDOFFILE -> k
    com.itextpdf.text.pdf.PRTokeniser$TokenType[] ENUM$VALUES -> l
    com.itextpdf.text.pdf.PRTokeniser$TokenType[] values() -> values
    com.itextpdf.text.pdf.PRTokeniser$TokenType valueOf(java.lang.String) -> valueOf
com.itextpdf.text.pdf.PageResources -> com.a.a.d.bk:
    com.itextpdf.text.pdf.PdfDictionary fontDictionary -> a
    com.itextpdf.text.pdf.PdfDictionary xObjectDictionary -> b
    com.itextpdf.text.pdf.PdfDictionary colorDictionary -> c
    com.itextpdf.text.pdf.PdfDictionary patternDictionary -> d
    com.itextpdf.text.pdf.PdfDictionary shadingDictionary -> e
    com.itextpdf.text.pdf.PdfDictionary extGStateDictionary -> f
    com.itextpdf.text.pdf.PdfDictionary propertyDictionary -> g
    java.util.HashSet forbiddenNames -> h
    com.itextpdf.text.pdf.PdfDictionary originalResources -> i
    int[] namePtr -> j
    java.util.HashMap usedNames -> k
    com.itextpdf.text.pdf.PdfName translateName(com.itextpdf.text.pdf.PdfName) -> a
    com.itextpdf.text.pdf.PdfName addFont(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfIndirectReference) -> a
    com.itextpdf.text.pdf.PdfName addColor(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfIndirectReference) -> b
    void addDefaultColorDiff(com.itextpdf.text.pdf.PdfDictionary) -> a
    com.itextpdf.text.pdf.PdfName addPattern(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfIndirectReference) -> c
    com.itextpdf.text.pdf.PdfDictionary getResources() -> a
com.itextpdf.text.pdf.PatternColor -> com.a.a.d.bl:
    com.itextpdf.text.pdf.PdfPatternPainter painter -> n
    com.itextpdf.text.pdf.PdfPatternPainter getPainter() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.itextpdf.text.pdf.PdfAcroForm -> com.a.a.d.bm:
    com.itextpdf.text.pdf.PdfWriter writer -> a
    java.util.HashSet fieldTemplates -> b
    com.itextpdf.text.pdf.PdfArray documentFields -> c
    com.itextpdf.text.pdf.PdfArray calculationOrder -> d
    int sigFlags -> e
    void addFieldTemplates(java.util.HashSet) -> a
    void addDocumentField(com.itextpdf.text.pdf.PdfIndirectReference) -> a
    boolean isValid() -> a
com.itextpdf.text.pdf.PdfAction -> com.a.a.d.bn:
    com.itextpdf.text.pdf.PdfAction javaScript$64bf57e0(java.lang.String,com.itextpdf.text.pdf.PdfWriter) -> b
    com.itextpdf.text.pdf.PdfAction javaScript(java.lang.String,com.itextpdf.text.pdf.PdfWriter) -> a
com.itextpdf.text.pdf.PdfAnnotation -> com.a.a.d.bo:
    com.itextpdf.text.pdf.PdfName HIGHLIGHT_NONE -> a
    com.itextpdf.text.pdf.PdfName HIGHLIGHT_INVERT -> b
    com.itextpdf.text.pdf.PdfName HIGHLIGHT_OUTLINE -> c
    com.itextpdf.text.pdf.PdfName HIGHLIGHT_PUSH -> d
    com.itextpdf.text.pdf.PdfName HIGHLIGHT_TOGGLE -> e
    com.itextpdf.text.pdf.PdfName APPEARANCE_NORMAL -> f
    com.itextpdf.text.pdf.PdfName APPEARANCE_ROLLOVER -> g
    com.itextpdf.text.pdf.PdfName APPEARANCE_DOWN -> h
    com.itextpdf.text.pdf.PdfName AA_ENTER -> i
    com.itextpdf.text.pdf.PdfName AA_EXIT -> j
    com.itextpdf.text.pdf.PdfName AA_DOWN -> k
    com.itextpdf.text.pdf.PdfName AA_UP -> l
    com.itextpdf.text.pdf.PdfName AA_FOCUS -> m
    com.itextpdf.text.pdf.PdfName AA_BLUR -> n
    com.itextpdf.text.pdf.PdfName AA_JS_KEY -> o
    com.itextpdf.text.pdf.PdfName AA_JS_FORMAT -> p
    com.itextpdf.text.pdf.PdfName AA_JS_CHANGE -> q
    com.itextpdf.text.pdf.PdfName AA_JS_OTHER_CHANGE -> r
    com.itextpdf.text.pdf.PdfWriter writer -> s
    com.itextpdf.text.pdf.PdfIndirectReference reference -> t
    java.util.HashSet templates -> u
    boolean form -> v
    boolean annotation -> w
    boolean used -> x
    int placeInPage -> E
    com.itextpdf.text.pdf.PdfAnnotation createScreen(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle,java.lang.String,com.itextpdf.text.pdf.PdfFileSpecification,java.lang.String,boolean) -> a
    com.itextpdf.text.pdf.PdfIndirectReference getIndirectReference() -> a
    boolean isUsed() -> b
    void setUsed() -> c
    java.util.HashSet getTemplates() -> e
    boolean isForm() -> f
    boolean isAnnotation() -> g
    int getPlaceInPage() -> h
com.itextpdf.text.pdf.PdfArray -> com.a.a.d.bp:
    java.util.ArrayList arrayList -> a
    void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.util.ArrayList getArrayList() -> a
    java.lang.String toString() -> toString
    com.itextpdf.text.pdf.PdfObject set(int,com.itextpdf.text.pdf.PdfObject) -> a
    int size() -> b
    boolean add(com.itextpdf.text.pdf.PdfObject) -> a
    boolean add(float[]) -> a
    boolean add(int[]) -> a
    void addFirst(com.itextpdf.text.pdf.PdfObject) -> b
    boolean contains(com.itextpdf.text.pdf.PdfObject) -> c
    java.util.ListIterator listIterator() -> c
    com.itextpdf.text.pdf.PdfObject getPdfObject(int) -> a
    com.itextpdf.text.pdf.PdfDictionary getAsDict(int) -> b
    java.util.Iterator iterator() -> iterator
com.itextpdf.text.pdf.PdfBoolean -> com.a.a.d.bq:
    com.itextpdf.text.pdf.PdfBoolean PDFTRUE -> a
    com.itextpdf.text.pdf.PdfBoolean PDFFALSE -> b
    boolean value -> c
    boolean booleanValue() -> a
    java.lang.String toString() -> toString
com.itextpdf.text.pdf.PdfBorderArray -> com.a.a.d.br:
com.itextpdf.text.pdf.PdfChunk -> com.a.a.d.bs:
    char[] singleSpace -> i
    com.itextpdf.text.pdf.PdfChunk[] thisChunk -> j
    java.util.HashSet keysAttributes -> k
    java.util.HashSet keysNoStroke -> l
    java.lang.String value -> a
    java.lang.String encoding -> b
    com.itextpdf.text.pdf.PdfFont font -> c
    com.itextpdf.text.pdf.BaseFont baseFont -> d
    com.itextpdf.text.SplitCharacter splitCharacter -> e
    java.util.HashMap attributes -> f
    java.util.HashMap noStroke -> g
    boolean newlineSplit -> h
    int getUnicodeEquivalent(int) -> a
    com.itextpdf.text.pdf.PdfChunk split(float) -> a
    com.itextpdf.text.pdf.PdfChunk truncate(float) -> b
    com.itextpdf.text.pdf.PdfFont font() -> a
    com.itextpdf.text.BaseColor color() -> b
    float width() -> c
    boolean isNewlineSplit() -> d
    float getWidthCorrected(float,float) -> a
    float getTextRise() -> e
    float trimLastSpace() -> f
    float trimFirstSpace() -> g
    java.lang.Object getAttribute(java.lang.String) -> a
    boolean isAttribute(java.lang.String) -> b
    boolean isStroked() -> h
    boolean isSeparator() -> i
    boolean isHorizontalSeparator() -> j
    boolean isTab() -> k
    void adjustLeft(float) -> c
    java.lang.String toString() -> toString
    boolean isSpecialEncoding() -> l
    int length() -> m
    int lengthUtf32() -> n
    boolean isExtSplitCharacter$8d056dd(int,char[],com.itextpdf.text.pdf.PdfChunk[]) -> a
    java.lang.String trim(java.lang.String) -> c
    float getCharWidth(int) -> b
    boolean noPrint(int) -> c
com.itextpdf.text.pdf.PdfColor -> com.a.a.d.bt:
com.itextpdf.text.pdf.PdfContentByte -> com.a.a.d.bu:
    com.itextpdf.text.pdf.ByteBuffer content -> a
    com.itextpdf.text.pdf.PdfWriter writer -> b
    com.itextpdf.text.pdf.PdfDocument pdf -> c
    com.itextpdf.text.pdf.PdfContentByte$GraphicState state -> d
    java.util.ArrayList stateList -> e
    java.util.ArrayList layerDepth -> f
    int separator -> g
    int mcDepth -> h
    boolean inText -> i
    java.util.HashMap abrev -> j
    java.lang.String toString() -> toString
    com.itextpdf.text.pdf.ByteBuffer getInternalBuffer() -> a
    byte[] toPdf$67896724() -> b
    void add(com.itextpdf.text.pdf.PdfContentByte) -> a
    float getXTLM() -> c
    float getYTLM() -> d
    float getCharacterSpacing() -> e
    void setLineCap(int) -> a
    void setLineWidth(float) -> a
    void clip() -> f
    void setGrayFill(float) -> b
    void setGrayStroke(float) -> c
    void resetGrayStroke() -> g
    void HelperRGB(float,float,float) -> a
    void resetRGBColorFill() -> h
    void resetRGBColorStroke() -> i
    void HelperCMYK(float,float,float,float) -> d
    void setCMYKColorFillF(float,float,float,float) -> a
    void setCMYKColorStrokeF(float,float,float,float) -> b
    void moveTo(float,float) -> a
    void lineTo(float,float) -> b
    void rectangle(float,float,float,float) -> c
    boolean compareColors(com.itextpdf.text.BaseColor,com.itextpdf.text.BaseColor) -> a
    void rectangle(com.itextpdf.text.Rectangle) -> a
    void newPath() -> j
    void stroke() -> k
    void fill() -> l
    void reset() -> m
    void beginText() -> n
    void endText() -> o
    void saveState() -> p
    void restoreState() -> q
    void setCharacterSpacing(float) -> d
    void setWordSpacing(float) -> e
    void setFontAndSize(com.itextpdf.text.pdf.BaseFont,float) -> a
    void setTextRenderingMode(int) -> b
    void setTextRise(float) -> f
    void showText2(java.lang.String) -> b
    void showText(java.lang.String) -> a
    void setTextMatrix$7b59a84b(float,float,float,float,float) -> a
    void setTextMatrix(float,float) -> c
    void moveText(float,float) -> d
    int size() -> r
    byte[] escapeString(byte[]) -> a
    void escapeString(byte[],com.itextpdf.text.pdf.ByteBuffer) -> a
    void concatCTM(float,float,float,float,float,float) -> a
    void setRGBColorFill(int,int,int) -> a
    void setRGBColorStroke(int,int,int) -> b
    void setColorStroke(com.itextpdf.text.BaseColor) -> a
    void setColorFill(com.itextpdf.text.BaseColor) -> b
    void setColorFill(com.itextpdf.text.pdf.PdfSpotColor,float) -> a
    void setColorStroke(com.itextpdf.text.pdf.PdfSpotColor,float) -> b
    void setPatternFill(com.itextpdf.text.pdf.PdfPatternPainter) -> a
    void outputColorNumbers(com.itextpdf.text.BaseColor,float) -> a
    void setPatternFill(com.itextpdf.text.pdf.PdfPatternPainter,com.itextpdf.text.BaseColor,float) -> a
    void setPatternStroke(com.itextpdf.text.pdf.PdfPatternPainter,com.itextpdf.text.BaseColor,float) -> b
    void setPatternStroke(com.itextpdf.text.pdf.PdfPatternPainter) -> b
    void checkWriter() -> w
    void showText(com.itextpdf.text.pdf.PdfTextArray) -> a
    com.itextpdf.text.pdf.PdfWriter getPdfWriter() -> s
    com.itextpdf.text.pdf.PdfDocument getPdfDocument() -> t
    com.itextpdf.text.pdf.PdfContentByte getDuplicate() -> u
    com.itextpdf.text.pdf.PageResources getPageResources() -> v
    void addAnnotation(com.itextpdf.text.pdf.PdfAnnotation) -> a
    void sanityCheck() -> x
com.itextpdf.text.pdf.PdfContentByte$GraphicState -> com.a.a.d.bv:
    com.itextpdf.text.pdf.FontDetails fontDetails -> a
    com.itextpdf.text.pdf.ColorDetails colorDetails -> b
    float size -> c
    float xTLM -> d
    float yTLM -> e
    float leading -> f
    float scale -> g
    float charSpace -> h
    float wordSpace -> i
com.itextpdf.text.pdf.PdfContentParser -> com.a.a.d.bw:
    com.itextpdf.text.pdf.PRTokeniser tokeniser -> a
    int[] $SWITCH_TABLE$com$itextpdf$text$pdf$PRTokeniser$TokenType -> b
    java.util.ArrayList parse(java.util.ArrayList) -> a
    com.itextpdf.text.pdf.PdfArray readArray() -> a
    com.itextpdf.text.pdf.PdfObject readPRObject() -> b
    boolean nextValidToken() -> c
    int[] $SWITCH_TABLE$com$itextpdf$text$pdf$PRTokeniser$TokenType() -> d
com.itextpdf.text.pdf.PdfContents -> com.a.a.d.bx:
    byte[] SAVESTATE -> a
    byte[] RESTORESTATE -> b
    byte[] ROTATE90 -> c
    byte[] ROTATE180 -> d
    byte[] ROTATE270 -> e
    byte[] ROTATEFINAL -> f
com.itextpdf.text.pdf.PdfDashPattern -> com.a.a.d.by:
    float dash -> b
    float gap -> c
    float phase -> d
    void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream) -> a
com.itextpdf.text.pdf.PdfDate -> com.a.a.d.bz:
    int[] DATE_SPACE -> g
    java.lang.String setLength(int,int) -> b
com.itextpdf.text.pdf.PdfDestination -> com.a.a.d.ca:
    boolean status -> b
    boolean hasPage() -> e
    boolean addPage(com.itextpdf.text.pdf.PdfIndirectReference) -> a
com.itextpdf.text.pdf.PdfDictionary -> com.a.a.d.cb:
    com.itextpdf.text.pdf.PdfName FONT -> y
    com.itextpdf.text.pdf.PdfName OUTLINES -> z
    com.itextpdf.text.pdf.PdfName PAGE -> A
    com.itextpdf.text.pdf.PdfName PAGES -> B
    com.itextpdf.text.pdf.PdfName CATALOG -> C
    com.itextpdf.text.pdf.PdfName dictionaryType -> a
    java.util.HashMap hashMap -> D
    void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.lang.String toString() -> toString
    void put(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfObject) -> a
    void putAll(com.itextpdf.text.pdf.PdfDictionary) -> a
    void remove(com.itextpdf.text.pdf.PdfName) -> a
    com.itextpdf.text.pdf.PdfObject get(com.itextpdf.text.pdf.PdfName) -> b
    com.itextpdf.text.pdf.PdfObject getDirectObject(com.itextpdf.text.pdf.PdfName) -> g
    int size() -> i
    void merge(com.itextpdf.text.pdf.PdfDictionary) -> b
    void mergeDifferent(com.itextpdf.text.pdf.PdfDictionary) -> c
    com.itextpdf.text.pdf.PdfDictionary getAsDict(com.itextpdf.text.pdf.PdfName) -> c
    com.itextpdf.text.pdf.PdfArray getAsArray(com.itextpdf.text.pdf.PdfName) -> d
    com.itextpdf.text.pdf.PdfNumber getAsNumber(com.itextpdf.text.pdf.PdfName) -> e
    com.itextpdf.text.pdf.PdfBoolean getAsBoolean(com.itextpdf.text.pdf.PdfName) -> f
com.itextpdf.text.pdf.PdfDocument -> com.a.a.d.cc:
    com.itextpdf.text.pdf.PdfWriter writer -> s
    com.itextpdf.text.pdf.PdfContentByte text -> t
    com.itextpdf.text.pdf.PdfContentByte graphics -> u
    float leading -> v
    int alignment -> w
    float currentHeight -> x
    boolean isSectionTitle -> y
    int leadingCount -> z
    com.itextpdf.text.pdf.PdfAction anchorAction -> A
    int textEmptySize -> B
    float nextMarginLeft -> C
    float nextMarginRight -> D
    float nextMarginTop -> E
    float nextMarginBottom -> F
    boolean firstPageEvent -> G
    com.itextpdf.text.pdf.PdfLine line -> H
    java.util.ArrayList lines -> I
    int lastElementType -> J
    com.itextpdf.text.pdf.PdfDocument$Indentation indentation -> K
    com.itextpdf.text.pdf.PdfDocument$PdfInfo info -> L
    com.itextpdf.text.pdf.PdfOutline rootOutline -> M
    com.itextpdf.text.pdf.PdfOutline currentOutline -> N
    com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp viewerPreferences -> O
    com.itextpdf.text.pdf.PdfPageLabels pageLabels -> P
    java.util.TreeMap localDestinations -> Q
    java.util.HashMap documentLevelJS -> R
    java.text.DecimalFormat SIXTEEN_DIGITS -> S
    java.util.HashMap documentFileAttachment -> T
    java.lang.String openActionName -> U
    com.itextpdf.text.pdf.PdfAction openActionAction -> V
    com.itextpdf.text.pdf.PdfDictionary additionalActions -> W
    com.itextpdf.text.pdf.collection.PdfCollection collection -> X
    com.itextpdf.text.pdf.internal.PdfAnnotationsImp annotationsImp -> Y
    int markPoint -> Z
    com.itextpdf.text.Rectangle nextPageSize -> aa
    java.util.HashMap thisBoxSize -> ab
    java.util.HashMap boxSize -> ac
    boolean pageEmpty -> ah
    com.itextpdf.text.pdf.PdfDictionary pageAA -> ad
    com.itextpdf.text.pdf.PageResources pageResources -> ae
    boolean strictImageSequence -> af
    float imageEnd -> ag
    void addWriter(com.itextpdf.text.pdf.PdfWriter) -> a
    boolean add(com.itextpdf.text.Element) -> a
    void open() -> a
    void close() -> b
    boolean newPage() -> c
    boolean setPageSize(com.itextpdf.text.Rectangle) -> a
    boolean setMargins(float,float,float,float) -> a
    void initPage() -> t
    void newLine() -> u
    void carriageReturn() -> v
    float getVerticalPosition$1385ef() -> q
    void ensureNewLine() -> w
    float flushLines() -> x
    float writeLineToContent(com.itextpdf.text.pdf.PdfLine,com.itextpdf.text.pdf.PdfContentByte,com.itextpdf.text.pdf.PdfContentByte,java.lang.Object[],float) -> a
    float indentLeft() -> y
    float indentRight() -> z
    float indentTop() -> A
    float indentBottom() -> B
    void addSpacing(float,float,com.itextpdf.text.Font) -> a
    com.itextpdf.text.pdf.PdfDocument$PdfInfo getInfo() -> r
    com.itextpdf.text.pdf.PdfDocument$PdfCatalog getCatalog(com.itextpdf.text.pdf.PdfIndirectReference) -> a
    void traverseOutlineCount(com.itextpdf.text.pdf.PdfOutline) -> a
    void outlineTree(com.itextpdf.text.pdf.PdfOutline) -> b
    com.itextpdf.text.pdf.PdfAction getLocalGotoAction(java.lang.String) -> f
    void addAnnotation(com.itextpdf.text.pdf.PdfAnnotation) -> a
    void setNewPageSizeAndMargins() -> C
    com.itextpdf.text.pdf.PageResources getPageResources() -> s
com.itextpdf.text.pdf.PdfDocument$Destination -> com.a.a.d.cd:
    com.itextpdf.text.pdf.PdfAction action -> a
    com.itextpdf.text.pdf.PdfIndirectReference reference -> b
    com.itextpdf.text.pdf.PdfDestination destination -> c
    com.itextpdf.text.pdf.PdfDocument this$0 -> d
com.itextpdf.text.pdf.PdfDocument$Indentation -> com.a.a.d.ce:
    float indentLeft -> a
    float sectionIndentLeft -> b
    float listIndentLeft -> c
    float imageIndentLeft -> d
    float indentRight -> e
    float sectionIndentRight -> f
    float imageIndentRight -> g
    float indentTop -> h
    float indentBottom -> i
com.itextpdf.text.pdf.PdfDocument$PdfCatalog -> com.a.a.d.cf:
    com.itextpdf.text.pdf.PdfWriter writer -> a
    void addNames(java.util.TreeMap,java.util.HashMap,java.util.HashMap,com.itextpdf.text.pdf.PdfWriter) -> a
    void setOpenAction(com.itextpdf.text.pdf.PdfAction) -> a
    void setAdditionalActions(com.itextpdf.text.pdf.PdfDictionary) -> d
com.itextpdf.text.pdf.PdfDocument$PdfInfo -> com.a.a.d.cg:
    void addTitle(java.lang.String) -> a
    void addSubject(java.lang.String) -> b
    void addKeywords(java.lang.String) -> c
    void addAuthor(java.lang.String) -> d
    void addCreator(java.lang.String) -> e
    void addProducer() -> a
    void addCreationDate() -> b
    void addkey(java.lang.String,java.lang.String) -> a
com.itextpdf.text.pdf.PdfEFStream -> com.a.a.d.ch:
    void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream) -> a
com.itextpdf.text.pdf.PdfEncodings -> com.a.a.d.ci:
    char[] winansiByteToChar -> a
    char[] pdfEncodingByteToChar -> b
    com.itextpdf.text.pdf.IntHashtable winansi -> c
    com.itextpdf.text.pdf.IntHashtable pdfEncoding -> d
    java.util.HashMap extraEncodings -> e
    byte[] convertToBytes(java.lang.String,java.lang.String) -> a
    byte[] convertToBytes(char,java.lang.String) -> a
    java.lang.String convertToString(byte[],java.lang.String) -> a
    boolean isPdfDocEncoding(java.lang.String) -> a
    void addExtraEncoding(java.lang.String,com.itextpdf.text.pdf.ExtraEncoding) -> a
com.itextpdf.text.pdf.PdfEncodings$Cp437Conversion -> com.a.a.d.cj:
    com.itextpdf.text.pdf.IntHashtable c2b -> a
    char[] table -> b
    byte[] charToByte$3b9947f4(java.lang.String) -> a
    byte[] charToByte$777d2fab(char) -> a
    java.lang.String byteToChar$2427f066(byte[]) -> a
com.itextpdf.text.pdf.PdfEncodings$SymbolConversion -> com.a.a.d.ck:
    com.itextpdf.text.pdf.IntHashtable t1 -> a
    com.itextpdf.text.pdf.IntHashtable t2 -> b
    com.itextpdf.text.pdf.IntHashtable translation -> c
    char[] table1 -> d
    char[] table2 -> e
    byte[] charToByte$3b9947f4(java.lang.String) -> a
    byte[] charToByte$777d2fab(char) -> a
    java.lang.String byteToChar$2427f066(byte[]) -> a
com.itextpdf.text.pdf.PdfEncodings$SymbolTTConversion -> com.a.a.d.cl:
    byte[] charToByte$777d2fab(char) -> a
    byte[] charToByte$3b9947f4(java.lang.String) -> a
    java.lang.String byteToChar$2427f066(byte[]) -> a
com.itextpdf.text.pdf.PdfEncodings$WingdingsConversion -> com.a.a.d.cm:
    byte[] table -> a
    byte[] charToByte$777d2fab(char) -> a
    byte[] charToByte$3b9947f4(java.lang.String) -> a
    java.lang.String byteToChar$2427f066(byte[]) -> a
com.itextpdf.text.pdf.PdfException -> com.a.a.d.cn:
com.itextpdf.text.pdf.PdfFileSpecification -> com.a.a.d.co:
    com.itextpdf.text.pdf.PdfWriter writer -> a
    com.itextpdf.text.pdf.PdfIndirectReference ref -> b
    com.itextpdf.text.pdf.PdfFileSpecification fileEmbedded$58ce64c6(com.itextpdf.text.pdf.PdfWriter,java.lang.String,java.lang.String) -> a
    com.itextpdf.text.pdf.PdfFileSpecification fileEmbedded$2a73f4c0$25ce684f(com.itextpdf.text.pdf.PdfWriter,java.lang.String,java.lang.String) -> b
    com.itextpdf.text.pdf.PdfFileSpecification fileExtern(com.itextpdf.text.pdf.PdfWriter,java.lang.String) -> a
    com.itextpdf.text.pdf.PdfIndirectReference getReference() -> a
    void setUnicodeFileName$505cbf4b(java.lang.String) -> a
com.itextpdf.text.pdf.PdfFont -> com.a.a.d.cp:
    com.itextpdf.text.pdf.BaseFont font -> b
    float size -> c
    float hScale -> a
    int compareTo(com.itextpdf.text.pdf.PdfFont) -> a
    float size() -> a
    float width() -> b
    float width(int) -> a
    float width(java.lang.String) -> a
    com.itextpdf.text.pdf.BaseFont getFont() -> c
    void setHorizontalScaling(float) -> a
    float getHorizontalScaling() -> d
    int compareTo(java.lang.Object) -> compareTo
com.itextpdf.text.pdf.PdfFormField -> com.a.a.d.cq:
    com.itextpdf.text.pdf.PdfName IF_SCALE_ALWAYS -> E
    com.itextpdf.text.pdf.PdfName IF_SCALE_BIGGER -> F
    com.itextpdf.text.pdf.PdfName IF_SCALE_SMALLER -> G
    com.itextpdf.text.pdf.PdfName IF_SCALE_NEVER -> H
    com.itextpdf.text.pdf.PdfName IF_SCALE_ANAMORPHIC -> I
    com.itextpdf.text.pdf.PdfName IF_SCALE_PROPORTIONAL -> J
    com.itextpdf.text.pdf.PdfName[] mergeTarget -> K
    com.itextpdf.text.pdf.PdfFormField parent -> L
    java.util.ArrayList kids -> M
    com.itextpdf.text.pdf.PdfFormField getParent() -> j
    java.util.ArrayList getKids() -> k
    void setUsed() -> c
    com.itextpdf.text.pdf.PdfAnnotation shallowDuplicate(com.itextpdf.text.pdf.PdfAnnotation) -> a
com.itextpdf.text.pdf.PdfFormXObject -> com.a.a.d.cr:
    com.itextpdf.text.pdf.PdfNumber ZERO -> a
    com.itextpdf.text.pdf.PdfNumber ONE -> b
    com.itextpdf.text.pdf.PdfLiteral MATRIX -> c
com.itextpdf.text.pdf.PdfFunction -> com.a.a.d.cs:
    com.itextpdf.text.pdf.PdfWriter writer -> a
    com.itextpdf.text.pdf.PdfIndirectReference reference -> b
    com.itextpdf.text.pdf.PdfDictionary dictionary -> c
    com.itextpdf.text.pdf.PdfIndirectReference getReference() -> a
    com.itextpdf.text.pdf.PdfFunction type2$15024f34(com.itextpdf.text.pdf.PdfWriter,float[],float[],float[]) -> a
com.itextpdf.text.pdf.PdfGState -> com.a.a.d.ct:
    com.itextpdf.text.pdf.PdfName BM_NORMAL -> a
    com.itextpdf.text.pdf.PdfName BM_COMPATIBLE -> b
    com.itextpdf.text.pdf.PdfName BM_MULTIPLY -> c
    com.itextpdf.text.pdf.PdfName BM_SCREEN -> d
    com.itextpdf.text.pdf.PdfName BM_OVERLAY -> e
    com.itextpdf.text.pdf.PdfName BM_DARKEN -> f
    com.itextpdf.text.pdf.PdfName BM_LIGHTEN -> g
    com.itextpdf.text.pdf.PdfName BM_COLORDODGE -> h
    com.itextpdf.text.pdf.PdfName BM_COLORBURN -> i
    com.itextpdf.text.pdf.PdfName BM_HARDLIGHT -> j
    com.itextpdf.text.pdf.PdfName BM_SOFTLIGHT -> k
    com.itextpdf.text.pdf.PdfName BM_DIFFERENCE -> l
    com.itextpdf.text.pdf.PdfName BM_EXCLUSION -> m
com.itextpdf.text.pdf.PdfImage -> com.a.a.d.cu:
    com.itextpdf.text.pdf.PdfName name -> a
com.itextpdf.text.pdf.PdfImportedPage -> com.a.a.d.cv:
    com.itextpdf.text.pdf.PdfReaderInstance readerInstance -> h
    int pageNumber -> i
    boolean toCopy -> j
    com.itextpdf.text.pdf.PdfContentByte getDuplicate() -> u
    com.itextpdf.text.pdf.PdfStream getFormXObject(int) -> c
    void setColorFill(com.itextpdf.text.pdf.PdfSpotColor,float) -> a
    void setColorStroke(com.itextpdf.text.pdf.PdfSpotColor,float) -> b
    com.itextpdf.text.pdf.PdfObject getResources() -> w
    void setFontAndSize(com.itextpdf.text.pdf.BaseFont,float) -> a
    void throwError() -> z
    boolean isToCopy() -> x
    void setCopied() -> y
com.itextpdf.text.pdf.PdfIndirectObject -> com.a.a.d.cw:
    int number -> a
    int generation -> b
    byte[] STARTOBJ -> c
    byte[] ENDOBJ -> d
    int SIZEOBJ -> e
    com.itextpdf.text.pdf.PdfObject object -> f
    com.itextpdf.text.pdf.PdfWriter writer -> g
    com.itextpdf.text.pdf.PdfIndirectReference getIndirectReference() -> a
    void writeTo(java.io.OutputStream) -> a
com.itextpdf.text.pdf.PdfIndirectReference -> com.a.a.d.cx:
    int number -> b
    int generation -> c
    int getNumber() -> b
    java.lang.String toString() -> toString
com.itextpdf.text.pdf.PdfLayer -> com.a.a.d.cy:
    com.itextpdf.text.pdf.PdfIndirectReference ref -> a
    java.util.ArrayList children -> b
    com.itextpdf.text.pdf.PdfLayer parent -> c
    java.lang.String title -> d
    boolean on -> e
    boolean onPanel -> f
    java.lang.String getTitle() -> a
    com.itextpdf.text.pdf.PdfLayer getParent() -> b
    java.util.ArrayList getChildren() -> c
    com.itextpdf.text.pdf.PdfIndirectReference getRef() -> e
    com.itextpdf.text.pdf.PdfObject getPdfObject() -> f
    boolean isOn() -> g
    boolean isOnPanel() -> h
com.itextpdf.text.pdf.PdfLayerMembership -> com.a.a.d.cz:
    com.itextpdf.text.pdf.PdfName ALLON -> a
    com.itextpdf.text.pdf.PdfName ANYON -> b
    com.itextpdf.text.pdf.PdfName ANYOFF -> c
    com.itextpdf.text.pdf.PdfName ALLOFF -> d
    com.itextpdf.text.pdf.PdfIndirectReference ref -> e
    com.itextpdf.text.pdf.PdfIndirectReference getRef() -> e
    com.itextpdf.text.pdf.PdfObject getPdfObject() -> f
com.itextpdf.text.pdf.PdfLine -> com.a.a.d.da:
    java.util.ArrayList line -> a
    float left -> b
    float width -> c
    int alignment -> d
    float height -> e
    com.itextpdf.text.Chunk listSymbol -> f
    float symbolIndent -> g
    boolean newlineSplit -> h
    float originalWidth -> i
    boolean isRTL -> j
    com.itextpdf.text.pdf.PdfChunk add(com.itextpdf.text.pdf.PdfChunk) -> a
    void addToLine(com.itextpdf.text.pdf.PdfChunk) -> b
    int size() -> a
    java.util.Iterator iterator() -> b
    float height() -> c
    float indentLeft() -> d
    boolean hasToBeJustified() -> e
    void resetAlignment() -> f
    void setExtraIndent(float) -> a
    float widthLeft() -> g
    void setListItem(com.itextpdf.text.ListItem) -> a
    com.itextpdf.text.Chunk listSymbol() -> h
    float listIndent() -> i
    java.lang.String toString() -> toString
    int getLineLengthUtf32() -> j
    boolean isNewlineSplit() -> k
    int getLastStrokeChunk() -> l
    com.itextpdf.text.pdf.PdfChunk getChunk(int) -> a
    float getOriginalWidth() -> m
    float[] getMaxSize() -> n
    boolean isRTL() -> o
    int getSeparatorCount() -> p
    float getAscender() -> q
    float getDescender() -> r
com.itextpdf.text.pdf.PdfLiteral -> com.a.a.d.db:
    long position -> a
    void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream) -> a
com.itextpdf.text.pdf.PdfMediaClipData -> com.a.a.d.dc:
com.itextpdf.text.pdf.PdfName -> com.a.a.d.dd:
    com.itextpdf.text.pdf.PdfName _3D -> a
    com.itextpdf.text.pdf.PdfName A -> b
    com.itextpdf.text.pdf.PdfName A85 -> c
    com.itextpdf.text.pdf.PdfName AA -> d
    com.itextpdf.text.pdf.PdfName ABSOLUTECOLORIMETRIC -> e
    com.itextpdf.text.pdf.PdfName AC -> f
    com.itextpdf.text.pdf.PdfName ACROFORM -> g
    com.itextpdf.text.pdf.PdfName ACTION -> h
    com.itextpdf.text.pdf.PdfName ACTIVATION -> i
    com.itextpdf.text.pdf.PdfName ADBE -> j
    com.itextpdf.text.pdf.PdfName ACTUALTEXT -> k
    com.itextpdf.text.pdf.PdfName ADBE_PKCS7_DETACHED -> l
    com.itextpdf.text.pdf.PdfName ADBE_PKCS7_S4 -> m
    com.itextpdf.text.pdf.PdfName ADBE_PKCS7_S5 -> n
    com.itextpdf.text.pdf.PdfName ADBE_PKCS7_SHA1 -> o
    com.itextpdf.text.pdf.PdfName ADBE_X509_RSA_SHA1 -> p
    com.itextpdf.text.pdf.PdfName ADOBE_PPKLITE -> q
    com.itextpdf.text.pdf.PdfName ADOBE_PPKMS -> r
    com.itextpdf.text.pdf.PdfName AESV2 -> s
    com.itextpdf.text.pdf.PdfName AESV3 -> t
    com.itextpdf.text.pdf.PdfName AHX -> u
    com.itextpdf.text.pdf.PdfName AIS -> v
    com.itextpdf.text.pdf.PdfName ALLPAGES -> w
    com.itextpdf.text.pdf.PdfName ALT -> x
    com.itextpdf.text.pdf.PdfName ALTERNATE -> y
    com.itextpdf.text.pdf.PdfName AND -> z
    com.itextpdf.text.pdf.PdfName ANIMATION -> A
    com.itextpdf.text.pdf.PdfName ANNOT -> B
    com.itextpdf.text.pdf.PdfName ANNOTS -> C
    com.itextpdf.text.pdf.PdfName ANTIALIAS -> D
    com.itextpdf.text.pdf.PdfName AP -> E
    com.itextpdf.text.pdf.PdfName APPDEFAULT -> F
    com.itextpdf.text.pdf.PdfName ART -> G
    com.itextpdf.text.pdf.PdfName ARTBOX -> H
    com.itextpdf.text.pdf.PdfName ASCENT -> I
    com.itextpdf.text.pdf.PdfName AS -> J
    com.itextpdf.text.pdf.PdfName ASCII85DECODE -> K
    com.itextpdf.text.pdf.PdfName ASCIIHEXDECODE -> L
    com.itextpdf.text.pdf.PdfName ASSET -> M
    com.itextpdf.text.pdf.PdfName ASSETS -> N
    com.itextpdf.text.pdf.PdfName AUTHEVENT -> O
    com.itextpdf.text.pdf.PdfName AUTHOR -> P
    com.itextpdf.text.pdf.PdfName B -> Q
    com.itextpdf.text.pdf.PdfName BACKGROUND -> R
    com.itextpdf.text.pdf.PdfName BASEENCODING -> S
    com.itextpdf.text.pdf.PdfName BASEFONT -> T
    com.itextpdf.text.pdf.PdfName BASEVERSION -> U
    com.itextpdf.text.pdf.PdfName BBOX -> V
    com.itextpdf.text.pdf.PdfName BC -> W
    com.itextpdf.text.pdf.PdfName BG -> X
    com.itextpdf.text.pdf.PdfName BIBENTRY -> Y
    com.itextpdf.text.pdf.PdfName BIGFIVE -> Z
    com.itextpdf.text.pdf.PdfName BINDING -> aa
    com.itextpdf.text.pdf.PdfName BINDINGMATERIALNAME -> ab
    com.itextpdf.text.pdf.PdfName BITSPERCOMPONENT -> ac
    com.itextpdf.text.pdf.PdfName BITSPERSAMPLE -> ad
    com.itextpdf.text.pdf.PdfName BL -> ae
    com.itextpdf.text.pdf.PdfName BLACKIS1 -> af
    com.itextpdf.text.pdf.PdfName BLACKPOINT -> ag
    com.itextpdf.text.pdf.PdfName BLOCKQUOTE -> ah
    com.itextpdf.text.pdf.PdfName BLEEDBOX -> ai
    com.itextpdf.text.pdf.PdfName BLINDS -> aj
    com.itextpdf.text.pdf.PdfName BM -> ak
    com.itextpdf.text.pdf.PdfName BORDER -> al
    com.itextpdf.text.pdf.PdfName BOUNDS -> am
    com.itextpdf.text.pdf.PdfName BOX -> an
    com.itextpdf.text.pdf.PdfName BS -> ao
    com.itextpdf.text.pdf.PdfName BTN -> ap
    com.itextpdf.text.pdf.PdfName BYTERANGE -> aq
    com.itextpdf.text.pdf.PdfName C -> ar
    com.itextpdf.text.pdf.PdfName C0 -> as
    com.itextpdf.text.pdf.PdfName C1 -> at
    com.itextpdf.text.pdf.PdfName CA -> au
    com.itextpdf.text.pdf.PdfName ca -> av
    com.itextpdf.text.pdf.PdfName CALGRAY -> aw
    com.itextpdf.text.pdf.PdfName CALRGB -> ax
    com.itextpdf.text.pdf.PdfName CAPHEIGHT -> ay
    com.itextpdf.text.pdf.PdfName CAPTION -> az
    com.itextpdf.text.pdf.PdfName CATALOG -> aA
    com.itextpdf.text.pdf.PdfName CATEGORY -> aB
    com.itextpdf.text.pdf.PdfName CCITTFAXDECODE -> aC
    com.itextpdf.text.pdf.PdfName CENTER -> aD
    com.itextpdf.text.pdf.PdfName CENTERWINDOW -> aE
    com.itextpdf.text.pdf.PdfName CERT -> aF
    com.itextpdf.text.pdf.PdfName CERTS -> aG
    com.itextpdf.text.pdf.PdfName CF -> aH
    com.itextpdf.text.pdf.PdfName CFM -> aI
    com.itextpdf.text.pdf.PdfName CH -> aJ
    com.itextpdf.text.pdf.PdfName CHARPROCS -> aK
    com.itextpdf.text.pdf.PdfName CHECKSUM -> aL
    com.itextpdf.text.pdf.PdfName CI -> aM
    com.itextpdf.text.pdf.PdfName CIDFONTTYPE0 -> aN
    com.itextpdf.text.pdf.PdfName CIDFONTTYPE2 -> aO
    com.itextpdf.text.pdf.PdfName CIDSET -> aP
    com.itextpdf.text.pdf.PdfName CIDSYSTEMINFO -> aQ
    com.itextpdf.text.pdf.PdfName CIDTOGIDMAP -> aR
    com.itextpdf.text.pdf.PdfName CIRCLE -> aS
    com.itextpdf.text.pdf.PdfName CLOUD -> aT
    com.itextpdf.text.pdf.PdfName CMD -> aU
    com.itextpdf.text.pdf.PdfName CO -> aV
    com.itextpdf.text.pdf.PdfName CODE -> aW
    com.itextpdf.text.pdf.PdfName COLORS -> aX
    com.itextpdf.text.pdf.PdfName COLORSPACE -> aY
    com.itextpdf.text.pdf.PdfName COLLECTION -> aZ
    com.itextpdf.text.pdf.PdfName COLLECTIONFIELD -> ba
    com.itextpdf.text.pdf.PdfName COLLECTIONITEM -> bb
    com.itextpdf.text.pdf.PdfName COLLECTIONSCHEMA -> bc
    com.itextpdf.text.pdf.PdfName COLLECTIONSORT -> bd
    com.itextpdf.text.pdf.PdfName COLLECTIONSUBITEM -> be
    com.itextpdf.text.pdf.PdfName COLUMNS -> bf
    com.itextpdf.text.pdf.PdfName CONDITION -> bg
    com.itextpdf.text.pdf.PdfName CONFIGURATION -> bh
    com.itextpdf.text.pdf.PdfName CONFIGURATIONS -> bi
    com.itextpdf.text.pdf.PdfName CONTACTINFO -> bj
    com.itextpdf.text.pdf.PdfName CONTENT -> bk
    com.itextpdf.text.pdf.PdfName CONTENTS -> bl
    com.itextpdf.text.pdf.PdfName COORDS -> bm
    com.itextpdf.text.pdf.PdfName COUNT -> bn
    com.itextpdf.text.pdf.PdfName COURIER -> bo
    com.itextpdf.text.pdf.PdfName COURIER_BOLD -> bp
    com.itextpdf.text.pdf.PdfName COURIER_OBLIQUE -> bq
    com.itextpdf.text.pdf.PdfName COURIER_BOLDOBLIQUE -> br
    com.itextpdf.text.pdf.PdfName CREATIONDATE -> bs
    com.itextpdf.text.pdf.PdfName CREATOR -> bt
    com.itextpdf.text.pdf.PdfName CREATORINFO -> bu
    com.itextpdf.text.pdf.PdfName CRL -> bv
    com.itextpdf.text.pdf.PdfName CRLS -> bw
    com.itextpdf.text.pdf.PdfName CROPBOX -> bx
    com.itextpdf.text.pdf.PdfName CRYPT -> by
    com.itextpdf.text.pdf.PdfName CS -> bz
    com.itextpdf.text.pdf.PdfName CUEPOINT -> bA
    com.itextpdf.text.pdf.PdfName CUEPOINTS -> bB
    com.itextpdf.text.pdf.PdfName CYX -> bC
    com.itextpdf.text.pdf.PdfName D -> bD
    com.itextpdf.text.pdf.PdfName DA -> bE
    com.itextpdf.text.pdf.PdfName DATA -> bF
    com.itextpdf.text.pdf.PdfName DC -> bG
    com.itextpdf.text.pdf.PdfName DCS -> bH
    com.itextpdf.text.pdf.PdfName DCTDECODE -> bI
    com.itextpdf.text.pdf.PdfName DEACTIVATION -> bJ
    com.itextpdf.text.pdf.PdfName DECODE -> bK
    com.itextpdf.text.pdf.PdfName DECODEPARMS -> bL
    com.itextpdf.text.pdf.PdfName DEFAULT -> bM
    com.itextpdf.text.pdf.PdfName DEFAULTCRYPTFILTER -> bN
    com.itextpdf.text.pdf.PdfName DEFAULTCMYK -> bO
    com.itextpdf.text.pdf.PdfName DEFAULTGRAY -> bP
    com.itextpdf.text.pdf.PdfName DEFAULTRGB -> bQ
    com.itextpdf.text.pdf.PdfName DESC -> bR
    com.itextpdf.text.pdf.PdfName DESCENDANTFONTS -> bS
    com.itextpdf.text.pdf.PdfName DESCENT -> bT
    com.itextpdf.text.pdf.PdfName DEST -> bU
    com.itextpdf.text.pdf.PdfName DESTOUTPUTPROFILE -> bV
    com.itextpdf.text.pdf.PdfName DESTS -> bW
    com.itextpdf.text.pdf.PdfName DEVICEGRAY -> bX
    com.itextpdf.text.pdf.PdfName DEVICERGB -> bY
    com.itextpdf.text.pdf.PdfName DEVICECMYK -> bZ
    com.itextpdf.text.pdf.PdfName DI -> ca
    com.itextpdf.text.pdf.PdfName DIFFERENCES -> cb
    com.itextpdf.text.pdf.PdfName DISSOLVE -> cc
    com.itextpdf.text.pdf.PdfName DIRECTION -> cd
    com.itextpdf.text.pdf.PdfName DISPLAYDOCTITLE -> ce
    com.itextpdf.text.pdf.PdfName DIV -> cf
    com.itextpdf.text.pdf.PdfName DL -> cg
    com.itextpdf.text.pdf.PdfName DM -> ch
    com.itextpdf.text.pdf.PdfName DOCMDP -> ci
    com.itextpdf.text.pdf.PdfName DOCOPEN -> cj
    com.itextpdf.text.pdf.PdfName DOCTIMESTAMP -> ck
    com.itextpdf.text.pdf.PdfName DOCUMENT -> cl
    com.itextpdf.text.pdf.PdfName DOMAIN -> cm
    com.itextpdf.text.pdf.PdfName DP -> cn
    com.itextpdf.text.pdf.PdfName DR -> co
    com.itextpdf.text.pdf.PdfName DS -> cp
    com.itextpdf.text.pdf.PdfName DSS -> cq
    com.itextpdf.text.pdf.PdfName DUR -> cr
    com.itextpdf.text.pdf.PdfName DUPLEX -> cs
    com.itextpdf.text.pdf.PdfName DUPLEXFLIPSHORTEDGE -> ct
    com.itextpdf.text.pdf.PdfName DUPLEXFLIPLONGEDGE -> cu
    com.itextpdf.text.pdf.PdfName DV -> cv
    com.itextpdf.text.pdf.PdfName DW -> cw
    com.itextpdf.text.pdf.PdfName E -> cx
    com.itextpdf.text.pdf.PdfName EARLYCHANGE -> cy
    com.itextpdf.text.pdf.PdfName EF -> cz
    com.itextpdf.text.pdf.PdfName EFF -> cA
    com.itextpdf.text.pdf.PdfName EFOPEN -> cB
    com.itextpdf.text.pdf.PdfName EMBEDDED -> cC
    com.itextpdf.text.pdf.PdfName EMBEDDEDFILE -> cD
    com.itextpdf.text.pdf.PdfName EMBEDDEDFILES -> cE
    com.itextpdf.text.pdf.PdfName ENCODE -> cF
    com.itextpdf.text.pdf.PdfName ENCODEDBYTEALIGN -> cG
    com.itextpdf.text.pdf.PdfName ENCODING -> cH
    com.itextpdf.text.pdf.PdfName ENCRYPT -> cI
    com.itextpdf.text.pdf.PdfName ENCRYPTMETADATA -> cJ
    com.itextpdf.text.pdf.PdfName ENDOFBLOCK -> cK
    com.itextpdf.text.pdf.PdfName ENDOFLINE -> cL
    com.itextpdf.text.pdf.PdfName EPSG -> cM
    com.itextpdf.text.pdf.PdfName ETSI_RFC3161 -> cN
    com.itextpdf.text.pdf.PdfName EXTEND -> cO
    com.itextpdf.text.pdf.PdfName EXTENSIONS -> cP
    com.itextpdf.text.pdf.PdfName EXTENSIONLEVEL -> cQ
    com.itextpdf.text.pdf.PdfName EXTGSTATE -> cR
    com.itextpdf.text.pdf.PdfName EXPORT -> cS
    com.itextpdf.text.pdf.PdfName EXPORTSTATE -> cT
    com.itextpdf.text.pdf.PdfName EVENT -> cU
    com.itextpdf.text.pdf.PdfName F -> cV
    com.itextpdf.text.pdf.PdfName FAR -> cW
    com.itextpdf.text.pdf.PdfName FB -> cX
    com.itextpdf.text.pdf.PdfName FD -> cY
    com.itextpdf.text.pdf.PdfName FDECODEPARMS -> cZ
    com.itextpdf.text.pdf.PdfName FDF -> da
    com.itextpdf.text.pdf.PdfName FF -> db
    com.itextpdf.text.pdf.PdfName FFILTER -> dc
    com.itextpdf.text.pdf.PdfName FG -> dd
    com.itextpdf.text.pdf.PdfName FIELDS -> de
    com.itextpdf.text.pdf.PdfName FIGURE -> df
    com.itextpdf.text.pdf.PdfName FILEATTACHMENT -> dg
    com.itextpdf.text.pdf.PdfName FILESPEC -> dh
    com.itextpdf.text.pdf.PdfName FILTER -> di
    com.itextpdf.text.pdf.PdfName FIRST -> dj
    com.itextpdf.text.pdf.PdfName FIRSTCHAR -> dk
    com.itextpdf.text.pdf.PdfName FIRSTPAGE -> dl
    com.itextpdf.text.pdf.PdfName FIT -> dm
    com.itextpdf.text.pdf.PdfName FITH -> dn
    com.itextpdf.text.pdf.PdfName FITV -> do
    com.itextpdf.text.pdf.PdfName FITR -> dp
    com.itextpdf.text.pdf.PdfName FITB -> dq
    com.itextpdf.text.pdf.PdfName FITBH -> dr
    com.itextpdf.text.pdf.PdfName FITBV -> ds
    com.itextpdf.text.pdf.PdfName FITWINDOW -> dt
    com.itextpdf.text.pdf.PdfName FL -> du
    com.itextpdf.text.pdf.PdfName FLAGS -> dv
    com.itextpdf.text.pdf.PdfName FLASH -> dw
    com.itextpdf.text.pdf.PdfName FLASHVARS -> dx
    com.itextpdf.text.pdf.PdfName FLATEDECODE -> dy
    com.itextpdf.text.pdf.PdfName FO -> dz
    com.itextpdf.text.pdf.PdfName FONT -> dA
    com.itextpdf.text.pdf.PdfName FONTBBOX -> dB
    com.itextpdf.text.pdf.PdfName FONTDESCRIPTOR -> dC
    com.itextpdf.text.pdf.PdfName FONTFAMILY -> dD
    com.itextpdf.text.pdf.PdfName FONTFILE -> dE
    com.itextpdf.text.pdf.PdfName FONTFILE2 -> dF
    com.itextpdf.text.pdf.PdfName FONTFILE3 -> dG
    com.itextpdf.text.pdf.PdfName FONTMATRIX -> dH
    com.itextpdf.text.pdf.PdfName FONTNAME -> dI
    com.itextpdf.text.pdf.PdfName FONTWEIGHT -> dJ
    com.itextpdf.text.pdf.PdfName FOREGROUND -> dK
    com.itextpdf.text.pdf.PdfName FORM -> dL
    com.itextpdf.text.pdf.PdfName FORMTYPE -> dM
    com.itextpdf.text.pdf.PdfName FORMULA -> dN
    com.itextpdf.text.pdf.PdfName FREETEXT -> dO
    com.itextpdf.text.pdf.PdfName FRM -> dP
    com.itextpdf.text.pdf.PdfName FS -> dQ
    com.itextpdf.text.pdf.PdfName FT -> dR
    com.itextpdf.text.pdf.PdfName FULLSCREEN -> dS
    com.itextpdf.text.pdf.PdfName FUNCTION -> dT
    com.itextpdf.text.pdf.PdfName FUNCTIONS -> dU
    com.itextpdf.text.pdf.PdfName FUNCTIONTYPE -> dV
    com.itextpdf.text.pdf.PdfName GAMMA -> dW
    com.itextpdf.text.pdf.PdfName GBK -> dX
    com.itextpdf.text.pdf.PdfName GCS -> dY
    com.itextpdf.text.pdf.PdfName GEO -> dZ
    com.itextpdf.text.pdf.PdfName GEOGCS -> ea
    com.itextpdf.text.pdf.PdfName GLITTER -> eb
    com.itextpdf.text.pdf.PdfName GOTO -> ec
    com.itextpdf.text.pdf.PdfName GOTOE -> ed
    com.itextpdf.text.pdf.PdfName GOTOR -> ee
    com.itextpdf.text.pdf.PdfName GPTS -> ef
    com.itextpdf.text.pdf.PdfName GROUP -> eg
    com.itextpdf.text.pdf.PdfName GTS_PDFA1 -> eh
    com.itextpdf.text.pdf.PdfName GTS_PDFX -> ei
    com.itextpdf.text.pdf.PdfName GTS_PDFXVERSION -> ej
    com.itextpdf.text.pdf.PdfName H -> ek
    com.itextpdf.text.pdf.PdfName H1 -> el
    com.itextpdf.text.pdf.PdfName H2 -> em
    com.itextpdf.text.pdf.PdfName H3 -> en
    com.itextpdf.text.pdf.PdfName H4 -> eo
    com.itextpdf.text.pdf.PdfName H5 -> ep
    com.itextpdf.text.pdf.PdfName H6 -> eq
    com.itextpdf.text.pdf.PdfName HALIGN -> er
    com.itextpdf.text.pdf.PdfName HEIGHT -> es
    com.itextpdf.text.pdf.PdfName HELV -> et
    com.itextpdf.text.pdf.PdfName HELVETICA -> eu
    com.itextpdf.text.pdf.PdfName HELVETICA_BOLD -> ev
    com.itextpdf.text.pdf.PdfName HELVETICA_OBLIQUE -> ew
    com.itextpdf.text.pdf.PdfName HELVETICA_BOLDOBLIQUE -> ex
    com.itextpdf.text.pdf.PdfName HF -> ey
    com.itextpdf.text.pdf.PdfName HID -> ez
    com.itextpdf.text.pdf.PdfName HIDE -> eA
    com.itextpdf.text.pdf.PdfName HIDEMENUBAR -> eB
    com.itextpdf.text.pdf.PdfName HIDETOOLBAR -> eC
    com.itextpdf.text.pdf.PdfName HIDEWINDOWUI -> eD
    com.itextpdf.text.pdf.PdfName HIGHLIGHT -> eE
    com.itextpdf.text.pdf.PdfName HOFFSET -> eF
    com.itextpdf.text.pdf.PdfName I -> eG
    com.itextpdf.text.pdf.PdfName ICCBASED -> eH
    com.itextpdf.text.pdf.PdfName ID -> eI
    com.itextpdf.text.pdf.PdfName IDENTITY -> eJ
    com.itextpdf.text.pdf.PdfName IF -> eK
    com.itextpdf.text.pdf.PdfName IMAGE -> eL
    com.itextpdf.text.pdf.PdfName IMAGEB -> eM
    com.itextpdf.text.pdf.PdfName IMAGEC -> eN
    com.itextpdf.text.pdf.PdfName IMAGEI -> eO
    com.itextpdf.text.pdf.PdfName IMAGEMASK -> eP
    com.itextpdf.text.pdf.PdfName IND -> eQ
    com.itextpdf.text.pdf.PdfName INDEX -> eR
    com.itextpdf.text.pdf.PdfName INDEXED -> eS
    com.itextpdf.text.pdf.PdfName INFO -> eT
    com.itextpdf.text.pdf.PdfName INK -> eU
    com.itextpdf.text.pdf.PdfName INKLIST -> eV
    com.itextpdf.text.pdf.PdfName INSTANCES -> eW
    com.itextpdf.text.pdf.PdfName IMPORTDATA -> eX
    com.itextpdf.text.pdf.PdfName INTENT -> eY
    com.itextpdf.text.pdf.PdfName INTERPOLATE -> eZ
    com.itextpdf.text.pdf.PdfName ISMAP -> fa
    com.itextpdf.text.pdf.PdfName IRT -> fb
    com.itextpdf.text.pdf.PdfName ITALICANGLE -> fc
    com.itextpdf.text.pdf.PdfName ITXT -> fd
    com.itextpdf.text.pdf.PdfName IX -> fe
    com.itextpdf.text.pdf.PdfName JAVASCRIPT -> ff
    com.itextpdf.text.pdf.PdfName JBIG2DECODE -> fg
    com.itextpdf.text.pdf.PdfName JBIG2GLOBALS -> fh
    com.itextpdf.text.pdf.PdfName JPXDECODE -> fi
    com.itextpdf.text.pdf.PdfName JS -> fj
    com.itextpdf.text.pdf.PdfName K -> fk
    com.itextpdf.text.pdf.PdfName KEYWORDS -> fl
    com.itextpdf.text.pdf.PdfName KIDS -> fm
    com.itextpdf.text.pdf.PdfName L -> fn
    com.itextpdf.text.pdf.PdfName L2R -> fo
    com.itextpdf.text.pdf.PdfName LANG -> fp
    com.itextpdf.text.pdf.PdfName LANGUAGE -> fq
    com.itextpdf.text.pdf.PdfName LAST -> fr
    com.itextpdf.text.pdf.PdfName LASTCHAR -> fs
    com.itextpdf.text.pdf.PdfName LASTPAGE -> ft
    com.itextpdf.text.pdf.PdfName LAUNCH -> fu
    com.itextpdf.text.pdf.PdfName LBL -> fv
    com.itextpdf.text.pdf.PdfName LBODY -> fw
    com.itextpdf.text.pdf.PdfName LENGTH -> fx
    com.itextpdf.text.pdf.PdfName LENGTH1 -> fy
    com.itextpdf.text.pdf.PdfName LI -> fz
    com.itextpdf.text.pdf.PdfName LIMITS -> fA
    com.itextpdf.text.pdf.PdfName LINE -> fB
    com.itextpdf.text.pdf.PdfName LINEAR -> fC
    com.itextpdf.text.pdf.PdfName LINK -> fD
    com.itextpdf.text.pdf.PdfName LISTMODE -> fE
    com.itextpdf.text.pdf.PdfName LOCATION -> fF
    com.itextpdf.text.pdf.PdfName LOCK -> fG
    com.itextpdf.text.pdf.PdfName LOCKED -> fH
    com.itextpdf.text.pdf.PdfName LPTS -> fI
    com.itextpdf.text.pdf.PdfName LZWDECODE -> fJ
    com.itextpdf.text.pdf.PdfName M -> fK
    com.itextpdf.text.pdf.PdfName MATERIAL -> fL
    com.itextpdf.text.pdf.PdfName MATRIX -> fM
    com.itextpdf.text.pdf.PdfName MAC_EXPERT_ENCODING -> fN
    com.itextpdf.text.pdf.PdfName MAC_ROMAN_ENCODING -> fO
    com.itextpdf.text.pdf.PdfName MARKED -> fP
    com.itextpdf.text.pdf.PdfName MARKINFO -> fQ
    com.itextpdf.text.pdf.PdfName MASK -> fR
    com.itextpdf.text.pdf.PdfName MAX_LOWER_CASE -> fS
    com.itextpdf.text.pdf.PdfName MAX_CAMEL_CASE -> fT
    com.itextpdf.text.pdf.PdfName MAXLEN -> fU
    com.itextpdf.text.pdf.PdfName MEDIABOX -> fV
    com.itextpdf.text.pdf.PdfName MCID -> fW
    com.itextpdf.text.pdf.PdfName MCR -> fX
    com.itextpdf.text.pdf.PdfName MEASURE -> fY
    com.itextpdf.text.pdf.PdfName METADATA -> fZ
    com.itextpdf.text.pdf.PdfName MIN_LOWER_CASE -> ga
    com.itextpdf.text.pdf.PdfName MIN_CAMEL_CASE -> gb
    com.itextpdf.text.pdf.PdfName MK -> gc
    com.itextpdf.text.pdf.PdfName MMTYPE1 -> gd
    com.itextpdf.text.pdf.PdfName MODDATE -> ge
    com.itextpdf.text.pdf.PdfName N -> gf
    com.itextpdf.text.pdf.PdfName N0 -> gg
    com.itextpdf.text.pdf.PdfName N1 -> gh
    com.itextpdf.text.pdf.PdfName N2 -> gi
    com.itextpdf.text.pdf.PdfName N3 -> gj
    com.itextpdf.text.pdf.PdfName N4 -> gk
    com.itextpdf.text.pdf.PdfName NAME -> gl
    com.itextpdf.text.pdf.PdfName NAMED -> gm
    com.itextpdf.text.pdf.PdfName NAMES -> gn
    com.itextpdf.text.pdf.PdfName NAVIGATION -> go
    com.itextpdf.text.pdf.PdfName NAVIGATIONPANE -> gp
    com.itextpdf.text.pdf.PdfName NEAR -> gq
    com.itextpdf.text.pdf.PdfName NEEDAPPEARANCES -> gr
    com.itextpdf.text.pdf.PdfName NEWWINDOW -> gs
    com.itextpdf.text.pdf.PdfName NEXT -> gt
    com.itextpdf.text.pdf.PdfName NEXTPAGE -> gu
    com.itextpdf.text.pdf.PdfName NM -> gv
    com.itextpdf.text.pdf.PdfName NONE -> gw
    com.itextpdf.text.pdf.PdfName NONFULLSCREENPAGEMODE -> gx
    com.itextpdf.text.pdf.PdfName NONSTRUCT -> gy
    com.itextpdf.text.pdf.PdfName NOT -> gz
    com.itextpdf.text.pdf.PdfName NOTE -> gA
    com.itextpdf.text.pdf.PdfName NUMBERFORMAT -> gB
    com.itextpdf.text.pdf.PdfName NUMCOPIES -> gC
    com.itextpdf.text.pdf.PdfName NUMS -> gD
    com.itextpdf.text.pdf.PdfName O -> gE
    com.itextpdf.text.pdf.PdfName OBJ -> gF
    com.itextpdf.text.pdf.PdfName OBJR -> gG
    com.itextpdf.text.pdf.PdfName OBJSTM -> gH
    com.itextpdf.text.pdf.PdfName OC -> gI
    com.itextpdf.text.pdf.PdfName OCG -> gJ
    com.itextpdf.text.pdf.PdfName OCGS -> gK
    com.itextpdf.text.pdf.PdfName OCMD -> gL
    com.itextpdf.text.pdf.PdfName OCPROPERTIES -> gM
    com.itextpdf.text.pdf.PdfName OCSP -> gN
    com.itextpdf.text.pdf.PdfName OCSPS -> gO
    com.itextpdf.text.pdf.PdfName OE -> gP
    com.itextpdf.text.pdf.PdfName Off -> gQ
    com.itextpdf.text.pdf.PdfName OFF -> gR
    com.itextpdf.text.pdf.PdfName ON -> gS
    com.itextpdf.text.pdf.PdfName ONECOLUMN -> gT
    com.itextpdf.text.pdf.PdfName OPEN -> gU
    com.itextpdf.text.pdf.PdfName OPENACTION -> gV
    com.itextpdf.text.pdf.PdfName OP -> gW
    com.itextpdf.text.pdf.PdfName op -> gX
    com.itextpdf.text.pdf.PdfName OPM -> gY
    com.itextpdf.text.pdf.PdfName OPT -> gZ
    com.itextpdf.text.pdf.PdfName OR -> ha
    com.itextpdf.text.pdf.PdfName ORDER -> hb
    com.itextpdf.text.pdf.PdfName ORDERING -> hc
    com.itextpdf.text.pdf.PdfName ORG -> hd
    com.itextpdf.text.pdf.PdfName OSCILLATING -> he
    com.itextpdf.text.pdf.PdfName OUTLINES -> hf
    com.itextpdf.text.pdf.PdfName OUTPUTCONDITION -> hg
    com.itextpdf.text.pdf.PdfName OUTPUTCONDITIONIDENTIFIER -> hh
    com.itextpdf.text.pdf.PdfName OUTPUTINTENT -> hi
    com.itextpdf.text.pdf.PdfName OUTPUTINTENTS -> hj
    com.itextpdf.text.pdf.PdfName P -> hk
    com.itextpdf.text.pdf.PdfName PAGE -> hl
    com.itextpdf.text.pdf.PdfName PAGEELEMENT -> hm
    com.itextpdf.text.pdf.PdfName PAGELABELS -> hn
    com.itextpdf.text.pdf.PdfName PAGELAYOUT -> ho
    com.itextpdf.text.pdf.PdfName PAGEMODE -> hp
    com.itextpdf.text.pdf.PdfName PAGES -> hq
    com.itextpdf.text.pdf.PdfName PAINTTYPE -> hr
    com.itextpdf.text.pdf.PdfName PANOSE -> hs
    com.itextpdf.text.pdf.PdfName PARAMS -> ht
    com.itextpdf.text.pdf.PdfName PARENT -> hu
    com.itextpdf.text.pdf.PdfName PARENTTREE -> hv
    com.itextpdf.text.pdf.PdfName PARENTTREENEXTKEY -> hw
    com.itextpdf.text.pdf.PdfName PART -> hx
    com.itextpdf.text.pdf.PdfName PASSCONTEXTCLICK -> hy
    com.itextpdf.text.pdf.PdfName PATTERN -> hz
    com.itextpdf.text.pdf.PdfName PATTERNTYPE -> hA
    com.itextpdf.text.pdf.PdfName PC -> hB
    com.itextpdf.text.pdf.PdfName PDF -> hC
    com.itextpdf.text.pdf.PdfName PDFDOCENCODING -> hD
    com.itextpdf.text.pdf.PdfName PDU -> hE
    com.itextpdf.text.pdf.PdfName PERCEPTUAL -> hF
    com.itextpdf.text.pdf.PdfName PERMS -> hG
    com.itextpdf.text.pdf.PdfName PG -> hH
    com.itextpdf.text.pdf.PdfName PI -> hI
    com.itextpdf.text.pdf.PdfName PICKTRAYBYPDFSIZE -> hJ
    com.itextpdf.text.pdf.PdfName PLAYCOUNT -> hK
    com.itextpdf.text.pdf.PdfName PO -> hL
    com.itextpdf.text.pdf.PdfName POLYGON -> hM
    com.itextpdf.text.pdf.PdfName POLYLINE -> hN
    com.itextpdf.text.pdf.PdfName POPUP -> hO
    com.itextpdf.text.pdf.PdfName POSITION -> hP
    com.itextpdf.text.pdf.PdfName PREDICTOR -> hQ
    com.itextpdf.text.pdf.PdfName PREFERRED -> hR
    com.itextpdf.text.pdf.PdfName PRESENTATION -> hS
    com.itextpdf.text.pdf.PdfName PRESERVERB -> hT
    com.itextpdf.text.pdf.PdfName PREV -> hU
    com.itextpdf.text.pdf.PdfName PREVPAGE -> hV
    com.itextpdf.text.pdf.PdfName PRINT -> hW
    com.itextpdf.text.pdf.PdfName PRINTAREA -> hX
    com.itextpdf.text.pdf.PdfName PRINTCLIP -> hY
    com.itextpdf.text.pdf.PdfName PRINTPAGERANGE -> hZ
    com.itextpdf.text.pdf.PdfName PRINTSCALING -> ia
    com.itextpdf.text.pdf.PdfName PRINTSTATE -> ib
    com.itextpdf.text.pdf.PdfName PRIVATE -> ic
    com.itextpdf.text.pdf.PdfName PROCSET -> id
    com.itextpdf.text.pdf.PdfName PRODUCER -> ie
    com.itextpdf.text.pdf.PdfName PROJCS -> if
    com.itextpdf.text.pdf.PdfName PROPERTIES -> ig
    com.itextpdf.text.pdf.PdfName PS -> ih
    com.itextpdf.text.pdf.PdfName PTDATA -> ii
    com.itextpdf.text.pdf.PdfName PUBSEC -> ij
    com.itextpdf.text.pdf.PdfName PV -> ik
    com.itextpdf.text.pdf.PdfName Q -> il
    com.itextpdf.text.pdf.PdfName QUADPOINTS -> im
    com.itextpdf.text.pdf.PdfName QUOTE -> in
    com.itextpdf.text.pdf.PdfName R -> io
    com.itextpdf.text.pdf.PdfName R2L -> ip
    com.itextpdf.text.pdf.PdfName RANGE -> iq
    com.itextpdf.text.pdf.PdfName RBGROUPS -> ir
    com.itextpdf.text.pdf.PdfName RC -> is
    com.itextpdf.text.pdf.PdfName RD -> it
    com.itextpdf.text.pdf.PdfName REASON -> iu
    com.itextpdf.text.pdf.PdfName RECIPIENTS -> iv
    com.itextpdf.text.pdf.PdfName RECT -> iw
    com.itextpdf.text.pdf.PdfName REFERENCE -> ix
    com.itextpdf.text.pdf.PdfName REGISTRY -> iy
    com.itextpdf.text.pdf.PdfName REGISTRYNAME -> iz
    com.itextpdf.text.pdf.PdfName RELATIVECOLORIMETRIC -> iA
    com.itextpdf.text.pdf.PdfName RENDITION -> iB
    com.itextpdf.text.pdf.PdfName RESETFORM -> iC
    com.itextpdf.text.pdf.PdfName RESOURCES -> iD
    com.itextpdf.text.pdf.PdfName RI -> iE
    com.itextpdf.text.pdf.PdfName RICHMEDIA -> iF
    com.itextpdf.text.pdf.PdfName RICHMEDIAACTIVATION -> iG
    com.itextpdf.text.pdf.PdfName RICHMEDIAANIMATION -> iH
    com.itextpdf.text.pdf.PdfName RICHMEDIACOMMAND -> iI
    com.itextpdf.text.pdf.PdfName RICHMEDIACONFIGURATION -> iJ
    com.itextpdf.text.pdf.PdfName RICHMEDIACONTENT -> iK
    com.itextpdf.text.pdf.PdfName RICHMEDIADEACTIVATION -> iL
    com.itextpdf.text.pdf.PdfName RICHMEDIAEXECUTE -> iM
    com.itextpdf.text.pdf.PdfName RICHMEDIAINSTANCE -> iN
    com.itextpdf.text.pdf.PdfName RICHMEDIAPARAMS -> iO
    com.itextpdf.text.pdf.PdfName RICHMEDIAPOSITION -> iP
    com.itextpdf.text.pdf.PdfName RICHMEDIAPRESENTATION -> iQ
    com.itextpdf.text.pdf.PdfName RICHMEDIASETTINGS -> iR
    com.itextpdf.text.pdf.PdfName RICHMEDIAWINDOW -> iS
    com.itextpdf.text.pdf.PdfName RL -> iT
    com.itextpdf.text.pdf.PdfName ROLEMAP -> iU
    com.itextpdf.text.pdf.PdfName ROOT -> iV
    com.itextpdf.text.pdf.PdfName ROTATE -> iW
    com.itextpdf.text.pdf.PdfName ROWS -> iX
    com.itextpdf.text.pdf.PdfName RT -> iY
    com.itextpdf.text.pdf.PdfName RUBY -> iZ
    com.itextpdf.text.pdf.PdfName RUNLENGTHDECODE -> ja
    com.itextpdf.text.pdf.PdfName RV -> jb
    com.itextpdf.text.pdf.PdfName S -> jc
    com.itextpdf.text.pdf.PdfName SATURATION -> jd
    com.itextpdf.text.pdf.PdfName SCHEMA -> je
    com.itextpdf.text.pdf.PdfName SCREEN -> jf
    com.itextpdf.text.pdf.PdfName SCRIPTS -> jg
    com.itextpdf.text.pdf.PdfName SECT -> jh
    com.itextpdf.text.pdf.PdfName SEPARATION -> ji
    com.itextpdf.text.pdf.PdfName SETOCGSTATE -> jj
    com.itextpdf.text.pdf.PdfName SETTINGS -> jk
    com.itextpdf.text.pdf.PdfName SHADING -> jl
    com.itextpdf.text.pdf.PdfName SHADINGTYPE -> jm
    com.itextpdf.text.pdf.PdfName SHIFT_JIS -> jn
    com.itextpdf.text.pdf.PdfName SIG -> jo
    com.itextpdf.text.pdf.PdfName SIGFLAGS -> jp
    com.itextpdf.text.pdf.PdfName SIGREF -> jq
    com.itextpdf.text.pdf.PdfName SIMPLEX -> jr
    com.itextpdf.text.pdf.PdfName SINGLEPAGE -> js
    com.itextpdf.text.pdf.PdfName SIZE -> jt
    com.itextpdf.text.pdf.PdfName SMASK -> ju
    com.itextpdf.text.pdf.PdfName SORT -> jv
    com.itextpdf.text.pdf.PdfName SOUND -> jw
    com.itextpdf.text.pdf.PdfName SPAN -> jx
    com.itextpdf.text.pdf.PdfName SPEED -> jy
    com.itextpdf.text.pdf.PdfName SPLIT -> jz
    com.itextpdf.text.pdf.PdfName SQUARE -> jA
    com.itextpdf.text.pdf.PdfName SQUIGGLY -> jB
    com.itextpdf.text.pdf.PdfName SS -> jC
    com.itextpdf.text.pdf.PdfName ST -> jD
    com.itextpdf.text.pdf.PdfName STAMP -> jE
    com.itextpdf.text.pdf.PdfName STANDARD -> jF
    com.itextpdf.text.pdf.PdfName STATE -> jG
    com.itextpdf.text.pdf.PdfName STDCF -> jH
    com.itextpdf.text.pdf.PdfName STEMV -> jI
    com.itextpdf.text.pdf.PdfName STMF -> jJ
    com.itextpdf.text.pdf.PdfName STRF -> jK
    com.itextpdf.text.pdf.PdfName STRIKEOUT -> jL
    com.itextpdf.text.pdf.PdfName STRUCTELEM -> jM
    com.itextpdf.text.pdf.PdfName STRUCTPARENT -> jN
    com.itextpdf.text.pdf.PdfName STRUCTPARENTS -> jO
    com.itextpdf.text.pdf.PdfName STRUCTTREEROOT -> jP
    com.itextpdf.text.pdf.PdfName STYLE -> jQ
    com.itextpdf.text.pdf.PdfName SUBFILTER -> jR
    com.itextpdf.text.pdf.PdfName SUBJECT -> jS
    com.itextpdf.text.pdf.PdfName SUBMITFORM -> jT
    com.itextpdf.text.pdf.PdfName SUBTYPE -> jU
    com.itextpdf.text.pdf.PdfName SUPPLEMENT -> jV
    com.itextpdf.text.pdf.PdfName SV -> jW
    com.itextpdf.text.pdf.PdfName SW -> jX
    com.itextpdf.text.pdf.PdfName SYMBOL -> jY
    com.itextpdf.text.pdf.PdfName T -> jZ
    com.itextpdf.text.pdf.PdfName TA -> ka
    com.itextpdf.text.pdf.PdfName TABLE -> kb
    com.itextpdf.text.pdf.PdfName TABS -> kc
    com.itextpdf.text.pdf.PdfName TBODY -> kd
    com.itextpdf.text.pdf.PdfName TD -> ke
    com.itextpdf.text.pdf.PdfName TEXT -> kf
    com.itextpdf.text.pdf.PdfName TFOOT -> kg
    com.itextpdf.text.pdf.PdfName TH -> kh
    com.itextpdf.text.pdf.PdfName THEAD -> ki
    com.itextpdf.text.pdf.PdfName THUMB -> kj
    com.itextpdf.text.pdf.PdfName THREADS -> kk
    com.itextpdf.text.pdf.PdfName TI -> kl
    com.itextpdf.text.pdf.PdfName TIME -> km
    com.itextpdf.text.pdf.PdfName TILINGTYPE -> kn
    com.itextpdf.text.pdf.PdfName TIMES_ROMAN -> ko
    com.itextpdf.text.pdf.PdfName TIMES_BOLD -> kp
    com.itextpdf.text.pdf.PdfName TIMES_ITALIC -> kq
    com.itextpdf.text.pdf.PdfName TIMES_BOLDITALIC -> kr
    com.itextpdf.text.pdf.PdfName TITLE -> ks
    com.itextpdf.text.pdf.PdfName TK -> kt
    com.itextpdf.text.pdf.PdfName TM -> ku
    com.itextpdf.text.pdf.PdfName TOC -> kv
    com.itextpdf.text.pdf.PdfName TOCI -> kw
    com.itextpdf.text.pdf.PdfName TOGGLE -> kx
    com.itextpdf.text.pdf.PdfName TOOLBAR -> ky
    com.itextpdf.text.pdf.PdfName TOUNICODE -> kz
    com.itextpdf.text.pdf.PdfName TP -> kA
    com.itextpdf.text.pdf.PdfName TABLEROW -> kB
    com.itextpdf.text.pdf.PdfName TRANS -> kC
    com.itextpdf.text.pdf.PdfName TRANSFORMPARAMS -> kD
    com.itextpdf.text.pdf.PdfName TRANSFORMMETHOD -> kE
    com.itextpdf.text.pdf.PdfName TRANSPARENCY -> kF
    com.itextpdf.text.pdf.PdfName TRANSPARENT -> kG
    com.itextpdf.text.pdf.PdfName TRAPPED -> kH
    com.itextpdf.text.pdf.PdfName TRIMBOX -> kI
    com.itextpdf.text.pdf.PdfName TRUETYPE -> kJ
    com.itextpdf.text.pdf.PdfName TS -> kK
    com.itextpdf.text.pdf.PdfName TTL -> kL
    com.itextpdf.text.pdf.PdfName TU -> kM
    com.itextpdf.text.pdf.PdfName TWOCOLUMNLEFT -> kN
    com.itextpdf.text.pdf.PdfName TWOCOLUMNRIGHT -> kO
    com.itextpdf.text.pdf.PdfName TWOPAGELEFT -> kP
    com.itextpdf.text.pdf.PdfName TWOPAGERIGHT -> kQ
    com.itextpdf.text.pdf.PdfName TX -> kR
    com.itextpdf.text.pdf.PdfName TYPE -> kS
    com.itextpdf.text.pdf.PdfName TYPE0 -> kT
    com.itextpdf.text.pdf.PdfName TYPE1 -> kU
    com.itextpdf.text.pdf.PdfName TYPE3 -> kV
    com.itextpdf.text.pdf.PdfName U -> kW
    com.itextpdf.text.pdf.PdfName UE -> kX
    com.itextpdf.text.pdf.PdfName UF -> kY
    com.itextpdf.text.pdf.PdfName UHC -> kZ
    com.itextpdf.text.pdf.PdfName UNDERLINE -> la
    com.itextpdf.text.pdf.PdfName UR -> lb
    com.itextpdf.text.pdf.PdfName UR3 -> lc
    com.itextpdf.text.pdf.PdfName URI -> ld
    com.itextpdf.text.pdf.PdfName URL -> le
    com.itextpdf.text.pdf.PdfName USAGE -> lf
    com.itextpdf.text.pdf.PdfName USEATTACHMENTS -> lg
    com.itextpdf.text.pdf.PdfName USENONE -> lh
    com.itextpdf.text.pdf.PdfName USEOC -> li
    com.itextpdf.text.pdf.PdfName USEOUTLINES -> lj
    com.itextpdf.text.pdf.PdfName USER -> lk
    com.itextpdf.text.pdf.PdfName USERPROPERTIES -> ll
    com.itextpdf.text.pdf.PdfName USERUNIT -> lm
    com.itextpdf.text.pdf.PdfName USETHUMBS -> ln
    com.itextpdf.text.pdf.PdfName V -> lo
    com.itextpdf.text.pdf.PdfName V2 -> lp
    com.itextpdf.text.pdf.PdfName VALIGN -> lq
    com.itextpdf.text.pdf.PdfName VE -> lr
    com.itextpdf.text.pdf.PdfName VERISIGN_PPKVS -> ls
    com.itextpdf.text.pdf.PdfName VERSION -> lt
    com.itextpdf.text.pdf.PdfName VERTICES -> lu
    com.itextpdf.text.pdf.PdfName VIDEO -> lv
    com.itextpdf.text.pdf.PdfName VIEW -> lw
    com.itextpdf.text.pdf.PdfName VIEWS -> lx
    com.itextpdf.text.pdf.PdfName VIEWAREA -> ly
    com.itextpdf.text.pdf.PdfName VIEWCLIP -> lz
    com.itextpdf.text.pdf.PdfName VIEWERPREFERENCES -> lA
    com.itextpdf.text.pdf.PdfName VIEWPORT -> lB
    com.itextpdf.text.pdf.PdfName VIEWSTATE -> lC
    com.itextpdf.text.pdf.PdfName VISIBLEPAGES -> lD
    com.itextpdf.text.pdf.PdfName VOFFSET -> lE
    com.itextpdf.text.pdf.PdfName VP -> lF
    com.itextpdf.text.pdf.PdfName VRI -> lG
    com.itextpdf.text.pdf.PdfName W -> lH
    com.itextpdf.text.pdf.PdfName W2 -> lI
    com.itextpdf.text.pdf.PdfName WARICHU -> lJ
    com.itextpdf.text.pdf.PdfName WC -> lK
    com.itextpdf.text.pdf.PdfName WIDGET -> lL
    com.itextpdf.text.pdf.PdfName WIDTH -> lM
    com.itextpdf.text.pdf.PdfName WIDTHS -> lN
    com.itextpdf.text.pdf.PdfName WIN -> lO
    com.itextpdf.text.pdf.PdfName WIN_ANSI_ENCODING -> lP
    com.itextpdf.text.pdf.PdfName WINDOW -> lQ
    com.itextpdf.text.pdf.PdfName WINDOWED -> lR
    com.itextpdf.text.pdf.PdfName WIPE -> lS
    com.itextpdf.text.pdf.PdfName WHITEPOINT -> lT
    com.itextpdf.text.pdf.PdfName WKT -> lU
    com.itextpdf.text.pdf.PdfName WP -> lV
    com.itextpdf.text.pdf.PdfName WS -> lW
    com.itextpdf.text.pdf.PdfName X -> lX
    com.itextpdf.text.pdf.PdfName XA -> lY
    com.itextpdf.text.pdf.PdfName XD -> lZ
    com.itextpdf.text.pdf.PdfName XFA -> ma
    com.itextpdf.text.pdf.PdfName XML -> mb
    com.itextpdf.text.pdf.PdfName XOBJECT -> mc
    com.itextpdf.text.pdf.PdfName XPTS -> md
    com.itextpdf.text.pdf.PdfName XREF -> me
    com.itextpdf.text.pdf.PdfName XREFSTM -> mf
    com.itextpdf.text.pdf.PdfName XSTEP -> mg
    com.itextpdf.text.pdf.PdfName XYZ -> mh
    com.itextpdf.text.pdf.PdfName YSTEP -> mi
    com.itextpdf.text.pdf.PdfName ZADB -> mj
    com.itextpdf.text.pdf.PdfName ZAPFDINGBATS -> mk
    com.itextpdf.text.pdf.PdfName ZOOM -> ml
    java.util.Map staticNames -> mm
    int hash -> mq
    int compareTo(com.itextpdf.text.pdf.PdfName) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    byte[] encodeName(java.lang.String) -> a
    java.lang.String decodeName(java.lang.String) -> b
    int compareTo(java.lang.Object) -> compareTo
com.itextpdf.text.pdf.PdfNameTree -> com.a.a.d.de:
    com.itextpdf.text.pdf.PdfDictionary writeTree(java.util.HashMap,com.itextpdf.text.pdf.PdfWriter) -> a
com.itextpdf.text.pdf.PdfNull -> com.a.a.d.df:
    com.itextpdf.text.pdf.PdfNull PDFNULL -> a
    java.lang.String toString() -> toString
com.itextpdf.text.pdf.PdfNumber -> com.a.a.d.dg:
    double value -> a
    int intValue() -> a
    double doubleValue() -> b
com.itextpdf.text.pdf.PdfNumberTree -> com.a.a.d.dh:
    com.itextpdf.text.pdf.PdfDictionary writeTree(java.util.HashMap,com.itextpdf.text.pdf.PdfWriter) -> a
com.itextpdf.text.pdf.PdfOCG -> com.a.a.d.di:
    com.itextpdf.text.pdf.PdfIndirectReference getRef() -> e
    com.itextpdf.text.pdf.PdfObject getPdfObject() -> f
com.itextpdf.text.pdf.PdfOCProperties -> com.a.a.d.dj:
com.itextpdf.text.pdf.PdfObject -> com.a.a.d.dk:
    byte[] bytes -> mn
    int type -> mo
    com.itextpdf.text.pdf.PRIndirectReference indRef -> mp
    void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.lang.String toString() -> toString
    byte[] getBytes() -> d
    boolean canBeInObjStm() -> l
    void setContent(java.lang.String) -> f
    int type() -> m
    boolean isNull() -> n
    boolean isBoolean() -> o
    boolean isNumber() -> p
    boolean isName() -> q
    boolean isArray() -> r
    boolean isDictionary() -> s
    boolean isStream() -> t
    boolean isIndirect() -> u
    void setIndRef(com.itextpdf.text.pdf.PRIndirectReference) -> a
com.itextpdf.text.pdf.PdfOutline -> com.a.a.d.dl:
    com.itextpdf.text.pdf.PdfIndirectReference reference -> c
    int count -> d
    com.itextpdf.text.pdf.PdfOutline parent -> e
    com.itextpdf.text.pdf.PdfDestination destination -> f
    com.itextpdf.text.pdf.PdfAction action -> g
    java.util.ArrayList kids -> a
    com.itextpdf.text.pdf.PdfWriter writer -> b
    boolean open -> h
    com.itextpdf.text.BaseColor color -> i
    int style -> j
    void setIndirectReference(com.itextpdf.text.pdf.PdfIndirectReference) -> a
    com.itextpdf.text.pdf.PdfIndirectReference indirectReference() -> a
    com.itextpdf.text.pdf.PdfOutline parent() -> b
    int getCount() -> c
    void setCount(int) -> a
    int level() -> e
    void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.util.ArrayList getKids() -> f
    boolean isOpen() -> g
com.itextpdf.text.pdf.PdfPCell -> com.a.a.d.dm:
    com.itextpdf.text.pdf.ColumnText column -> t
    int verticalAlignment -> u
    float paddingLeft -> v
    float paddingRight -> w
    float paddingTop -> x
    float paddingBottom -> y
    float fixedHeight -> z
    float minimumHeight -> A
    boolean noWrap -> B
    com.itextpdf.text.pdf.PdfPTable table -> C
    int colspan -> D
    int rowspan -> E
    com.itextpdf.text.pdf.PdfPCellEvent cellEvent -> F
    boolean useDescender -> G
    boolean useBorderPadding -> H
    com.itextpdf.text.Phrase phrase -> s
    int rotation -> I
    void addElement(com.itextpdf.text.Element) -> a
    void setPhrase(com.itextpdf.text.Phrase) -> a
    int getHorizontalAlignment() -> D
    void setHorizontalAlignment(int) -> b
    int getVerticalAlignment() -> E
    float getEffectivePaddingLeft() -> F
    float getEffectivePaddingRight() -> G
    float getEffectivePaddingTop() -> H
    float getEffectivePaddingBottom() -> I
    void setPadding(float) -> h
    void setFixedHeight(float) -> i
    float getFixedHeight() -> J
    boolean hasFixedHeight() -> T
    void setMinimumHeight(float) -> j
    float getMinimumHeight() -> K
    boolean isNoWrap() -> L
    int getColspan() -> M
    void setColspan(int) -> c
    int getRowspan() -> N
    void setRowspan(int) -> d
    void setRunDirection(int) -> e
    int getRunDirection() -> O
    com.itextpdf.text.pdf.PdfPCellEvent getCellEvent() -> P
    boolean isUseDescender() -> Q
    com.itextpdf.text.pdf.ColumnText getColumn() -> R
    void setColumn(com.itextpdf.text.pdf.ColumnText) -> a
    int getRotation() -> j
    void setRotation$13462e() -> m
    float getMaxHeight() -> S
com.itextpdf.text.pdf.PdfPCellEvent -> com.a.a.d.dn:
com.itextpdf.text.pdf.PdfPRow -> com.a.a.d.do:
    com.itextpdf.text.pdf.PdfPCell[] cells -> a
    float[] widths -> b
    float[] extraHeights -> c
    float maxHeight -> d
    boolean calculated -> e
    int[] canvasesPos -> f
    boolean setWidths(float[]) -> a
    void initExtraHeights() -> d
    void setExtraHeight(int,float) -> a
    void calculateHeights() -> e
    void saveAndRotateCanvases(com.itextpdf.text.pdf.PdfContentByte[],float,float,float,float,float,float) -> a
    void restoreCanvases(com.itextpdf.text.pdf.PdfContentByte[]) -> a
    float setColumn(com.itextpdf.text.pdf.ColumnText,float,float,float,float) -> a
    void writeCells(int,int,float,float,com.itextpdf.text.pdf.PdfContentByte[],boolean) -> a
    float getMaxHeights() -> a
    void setMaxHeights(float) -> a
    float[] getEventWidth(float,float[]) -> a
    void copyRowContent(com.itextpdf.text.pdf.PdfPTable,int) -> a
    com.itextpdf.text.pdf.PdfPRow splitRow(com.itextpdf.text.pdf.PdfPTable,int,float) -> a
    com.itextpdf.text.pdf.PdfPCell[] getCells() -> b
    boolean hasRowspan() -> c
com.itextpdf.text.pdf.PdfPTable -> com.a.a.d.dp:
    java.util.ArrayList rows -> a
    float totalHeight -> b
    com.itextpdf.text.pdf.PdfPCell[] currentRow -> c
    int currentColIdx -> d
    com.itextpdf.text.pdf.PdfPCell defaultCell -> e
    float totalWidth -> f
    float[] relativeWidths -> g
    float[] absoluteWidths -> h
    com.itextpdf.text.pdf.PdfPTableEvent tableEvent -> i
    int headerRows -> j
    float widthPercentage -> k
    int horizontalAlignment -> r
    boolean skipFirstHeader -> s
    boolean skipLastFooter -> t
    boolean isColspan -> l
    int runDirection -> m
    boolean lockedWidth -> u
    boolean splitRows -> v
    float spacingBefore -> n
    float spacingAfter -> o
    boolean[] extendLastRow -> w
    boolean headersInEvent -> x
    boolean splitLate -> y
    boolean keepTogether -> z
    boolean complete -> p
    int footerRows -> A
    boolean rowCompleted -> q
    com.itextpdf.text.pdf.PdfPTable shallowCopy(com.itextpdf.text.pdf.PdfPTable) -> a
    void copyFormat(com.itextpdf.text.pdf.PdfPTable) -> b
    void setWidths(float[]) -> a
    void calculateWidths() -> F
    void setTotalWidth(float) -> a
    float getTotalWidth() -> e
    float calculateHeights() -> G
    com.itextpdf.text.pdf.PdfPCell getDefaultCell() -> f
    void addCell(com.itextpdf.text.pdf.PdfPCell) -> a
    void skipColsWithRowspanAbove() -> H
    com.itextpdf.text.pdf.PdfPCell cellAt(int,int) -> c
    boolean rowSpanAbove(int,int) -> a
    void addCell(java.lang.String) -> a
    void addCell(com.itextpdf.text.Phrase) -> a
    float writeSelectedRows$54efb39e(int,int,float,float,com.itextpdf.text.pdf.PdfContentByte[],boolean) -> a
    float writeSelectedRows$5c7298ab(float,float,com.itextpdf.text.pdf.PdfContentByte) -> a
    float writeSelectedRows$5e3759b7(float,float,com.itextpdf.text.pdf.PdfContentByte,boolean) -> a
    int size() -> g
    float getTotalHeight() -> h
    float getRowHeight(int) -> a
    float getRowHeight(int,boolean) -> a
    boolean hasRowspan(int) -> b
    void normalizeHeadersFooters() -> i
    float getHeaderHeight() -> j
    float getFooterHeight() -> m
    int getHeaderRows() -> n
    void setHeaderRows(int) -> c
    java.util.List getChunks() -> a
    int type() -> b
    boolean isContent() -> k
    boolean isNestable() -> l
    boolean process(com.itextpdf.text.ElementListener) -> a
    float getWidthPercentage() -> o
    void setWidthPercentage(float) -> b
    int getHorizontalAlignment() -> p
    com.itextpdf.text.pdf.PdfPRow getRow(int) -> d
    java.util.ArrayList getRows() -> q
    java.util.ArrayList getRows(int,int) -> b
    com.itextpdf.text.pdf.PdfPRow adjustCellsInRow(int,int) -> d
    com.itextpdf.text.pdf.PdfPTableEvent getTableEvent() -> r
    float[][] getEventWidths(float,int,int,boolean) -> a
    boolean isSkipFirstHeader() -> s
    boolean isSkipLastFooter() -> t
    boolean isLockedWidth() -> u
    boolean isSplitRows() -> v
    void setSplitRows$1385ff() -> w
    float spacingBefore() -> x
    float spacingAfter() -> y
    boolean isExtendLastRow() -> z
    boolean isExtendLastRow(boolean) -> a
    boolean isHeadersInEvent() -> A
    void setHeadersInEvent(boolean) -> b
    boolean isSplitLate() -> B
    boolean getKeepTogether() -> C
    int getFooterRows() -> D
    void flushContent() -> d
    boolean isComplete() -> c
    void setComplete$1385ff() -> E
com.itextpdf.text.pdf.PdfPTableEvent -> com.a.a.d.dq:
com.itextpdf.text.pdf.PdfPage -> com.a.a.d.dr:
    java.lang.String[] boxStrings -> f
    com.itextpdf.text.pdf.PdfName[] boxNames -> g
    com.itextpdf.text.pdf.PdfNumber PORTRAIT -> a
    com.itextpdf.text.pdf.PdfNumber LANDSCAPE -> b
    com.itextpdf.text.pdf.PdfNumber INVERTEDPORTRAIT -> c
    com.itextpdf.text.pdf.PdfNumber SEASCAPE -> d
    com.itextpdf.text.pdf.PdfRectangle mediaBox -> e
    void add(com.itextpdf.text.pdf.PdfIndirectReference) -> a
com.itextpdf.text.pdf.PdfPageEvent -> com.a.a.d.ds:
    void onOpenDocument(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document) -> a
    void onStartPage(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document) -> b
    void onEndPage(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document) -> c
    void onCloseDocument(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document) -> d
    void onParagraph(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float) -> a
    void onParagraphEnd(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float) -> b
    void onChapter(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float,com.itextpdf.text.Paragraph) -> a
    void onChapterEnd(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float) -> c
    void onSection(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float,int,com.itextpdf.text.Paragraph) -> a
    void onSectionEnd(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float) -> d
    void onGenericTag(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,com.itextpdf.text.Rectangle,java.lang.String) -> a
com.itextpdf.text.pdf.PdfPageEventHelper -> com.a.a.d.dt:
    void onOpenDocument(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document) -> a
    void onStartPage(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document) -> b
    void onEndPage(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document) -> c
    void onCloseDocument(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document) -> d
    void onParagraph(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float) -> a
    void onParagraphEnd(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float) -> b
    void onChapter(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float,com.itextpdf.text.Paragraph) -> a
    void onChapterEnd(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float) -> c
    void onSection(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float,int,com.itextpdf.text.Paragraph) -> a
    void onSectionEnd(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float) -> d
    void onGenericTag(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,com.itextpdf.text.Rectangle,java.lang.String) -> a
com.itextpdf.text.pdf.PdfPageLabels -> com.a.a.d.du:
    com.itextpdf.text.pdf.PdfName[] numberingStyle -> a
    java.util.HashMap map -> b
    com.itextpdf.text.pdf.PdfDictionary getDictionary(com.itextpdf.text.pdf.PdfWriter) -> a
com.itextpdf.text.pdf.PdfPages -> com.a.a.d.dv:
    java.util.ArrayList pages -> a
    java.util.ArrayList parents -> b
    int leafSize -> c
    com.itextpdf.text.pdf.PdfWriter writer -> d
    com.itextpdf.text.pdf.PdfIndirectReference topParent -> e
    void addPage(com.itextpdf.text.pdf.PdfDictionary) -> a
    com.itextpdf.text.pdf.PdfIndirectReference writePageTree() -> a
com.itextpdf.text.pdf.PdfPattern -> com.a.a.d.dw:
com.itextpdf.text.pdf.PdfPatternPainter -> com.a.a.d.dx:
    float xstep -> h
    float ystep -> i
    boolean stencil -> j
    com.itextpdf.text.BaseColor defaultColor -> k
    float getXStep() -> x
    float getYStep() -> y
    boolean isStencil() -> z
    com.itextpdf.text.pdf.PdfPattern getPattern(int) -> d
    com.itextpdf.text.pdf.PdfContentByte getDuplicate() -> u
    com.itextpdf.text.BaseColor getDefaultColor() -> A
    void setGrayFill(float) -> b
    void setGrayStroke(float) -> c
    void resetGrayStroke() -> g
    void resetRGBColorFill() -> h
    void resetRGBColorStroke() -> i
    void setCMYKColorFillF(float,float,float,float) -> a
    void setCMYKColorStrokeF(float,float,float,float) -> b
    void setRGBColorFill(int,int,int) -> a
    void setRGBColorStroke(int,int,int) -> b
    void setColorStroke(com.itextpdf.text.BaseColor) -> a
    void setColorFill(com.itextpdf.text.BaseColor) -> b
    void setColorFill(com.itextpdf.text.pdf.PdfSpotColor,float) -> a
    void setColorStroke(com.itextpdf.text.pdf.PdfSpotColor,float) -> b
    void setPatternFill(com.itextpdf.text.pdf.PdfPatternPainter) -> a
    void setPatternFill(com.itextpdf.text.pdf.PdfPatternPainter,com.itextpdf.text.BaseColor,float) -> a
    void setPatternStroke(com.itextpdf.text.pdf.PdfPatternPainter,com.itextpdf.text.BaseColor,float) -> b
    void setPatternStroke(com.itextpdf.text.pdf.PdfPatternPainter) -> b
    void checkNoColor() -> I
com.itextpdf.text.pdf.PdfReader -> com.a.a.d.dy:
    boolean unethicalreading -> a
    com.itextpdf.text.pdf.PdfName[] pageInhCandidates -> b
    byte[] endstream -> c
    byte[] endobj -> d
    com.itextpdf.text.pdf.PRTokeniser tokens -> e
    long[] xref -> f
    com.itextpdf.text.pdf.LongHashtable objStmToOffset -> g
    java.util.ArrayList xrefObj -> k
    com.itextpdf.text.pdf.PdfDictionary rootPages -> h
    com.itextpdf.text.pdf.PdfReader$PageRefs pageRefs -> i
    java.util.ArrayList strings -> j
    int objNum -> l
    int objGen -> m
    int lastXrefPartial -> n
    boolean partial -> o
    boolean appendable -> p
    int readDepth -> q
    int[] $SWITCH_TABLE$com$itextpdf$text$pdf$PRTokeniser$TokenType -> r
    com.itextpdf.text.pdf.RandomAccessFileOrArray getSafeFile() -> a
    com.itextpdf.text.pdf.PdfReaderInstance getPdfReaderInstance(com.itextpdf.text.pdf.PdfWriter) -> a
    com.itextpdf.text.pdf.PdfObject getPdfObjectRelease(com.itextpdf.text.pdf.PdfObject) -> a
    com.itextpdf.text.pdf.PdfObject getPdfObject(com.itextpdf.text.pdf.PdfObject) -> b
    com.itextpdf.text.pdf.PdfObject getPdfObjectRelease(int) -> a
    com.itextpdf.text.pdf.PdfObject getPdfObject(int) -> c
    void releaseLastXrefPartial() -> b
    com.itextpdf.text.pdf.PdfObject readSingleObject(int) -> d
    com.itextpdf.text.pdf.PdfObject readOneObjStm(com.itextpdf.text.pdf.PRStream,int) -> a
    com.itextpdf.text.pdf.PdfObject readPRObject() -> e
    byte[] FlateDecode(byte[]) -> a
    byte[] decodePredictor(byte[],com.itextpdf.text.pdf.PdfObject) -> a
    byte[] FlateDecode(byte[],boolean) -> a
    byte[] ASCIIHexDecode(byte[]) -> b
    byte[] ASCII85Decode(byte[]) -> c
    byte[] LZWDecode(byte[]) -> d
    com.itextpdf.text.pdf.PdfDictionary getPageNRelease(int) -> b
    byte[] getPageContent(int,com.itextpdf.text.pdf.RandomAccessFileOrArray) -> a
    byte[] getStreamBytes(com.itextpdf.text.pdf.PRStream,com.itextpdf.text.pdf.RandomAccessFileOrArray) -> a
    byte[] getStreamBytesRaw(com.itextpdf.text.pdf.PRStream,com.itextpdf.text.pdf.RandomAccessFileOrArray) -> b
    byte[] getStreamBytesRaw(com.itextpdf.text.pdf.PRStream) -> a
    int getXrefSize() -> c
    boolean equalsn(byte[],byte[]) -> a
    void close() -> d
    int access$1(com.itextpdf.text.pdf.PdfReader) -> a
    void access$2(com.itextpdf.text.pdf.PdfReader,int) -> a
    int[] $SWITCH_TABLE$com$itextpdf$text$pdf$PRTokeniser$TokenType() -> f
com.itextpdf.text.pdf.PdfReader$PageRefs -> com.a.a.d.dz:
    com.itextpdf.text.pdf.PdfReader reader -> a
    java.util.ArrayList refsn -> b
    int sizep -> c
    com.itextpdf.text.pdf.IntHashtable refsp -> d
    int lastPageRead -> e
    boolean keepPages -> f
    int size() -> a
    com.itextpdf.text.pdf.PRIndirectReference getPageOrigRef(int) -> a
    void releasePage(int) -> b
com.itextpdf.text.pdf.PdfReaderInstance -> com.a.a.d.ea:
    com.itextpdf.text.pdf.PdfLiteral IDENTITYMATRIX -> a
    com.itextpdf.text.pdf.PdfNumber ONE -> b
    int[] myXref -> c
    com.itextpdf.text.pdf.PdfReader reader -> d
    com.itextpdf.text.pdf.RandomAccessFileOrArray file -> e
    java.util.HashMap importedPages -> f
    com.itextpdf.text.pdf.PdfWriter writer -> g
    java.util.HashSet visited -> h
    java.util.ArrayList nextRound -> i
    int getNewObjectNumber$255f288(int) -> a
    com.itextpdf.text.pdf.PdfObject getResources(int) -> b
    com.itextpdf.text.pdf.PdfStream getFormXObject(int,int) -> a
    void writeAllPages() -> a
com.itextpdf.text.pdf.PdfRectangle -> com.a.a.d.eb:
    float llx -> b
    float lly -> c
    float urx -> d
    float ury -> e
    boolean add(com.itextpdf.text.pdf.PdfObject) -> a
    boolean add(float[]) -> a
    boolean add(int[]) -> a
    void addFirst(com.itextpdf.text.pdf.PdfObject) -> b
    float left() -> e
    float right() -> f
    float top() -> g
    float bottom() -> h
com.itextpdf.text.pdf.PdfRendition -> com.a.a.d.ec:
com.itextpdf.text.pdf.PdfResources -> com.a.a.d.ed:
    void add(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfDictionary) -> a
com.itextpdf.text.pdf.PdfShading -> com.a.a.d.ee:
    com.itextpdf.text.pdf.PdfDictionary shading -> a
    com.itextpdf.text.pdf.PdfWriter writer -> b
    com.itextpdf.text.pdf.ColorDetails colorDetails -> c
    com.itextpdf.text.pdf.PdfName shadingName -> d
    com.itextpdf.text.pdf.PdfIndirectReference shadingReference -> e
    com.itextpdf.text.BaseColor cspace -> h
    float[] bBox -> f
    boolean antiAlias -> g
    com.itextpdf.text.BaseColor getColorSpace() -> a
    com.itextpdf.text.pdf.PdfIndirectReference getShadingReference() -> b
    void setName(int) -> a
    void addToBody() -> c
    com.itextpdf.text.pdf.ColorDetails getColorDetails() -> d
com.itextpdf.text.pdf.PdfShadingPattern -> com.a.a.d.ef:
    com.itextpdf.text.pdf.PdfShading shading -> a
    com.itextpdf.text.pdf.PdfWriter writer -> b
    float[] matrix -> c
    com.itextpdf.text.pdf.PdfName patternName -> d
    com.itextpdf.text.pdf.PdfIndirectReference patternReference -> e
    com.itextpdf.text.pdf.PdfName getPatternName() -> a
    com.itextpdf.text.pdf.PdfIndirectReference getPatternReference() -> b
    void setName(int) -> a
    void addToBody() -> c
    com.itextpdf.text.pdf.PdfShading getShading() -> e
    com.itextpdf.text.pdf.ColorDetails getColorDetails() -> f
com.itextpdf.text.pdf.PdfSpotColor -> com.a.a.d.eg:
    com.itextpdf.text.pdf.PdfName name -> a
    com.itextpdf.text.BaseColor altcs -> b
    com.itextpdf.text.pdf.PdfObject getSpotObject(com.itextpdf.text.pdf.PdfWriter) -> a
com.itextpdf.text.pdf.PdfStream -> com.a.a.d.eh:
    boolean compressed -> g
    int compressionLevel -> h
    java.io.ByteArrayOutputStream streamBytes -> i
    java.io.InputStream inputStream -> j
    com.itextpdf.text.pdf.PdfIndirectReference ref -> k
    int inputStreamLength -> l
    com.itextpdf.text.pdf.PdfWriter writer -> m
    int rawLength -> n
    byte[] STARTSTREAM -> o
    byte[] ENDSTREAM -> p
    int SIZESTREAM -> q
    void writeLength() -> e
    int getRawLength() -> f
    void flateCompress(int) -> b
    void superToPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream) -> b
    void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.lang.String toString() -> toString
com.itextpdf.text.pdf.PdfString -> com.a.a.d.ei:
    java.lang.String value -> a
    java.lang.String originalValue -> b
    java.lang.String encoding -> c
    int objNum -> d
    int objGen -> e
    boolean hexWriting -> f
    void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream) -> a
    java.lang.String toString() -> toString
    byte[] getBytes() -> d
    java.lang.String toUnicodeString() -> a
    void setObjNum(int,int) -> a
    com.itextpdf.text.pdf.PdfString setHexWriting(boolean) -> a
    boolean isHexWriting() -> b
com.itextpdf.text.pdf.PdfStructureElement -> com.a.a.d.ej:
    com.itextpdf.text.pdf.PdfIndirectReference reference -> a
    com.itextpdf.text.pdf.PdfIndirectReference getReference() -> a
com.itextpdf.text.pdf.PdfStructureTreeRoot -> com.a.a.d.ek:
    java.util.HashMap parentTree -> a
    com.itextpdf.text.pdf.PdfIndirectReference reference -> b
    com.itextpdf.text.pdf.PdfWriter writer -> c
    com.itextpdf.text.pdf.PdfIndirectReference getReference() -> a
    void nodeProcess(com.itextpdf.text.pdf.PdfDictionary,com.itextpdf.text.pdf.PdfIndirectReference) -> a
    void buildTree() -> b
com.itextpdf.text.pdf.PdfTemplate -> com.a.a.d.el:
    int type -> l
    com.itextpdf.text.pdf.PdfIndirectReference thisReference -> m
    com.itextpdf.text.pdf.PageResources pageResources -> n
    com.itextpdf.text.Rectangle bBox -> o
    com.itextpdf.text.pdf.PdfArray matrix -> p
    com.itextpdf.text.pdf.PdfTransparencyGroup group -> q
    com.itextpdf.text.pdf.PdfOCG layer -> r
    com.itextpdf.text.pdf.PdfDictionary additional -> h
    com.itextpdf.text.Rectangle getBoundingBox() -> B
    com.itextpdf.text.pdf.PdfOCG getLayer() -> C
    com.itextpdf.text.pdf.PdfArray getMatrix() -> D
    com.itextpdf.text.pdf.PdfIndirectReference getIndirectReference() -> E
    com.itextpdf.text.pdf.PdfObject getResources() -> w
    com.itextpdf.text.pdf.PdfStream getFormXObject(int) -> c
    com.itextpdf.text.pdf.PdfContentByte getDuplicate() -> u
    int getType() -> F
    com.itextpdf.text.pdf.PageResources getPageResources() -> v
    com.itextpdf.text.pdf.PdfTransparencyGroup getGroup() -> G
    com.itextpdf.text.pdf.PdfDictionary getAdditional() -> H
com.itextpdf.text.pdf.PdfTextArray -> com.a.a.d.em:
    java.util.ArrayList arrayList -> a
    java.lang.String lastStr -> b
    java.lang.Float lastNum -> c
    void add(float) -> a
    void add(java.lang.String) -> a
    void replaceLast(java.lang.Object) -> a
com.itextpdf.text.pdf.PdfTransparencyGroup -> com.a.a.d.en:
com.itextpdf.text.pdf.PdfWriter -> com.a.a.d.eo:
    com.itextpdf.text.pdf.PdfDocument pdf -> g
    com.itextpdf.text.pdf.PdfContentByte directContent -> h
    com.itextpdf.text.pdf.PdfContentByte directContentUnder -> i
    com.itextpdf.text.pdf.PdfWriter$PdfBody body -> j
    com.itextpdf.text.pdf.PdfDictionary extraCatalog -> k
    com.itextpdf.text.pdf.PdfPages root -> l
    java.util.ArrayList pageReferences -> m
    int currentPageNumber -> n
    com.itextpdf.text.pdf.PdfName tabs -> o
    com.itextpdf.text.pdf.PdfDictionary pageDictEntries -> p
    com.itextpdf.text.pdf.PdfPageEvent pageEvent -> an
    long prevxref -> q
    java.util.List newBookmarks -> r
    com.itextpdf.text.pdf.PdfName PDF_VERSION_1_2 -> s
    com.itextpdf.text.pdf.PdfName PDF_VERSION_1_3 -> t
    com.itextpdf.text.pdf.PdfName PDF_VERSION_1_4 -> u
    com.itextpdf.text.pdf.PdfName PDF_VERSION_1_5 -> v
    com.itextpdf.text.pdf.PdfName PDF_VERSION_1_6 -> w
    com.itextpdf.text.pdf.PdfName PDF_VERSION_1_7 -> x
    com.itextpdf.text.pdf.internal.PdfVersionImp pdf_version -> y
    com.itextpdf.text.pdf.PdfName DOCUMENT_CLOSE -> z
    com.itextpdf.text.pdf.PdfName WILL_SAVE -> A
    com.itextpdf.text.pdf.PdfName DID_SAVE -> B
    com.itextpdf.text.pdf.PdfName WILL_PRINT -> C
    com.itextpdf.text.pdf.PdfName DID_PRINT -> D
    byte[] xmpMetadata -> E
    com.itextpdf.text.pdf.internal.PdfXConformanceImp pdfxConformance -> ao
    boolean fullCompression -> F
    int compressionLevel -> G
    java.util.LinkedHashMap documentFonts -> H
    int fontNumber -> I
    java.util.HashMap formXObjects -> J
    int formXObjectsCounter -> K
    java.util.HashMap readerInstances -> L
    com.itextpdf.text.pdf.PdfReaderInstance currentPdfReaderInstance -> M
    java.util.HashMap documentColors -> N
    int colorNumber -> O
    java.util.HashMap documentPatterns -> P
    int patternNumber -> Q
    java.util.HashSet documentShadingPatterns -> R
    java.util.HashSet documentShadings -> S
    java.util.HashMap documentExtGState -> T
    java.util.HashMap documentProperties -> U
    boolean tagged -> V
    com.itextpdf.text.pdf.PdfStructureTreeRoot structureTreeRoot -> W
    java.util.HashSet documentOCG -> X
    java.util.ArrayList documentOCGorder -> Y
    com.itextpdf.text.pdf.PdfOCProperties OCProperties -> Z
    com.itextpdf.text.pdf.PdfArray OCGRadioGroup -> aa
    com.itextpdf.text.pdf.PdfArray OCGLocked -> ab
    com.itextpdf.text.pdf.PdfName PAGE_OPEN -> ac
    com.itextpdf.text.pdf.PdfName PAGE_CLOSE -> ad
    com.itextpdf.text.pdf.PdfDictionary group -> ae
    float spaceCharRatio -> ap
    int runDirection -> af
    com.itextpdf.text.pdf.PdfDictionary defaultColorspace -> ag
    java.util.HashMap documentSpotPatterns -> ah
    com.itextpdf.text.pdf.ColorDetails patternColorspaceRGB -> ai
    com.itextpdf.text.pdf.ColorDetails patternColorspaceGRAY -> aj
    com.itextpdf.text.pdf.ColorDetails patternColorspaceCMYK -> ak
    com.itextpdf.text.pdf.PdfDictionary imageDictionary -> al
    java.util.HashMap JBIG2Globals -> am
    boolean userProperties -> aq
    boolean rgbTransparencyBlending -> ar
    com.itextpdf.text.pdf.PdfWriter getInstance(com.itextpdf.text.Document,java.io.OutputStream) -> a
    com.itextpdf.text.pdf.PdfDocument getPdfDocument() -> e
    com.itextpdf.text.pdf.PdfContentByte getDirectContent() -> f
    com.itextpdf.text.pdf.PdfContentByte getDirectContentUnder() -> g
    void resetContent() -> h
    void addLocalDestinations(java.util.TreeMap) -> a
    com.itextpdf.text.pdf.PdfIndirectObject addToBody(com.itextpdf.text.pdf.PdfObject) -> a
    com.itextpdf.text.pdf.PdfIndirectObject addToBody$26639ecb(com.itextpdf.text.pdf.PdfObject) -> b
    com.itextpdf.text.pdf.PdfIndirectObject addToBody(com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfIndirectReference) -> a
    com.itextpdf.text.pdf.PdfIndirectObject addToBody$2131efa1(com.itextpdf.text.pdf.PdfObject,com.itextpdf.text.pdf.PdfIndirectReference) -> b
    com.itextpdf.text.pdf.PdfIndirectObject addToBody(com.itextpdf.text.pdf.PdfObject,int) -> a
    com.itextpdf.text.pdf.PdfIndirectReference getPdfIndirectReference() -> i
    int getIndirectReferenceNumber() -> j
    com.itextpdf.text.pdf.OutputStreamCounter getOs() -> k
    com.itextpdf.text.pdf.PdfDictionary getCatalog(com.itextpdf.text.pdf.PdfIndirectReference) -> a
    com.itextpdf.text.pdf.PdfDictionary getPageDictEntries() -> l
    void resetPageDictEntries() -> m
    com.itextpdf.text.pdf.PdfIndirectReference getPageReference(int) -> a
    com.itextpdf.text.pdf.PdfIndirectReference getCurrentPage() -> n
    int getCurrentPageNumber() -> o
    com.itextpdf.text.pdf.PdfName getTabs() -> p
    com.itextpdf.text.pdf.PdfIndirectReference add(com.itextpdf.text.pdf.PdfPage,com.itextpdf.text.pdf.PdfContents) -> a
    void setPageEvent(com.itextpdf.text.pdf.PdfPageEvent) -> a
    com.itextpdf.text.pdf.PdfPageEvent getPageEvent() -> q
    void open() -> a
    void close() -> b
    byte[] createDocumentId() -> B
    com.itextpdf.text.pdf.PdfObject createInfoId(byte[]) -> a
    void addSharedObjectsToBody() -> C
    com.itextpdf.text.pdf.internal.PdfVersionImp getPdfVersion() -> r
    void addAnnotation(com.itextpdf.text.pdf.PdfAnnotation) -> a
    int getPDFXConformance() -> s
    boolean isPdfX() -> t
    boolean isFullCompression() -> u
    int getCompressionLevel() -> v
    com.itextpdf.text.pdf.FontDetails addSimple(com.itextpdf.text.pdf.BaseFont) -> a
    void eliminateFontSubset(com.itextpdf.text.pdf.PdfDictionary) -> a
    int getNewObjectNumber$60245e4(com.itextpdf.text.pdf.PdfReader,int) -> a
    com.itextpdf.text.pdf.PdfName getColorspaceName() -> D
    com.itextpdf.text.pdf.ColorDetails addSimple(com.itextpdf.text.pdf.PdfSpotColor) -> a
    com.itextpdf.text.pdf.PdfName addSimplePattern(com.itextpdf.text.pdf.PdfPatternPainter) -> a
    void addSimpleShadingPattern(com.itextpdf.text.pdf.PdfShadingPattern) -> a
    boolean isTagged() -> w
    void getOCGOrder(com.itextpdf.text.pdf.PdfArray,com.itextpdf.text.pdf.PdfLayer) -> a
    void addASEvent(com.itextpdf.text.pdf.PdfName,com.itextpdf.text.pdf.PdfName) -> a
    com.itextpdf.text.Rectangle getPageSize() -> x
    float getSpaceCharRatio() -> y
    com.itextpdf.text.pdf.PdfDictionary getDefaultColorspace() -> z
    com.itextpdf.text.pdf.ColorDetails addSimplePatternColorspace(com.itextpdf.text.BaseColor) -> a
    boolean isRgbTransparencyBlending() -> A
com.itextpdf.text.pdf.PdfWriter$PdfBody -> com.a.a.d.ep:
    java.util.TreeSet xrefs -> a
    int refnum -> b
    long position -> c
    com.itextpdf.text.pdf.PdfWriter writer -> d
    com.itextpdf.text.pdf.ByteBuffer index -> e
    com.itextpdf.text.pdf.ByteBuffer streamObjects -> f
    int currentObjNum -> g
    int numObj -> h
    void flushObjStm() -> e
    com.itextpdf.text.pdf.PdfIndirectObject add(com.itextpdf.text.pdf.PdfObject) -> a
    com.itextpdf.text.pdf.PdfIndirectReference getPdfIndirectReference() -> a
    int getIndirectReferenceNumber() -> b
    com.itextpdf.text.pdf.PdfIndirectObject add(com.itextpdf.text.pdf.PdfObject,int) -> a
    com.itextpdf.text.pdf.PdfIndirectObject add(com.itextpdf.text.pdf.PdfObject,int,boolean) -> a
    long offset() -> c
    int size() -> d
    void writeCrossReferenceTable(java.io.OutputStream,com.itextpdf.text.pdf.PdfIndirectReference,com.itextpdf.text.pdf.PdfIndirectReference,com.itextpdf.text.pdf.PdfObject,long) -> a
    void access$0(com.itextpdf.text.pdf.PdfWriter$PdfBody) -> a
com.itextpdf.text.pdf.PdfWriter$PdfBody$PdfCrossReference -> com.a.a.d.eq:
    int type -> a
    long offset -> b
    int refnum -> c
    int generation -> d
    int getRefnum() -> a
    void toPdf(java.io.OutputStream) -> a
    void toPdf(int,java.io.OutputStream) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
com.itextpdf.text.pdf.PdfWriter$PdfTrailer -> com.a.a.d.er:
    long offset -> a
    void toPdf(com.itextpdf.text.pdf.PdfWriter,java.io.OutputStream) -> a
com.itextpdf.text.pdf.PdfXConformanceException -> com.a.a.d.es:
com.itextpdf.text.pdf.Pfm2afm -> com.a.a.d.et:
    com.itextpdf.text.pdf.RandomAccessFileOrArray in -> a
    java.io.PrintWriter out -> b
    int h_len -> c
    java.lang.String copyright -> d
    short ascent -> e
    byte italic -> f
    short weight -> g
    byte charset -> h
    byte kind -> i
    short avgwidth -> j
    short maxwidth -> k
    int firstchar -> l
    int lastchar -> m
    int face -> n
    short extlen -> o
    int psext -> p
    int chartab -> q
    int kernpairs -> r
    int fontname -> s
    short capheight -> t
    short xheight -> u
    short ascender -> v
    short descender -> w
    boolean isMono -> x
    int[] Win2PSStd -> y
    java.lang.String[] WinChars -> z
    void convert(com.itextpdf.text.pdf.RandomAccessFileOrArray,java.io.OutputStream) -> a
    java.lang.String readString() -> a
    void outval(int) -> a
    void outchar(int,int,java.lang.String) -> a
    void putchartab() -> b
    void putkerntab() -> c
com.itextpdf.text.pdf.RandomAccessFileOrArray -> com.a.a.d.eu:
    com.itextpdf.text.pdf.MappedRandomAccessFile rf -> a
    java.io.RandomAccessFile trf -> b
    boolean plainRandomAccess -> c
    java.lang.String filename -> d
    byte[] arrayIn -> e
    long arrayInPtr -> f
    byte back -> g
    boolean isBack -> h
    long startOffset -> i
    void openFile(java.lang.String) -> a
    void openForPlainRandomAccess(java.lang.String) -> b
    byte[] InputStreamToArray(java.io.InputStream) -> a
    void pushBack(byte) -> a
    int read() -> a
    int read(byte[],int,int) -> a
    void readFully(byte[]) -> readFully
    void readFully(byte[],int,int) -> readFully
    int skipBytes(int) -> skipBytes
    void reOpen() -> b
    void insureOpen() -> i
    void close() -> c
    long length() -> d
    void seek(long) -> a
    long getFilePointer() -> e
    boolean readBoolean() -> readBoolean
    byte readByte() -> readByte
    int readUnsignedByte() -> readUnsignedByte
    short readShort() -> readShort
    short readShortLE() -> f
    int readUnsignedShort() -> readUnsignedShort
    int readUnsignedShortLE() -> g
    char readChar() -> readChar
    int readInt() -> readInt
    int readIntLE() -> h
    long readLong() -> readLong
    float readFloat() -> readFloat
    double readDouble() -> readDouble
    java.lang.String readLine() -> readLine
    java.lang.String readUTF() -> readUTF
com.itextpdf.text.pdf.ShadingColor -> com.a.a.d.ev:
    com.itextpdf.text.pdf.PdfShadingPattern shadingPattern -> n
    com.itextpdf.text.pdf.PdfShadingPattern getPdfShadingPattern() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.itextpdf.text.pdf.SimpleBookmark -> com.a.a.d.ew:
    void createOutlineAction(com.itextpdf.text.pdf.PdfDictionary,java.util.HashMap,com.itextpdf.text.pdf.PdfWriter,boolean) -> a
    java.lang.Object[] iterateOutlines(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.pdf.PdfIndirectReference,java.util.List,boolean) -> a
com.itextpdf.text.pdf.SpotColor -> com.a.a.d.ex:
    com.itextpdf.text.pdf.PdfSpotColor spot -> n
    float tint -> o
    com.itextpdf.text.pdf.PdfSpotColor getPdfSpotColor() -> d
    float getTint() -> e
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.itextpdf.text.pdf.TrueTypeFont -> com.a.a.d.ey:
    java.lang.String[] codePages -> v
    boolean justNames -> w
    java.util.HashMap tables -> x
    com.itextpdf.text.pdf.RandomAccessFileOrArray rf -> y
    java.lang.String fileName -> z
    boolean cff -> A
    int cffOffset -> B
    int cffLength -> C
    int directoryOffset -> D
    java.lang.String ttcIndex -> E
    java.lang.String style -> F
    com.itextpdf.text.pdf.TrueTypeFont$FontHeader head -> G
    com.itextpdf.text.pdf.TrueTypeFont$HorizontalHeader hhea -> H
    com.itextpdf.text.pdf.TrueTypeFont$WindowsMetrics os_2 -> I
    int[] GlyphWidths -> J
    int[][] bboxes -> K
    java.util.HashMap cmap10 -> L
    java.util.HashMap cmap31 -> M
    java.util.HashMap cmapExt -> N
    com.itextpdf.text.pdf.IntHashtable kerning -> O
    java.lang.String fontName -> P
    java.lang.String[][] fullName -> Q
    java.lang.String[][] allNameEntries -> R
    java.lang.String[][] familyName -> S
    double italicAngle -> T
    boolean isFixedPitch -> U
    int underlinePosition -> V
    int underlineThickness -> W
    java.lang.String getTTCName(java.lang.String) -> e
    java.lang.String getBaseFont() -> k
    java.lang.String[][] getNames(int) -> g
    java.lang.String[][] getAllNames() -> l
    void process$49638b58(byte[]) -> a
    java.lang.String readStandardString(int) -> h
    java.lang.String readUnicodeString(int) -> i
    void readGlyphWidths() -> m
    int getGlyphWidth(int) -> j
    void readBbox() -> n
    void readCMaps() -> o
    java.util.HashMap readFormat12() -> p
    java.util.HashMap readFormat0() -> q
    java.util.HashMap readFormat4() -> r
    java.util.HashMap readFormat6() -> s
    void readKerning() -> t
    int getRawWidth(int,java.lang.String) -> a
    com.itextpdf.text.pdf.PdfDictionary getFontDescriptor(com.itextpdf.text.pdf.PdfIndirectReference,java.lang.String,com.itextpdf.text.pdf.PdfIndirectReference) -> a
    com.itextpdf.text.pdf.PdfDictionary getFontBaseType(com.itextpdf.text.pdf.PdfIndirectReference,java.lang.String,int,int,byte[]) -> a
    byte[] getFullFont() -> i
    int[] compactRanges(java.util.ArrayList) -> a
    void addRangeUni$457ddb1e(java.util.HashMap,boolean) -> a
    void addRangeUni(java.util.HashSet,boolean) -> a
    void writeFont(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    byte[] readCffFont() -> j
    float getFontDescriptor(int,float) -> b
    int[] getMetricsTT(int) -> f
    java.lang.String getPostscriptFontName() -> g
    java.lang.String[][] getFamilyFontName() -> h
    int[] getRawCharBBox(int,java.lang.String) -> b
com.itextpdf.text.pdf.TrueTypeFont$FontHeader -> com.a.a.d.ez:
    int flags -> a
    int unitsPerEm -> b
    short xMin -> c
    short yMin -> d
    short xMax -> e
    short yMax -> f
    int macStyle -> g
com.itextpdf.text.pdf.TrueTypeFont$HorizontalHeader -> com.a.a.d.fa:
    short Ascender -> a
    short Descender -> b
    short LineGap -> c
    int advanceWidthMax -> d
    short minLeftSideBearing -> e
    short minRightSideBearing -> f
    short xMaxExtent -> g
    short caretSlopeRise -> h
    short caretSlopeRun -> i
    int numberOfHMetrics -> j
com.itextpdf.text.pdf.TrueTypeFont$WindowsMetrics -> com.a.a.d.fb:
    short xAvgCharWidth -> a
    int usWeightClass -> b
    int usWidthClass -> c
    short fsType -> d
    short ySubscriptXSize -> e
    short ySubscriptYSize -> f
    short ySubscriptXOffset -> g
    short ySubscriptYOffset -> h
    short ySuperscriptXSize -> i
    short ySuperscriptYSize -> j
    short ySuperscriptXOffset -> k
    short ySuperscriptYOffset -> l
    short yStrikeoutSize -> m
    short yStrikeoutPosition -> n
    short sFamilyClass -> o
    byte[] panose -> p
    byte[] achVendID -> q
    int fsSelection -> r
    int usFirstCharIndex -> s
    int usLastCharIndex -> t
    short sTypoAscender -> u
    short sTypoDescender -> v
    short sTypoLineGap -> w
    int usWinAscent -> x
    int usWinDescent -> y
    int ulCodePageRange1 -> z
    int ulCodePageRange2 -> A
    int sCapHeight -> B
com.itextpdf.text.pdf.TrueTypeFontSubSet -> com.a.a.d.fc:
    java.lang.String[] tableNamesSimple -> a
    java.lang.String[] tableNamesCmap -> b
    java.lang.String[] tableNamesExtra -> c
    int[] entrySelectors -> d
    java.util.HashMap tableDirectory -> e
    com.itextpdf.text.pdf.RandomAccessFileOrArray rf -> f
    java.lang.String fileName -> g
    boolean includeCmap -> h
    boolean includeExtras -> i
    boolean locaShortTable -> j
    int[] locaTable -> k
    java.util.HashSet glyphsUsed -> l
    java.util.ArrayList glyphsInList -> m
    int tableGlyphOffset -> n
    int[] newLocaTable -> o
    byte[] newLocaTableOut -> p
    byte[] newGlyfTable -> q
    int glyfTableRealSize -> r
    int locaTableRealSize -> s
    byte[] outFont -> t
    int fontPtr -> u
    int directoryOffset -> v
    byte[] process() -> a
    void assembleFont() -> b
    void readLoca() -> c
    void createNewGlyphTables() -> d
    void locaTobytes() -> e
    void flatGlyphs() -> f
    java.lang.String readStandardString$47921032() -> g
    void writeFontShort(int) -> a
    void writeFontInt(int) -> b
    int calculateChecksum(byte[]) -> a
com.itextpdf.text.pdf.TrueTypeFontUnicode -> com.a.a.d.fd:
    boolean vertical -> X
    byte[] rotbits -> Y
    int getWidth(int) -> a
    int getWidth(java.lang.String) -> b
    com.itextpdf.text.pdf.PdfStream getToUnicode(java.lang.Object[]) -> a
    java.lang.String toHex4(int) -> g
    java.lang.String toHex(int) -> h
    com.itextpdf.text.pdf.PdfDictionary getCIDFontType2(com.itextpdf.text.pdf.PdfIndirectReference,java.lang.String,java.lang.Object[]) -> a
    void writeFont(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    byte[] convertToBytes(java.lang.String) -> c
    byte[] convertToBytes(int) -> b
    int[] getMetricsTT(int) -> f
    int compare(java.lang.Object,java.lang.Object) -> compare
com.itextpdf.text.pdf.Type1Font -> com.a.a.d.fe:
    com.itextpdf.text.pdf.fonts.FontsResourceAnchor resourceAnchor -> w
    byte[] pfb -> v
    java.lang.String FontName -> x
    java.lang.String FullName -> y
    java.lang.String FamilyName -> z
    java.lang.String Weight -> A
    float ItalicAngle -> B
    boolean IsFixedPitch -> C
    int llx -> D
    int lly -> E
    int urx -> F
    int ury -> G
    int UnderlinePosition -> H
    int UnderlineThickness -> I
    java.lang.String EncodingScheme -> J
    int CapHeight -> K
    int Ascender -> L
    int Descender -> M
    int StdVW -> N
    java.util.HashMap CharMetrics -> O
    java.util.HashMap KernPairs -> P
    java.lang.String fileName -> Q
    boolean builtinFont -> R
    int[] PFB_TYPES -> S
    int getRawWidth(int,java.lang.String) -> a
    void process(com.itextpdf.text.pdf.RandomAccessFileOrArray) -> a
    com.itextpdf.text.pdf.PdfStream getFullFontStream() -> i
    void writeFont(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.pdf.PdfIndirectReference,java.lang.Object[]) -> a
    float getFontDescriptor(int,float) -> b
    java.lang.String getPostscriptFontName() -> g
    java.lang.String[][] getFamilyFontName() -> h
    int[] getRawCharBBox(int,java.lang.String) -> b
com.itextpdf.text.pdf.codec.TIFFFaxDecoder -> com.a.a.d.a.a:
    int bitPointer -> j
    int bytePointer -> k
    byte[] data -> l
    int w -> m
    int fillOrder -> n
    int changingElemSize -> o
    int[] prevChangingElems -> p
    int[] currChangingElems -> q
    int lastChangingElement -> r
    int compression -> s
    int fillBits -> t
    int[] table1 -> a
    int[] table2 -> b
    byte[] flipTable -> c
    short[] white -> d
    short[] additionalMakeup -> e
    short[] initBlack -> f
    short[] twoBitBlack -> g
    short[] black -> h
    byte[] twoDCodes -> i
    void decodeT6$1587653f$5a24e863(byte[],byte[],int) -> a
    void setToBlack(byte[],int,int,int) -> a
    int decodeWhiteCodeWord() -> a
    int decodeBlackCodeWord() -> b
    int nextNBits(int) -> a
    int nextLesserThan8Bits(int) -> b
    void updatePointer(int) -> c
com.itextpdf.text.pdf.codec.TIFFFaxDecompressor -> com.a.a.d.a.b:
    int fillOrder -> a
    int compression -> b
    int t6Options -> p
    int fails -> c
    int uncompressedMode -> d
    int fillBits -> e
    int oneD -> f
    byte[] data -> q
    int bitPointer -> r
    int bytePointer -> s
    byte[] buffer -> t
    int w -> u
    int h -> v
    int bitsPerScanline -> w
    int lineBitNum -> x
    int changingElemSize -> y
    int[] prevChangingElems -> z
    int[] currChangingElems -> A
    int lastChangingElement -> B
    int[] table1 -> g
    int[] table2 -> h
    byte[] flipTable -> i
    short[] white -> j
    short[] additionalMakeup -> k
    short[] initBlack -> l
    short[] twoBitBlack -> m
    short[] black -> n
    byte[] twoDCodes -> o
    void SetOptions$3b4dfe4b(int,int) -> a
    void decodeRaw(byte[],byte[],int,int) -> a
    void decodeNextScanline() -> a
    void decodeT6() -> b
    void setToBlack(int,int) -> b
    int decodeWhiteCodeWord() -> c
    int decodeBlackCodeWord() -> d
    int findNextLine() -> e
    void getNextChangingElement(int,boolean,int[]) -> a
    int nextNBits(int) -> a
    int nextLesserThan8Bits(int) -> b
    void updatePointer(int) -> c
com.itextpdf.text.pdf.collection.PdfCollection -> com.a.a.d.b.a:
com.itextpdf.text.pdf.draw.DrawInterface -> com.a.a.d.c.a:
    void draw(com.itextpdf.text.pdf.PdfContentByte,float,float,float,float,float) -> a
com.itextpdf.text.pdf.draw.LineSeparator -> com.a.a.d.c.b:
    float lineWidth -> a
    float percentage -> b
    com.itextpdf.text.BaseColor lineColor -> c
    int alignment -> d
    void draw(com.itextpdf.text.pdf.PdfContentByte,float,float,float,float,float) -> a
    float getPercentage() -> c
com.itextpdf.text.pdf.draw.VerticalPositionMark -> com.a.a.d.c.c:
    com.itextpdf.text.pdf.draw.DrawInterface drawInterface -> e
    float offset -> f
    void draw(com.itextpdf.text.pdf.PdfContentByte,float,float,float,float,float) -> a
    boolean process(com.itextpdf.text.ElementListener) -> a
    int type() -> b
    boolean isContent() -> k
    boolean isNestable() -> l
    java.util.List getChunks() -> a
com.itextpdf.text.pdf.events.PdfPageEventForwarder -> com.a.a.d.d.a:
    java.util.ArrayList events -> a
    void addPageEvent(com.itextpdf.text.pdf.PdfPageEvent) -> a
    void onOpenDocument(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document) -> a
    void onStartPage(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document) -> b
    void onEndPage(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document) -> c
    void onCloseDocument(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document) -> d
    void onParagraph(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float) -> a
    void onParagraphEnd(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float) -> b
    void onChapter(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float,com.itextpdf.text.Paragraph) -> a
    void onChapterEnd(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float) -> c
    void onSection(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float,int,com.itextpdf.text.Paragraph) -> a
    void onSectionEnd(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,float) -> d
    void onGenericTag(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document,com.itextpdf.text.Rectangle,java.lang.String) -> a
com.itextpdf.text.pdf.fonts.FontsResourceAnchor -> com.a.a.d.e.a:
com.itextpdf.text.pdf.fonts.cmaps.AbstractCMap -> com.a.a.d.e.a.a:
    java.lang.String cmapName -> a
    java.lang.String registry -> b
    java.lang.String ordering -> c
    int supplement -> d
    void setName(java.lang.String) -> a
    java.lang.String getOrdering() -> a
    void setOrdering(java.lang.String) -> b
    java.lang.String getRegistry() -> b
    void setRegistry(java.lang.String) -> c
    int getSupplement() -> c
    void setSupplement(int) -> a
    void addChar(com.itextpdf.text.pdf.PdfString,com.itextpdf.text.pdf.PdfObject) -> a
    void addRange(com.itextpdf.text.pdf.PdfString,com.itextpdf.text.pdf.PdfString,com.itextpdf.text.pdf.PdfObject) -> a
    byte[] decodeStringToByte(com.itextpdf.text.pdf.PdfString) -> a
    java.lang.String decodeStringToUnicode(com.itextpdf.text.pdf.PdfString) -> b
com.itextpdf.text.pdf.fonts.cmaps.CMapCache -> com.a.a.d.e.a.b:
    java.util.HashMap cacheUniCid -> a
    java.util.HashMap cacheCidUni -> b
    java.util.HashMap cacheCidByte -> c
    java.util.HashMap cacheByteCid -> d
    com.itextpdf.text.pdf.fonts.cmaps.CMapUniCid getCachedCMapUniCid(java.lang.String) -> a
    com.itextpdf.text.pdf.fonts.cmaps.CMapCidUni getCachedCMapCidUni(java.lang.String) -> b
    com.itextpdf.text.pdf.fonts.cmaps.CMapCidByte getCachedCMapCidByte(java.lang.String) -> c
com.itextpdf.text.pdf.fonts.cmaps.CMapCidByte -> com.a.a.d.e.a.c:
    java.util.HashMap map -> a
    byte[] EMPTY -> b
    void addChar(com.itextpdf.text.pdf.PdfString,com.itextpdf.text.pdf.PdfObject) -> a
    byte[] lookup(int) -> b
com.itextpdf.text.pdf.fonts.cmaps.CMapCidUni -> com.a.a.d.e.a.d:
    com.itextpdf.text.pdf.IntHashtable map -> a
    void addChar(com.itextpdf.text.pdf.PdfString,com.itextpdf.text.pdf.PdfObject) -> a
    int lookup(int) -> b
com.itextpdf.text.pdf.fonts.cmaps.CMapParserEx -> com.a.a.d.e.a.e:
    com.itextpdf.text.pdf.PdfName CMAPNAME -> a
    void parseCid(java.lang.String,com.itextpdf.text.pdf.fonts.cmaps.AbstractCMap,com.itextpdf.text.pdf.fonts.cmaps.CidLocation) -> a
    void parseCid(java.lang.String,com.itextpdf.text.pdf.fonts.cmaps.AbstractCMap,com.itextpdf.text.pdf.fonts.cmaps.CidLocation,int) -> a
com.itextpdf.text.pdf.fonts.cmaps.CMapUniCid -> com.a.a.d.e.a.f:
    com.itextpdf.text.pdf.IntHashtable map -> a
    void addChar(com.itextpdf.text.pdf.PdfString,com.itextpdf.text.pdf.PdfObject) -> a
    int lookup(int) -> b
com.itextpdf.text.pdf.fonts.cmaps.CidLocation -> com.a.a.d.e.a.g:
    com.itextpdf.text.pdf.PRTokeniser getLocation(java.lang.String) -> a
com.itextpdf.text.pdf.fonts.cmaps.CidResource -> com.a.a.d.e.a.h:
    com.itextpdf.text.pdf.PRTokeniser getLocation(java.lang.String) -> a
com.itextpdf.text.pdf.internal.PdfAnnotationsImp -> com.a.a.d.f.a:
    com.itextpdf.text.pdf.PdfAcroForm acroForm -> a
    java.util.ArrayList annotations -> b
    java.util.ArrayList delayedAnnotations -> c
    boolean hasValidAcroForm() -> a
    com.itextpdf.text.pdf.PdfAcroForm getAcroForm() -> b
    void addAnnotation(com.itextpdf.text.pdf.PdfAnnotation) -> a
    void addPlainAnnotation(com.itextpdf.text.pdf.PdfAnnotation) -> b
    void addFormFieldRaw(com.itextpdf.text.pdf.PdfFormField) -> a
    boolean hasUnusedAnnotations() -> c
    void resetAnnotations() -> d
    com.itextpdf.text.pdf.PdfArray rotateAnnotations(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Rectangle) -> a
com.itextpdf.text.pdf.internal.PdfVersionImp -> com.a.a.d.f.b:
    byte[][] HEADER -> a
    boolean headerWasWritten -> b
    boolean appendmode -> c
    char header_version -> d
    com.itextpdf.text.pdf.PdfName catalog_version -> e
    com.itextpdf.text.pdf.PdfDictionary extensions -> f
    void writeHeader(com.itextpdf.text.pdf.OutputStreamCounter) -> a
    void addToCatalog(com.itextpdf.text.pdf.PdfDictionary) -> a
com.itextpdf.text.pdf.internal.PdfViewerPreferencesImp -> com.a.a.d.f.c:
    com.itextpdf.text.pdf.PdfName[] VIEWER_PREFERENCES -> a
    com.itextpdf.text.pdf.PdfName[] NONFULLSCREENPAGEMODE_PREFERENCES -> b
    com.itextpdf.text.pdf.PdfName[] DIRECTION_PREFERENCES -> c
    com.itextpdf.text.pdf.PdfName[] PAGE_BOUNDARIES -> d
    com.itextpdf.text.pdf.PdfName[] PRINTSCALING_PREFERENCES -> e
    com.itextpdf.text.pdf.PdfName[] DUPLEX_PREFERENCES -> f
    int pageLayoutAndMode -> g
    com.itextpdf.text.pdf.PdfDictionary viewerPreferences -> h
    void addToCatalog(com.itextpdf.text.pdf.PdfDictionary) -> a
com.itextpdf.text.pdf.internal.PdfXConformanceImp -> com.a.a.d.f.d:
    int pdfxConformance -> a
    int getPDFXConformance() -> a
    boolean isPdfX() -> b
    boolean isPdfX1A2001() -> c
    boolean isPdfX32002() -> d
    boolean isPdfA1() -> e
    void checkPDFXConformance(com.itextpdf.text.pdf.PdfWriter,int,java.lang.Object) -> a
com.vinsol.android.graph.BarGraph -> com.vinsol.a.a.a:
    android.graphics.Paint paint -> a
    java.lang.Double max -> b
    java.util.ArrayList values -> c
    int height -> d
    int width -> e
    int verDiff -> f
    int horDiff -> g
    java.util.ArrayList horLabels -> h
    java.lang.String suffix -> i
    java.lang.String[] suffixList -> j
    float floatPx -> k
    void onDraw(android.graphics.Canvas) -> onDraw
    void drawGraph(android.graphics.Canvas) -> a
    int getDivisor(java.lang.String) -> a
    java.lang.Double getDouble(int) -> a
com.vinsol.expensetracker.BaseActivity -> com.vinsol.expensetracker.BaseActivity:
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean removeGenerateReport(android.view.Menu) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void startGenerateReportActivity() -> a
com.vinsol.expensetracker.Constants -> com.vinsol.expensetracker.a:
    java.lang.String DIRECTORY -> a
com.vinsol.expensetracker.ExpenseTrackerApplication -> com.vinsol.expensetracker.ExpenseTrackerApplication:
    android.content.Context applicationContext -> c
    java.lang.String FILES_DIR -> a
    boolean isInitialized -> b
    void onCreate() -> onCreate
    void Initialize() -> a
    android.content.Context getContext() -> b
    void copyDirectory(java.io.File,java.io.File) -> a
    void deleteDirectory(java.io.File) -> a
com.vinsol.expensetracker.GenerateReport -> com.vinsol.expensetracker.GenerateReport:
    android.widget.Spinner period -> a
    int mStartYear -> b
    int mStartMonth -> c
    int mStartDay -> d
    int mEndYear -> e
    int mEndMonth -> f
    int mEndDay -> g
    android.widget.TextView customStartDateTextView -> h
    android.widget.TextView customEndDateTextView -> i
    java.util.Calendar endCalendar -> j
    java.util.Calendar startCalendar -> k
    android.os.AsyncTask exportPDF -> l
    android.os.AsyncTask exportCSV -> m
    java.io.File fileLocation -> n
    java.lang.String dateRange -> o
    java.util.List mEntryList -> p
    int REQUEST_CODE -> q
    com.vinsol.expensetracker.helpers.CustomDatePickerDialog$OnDateSetListener mStartDateSetListener -> r
    com.vinsol.expensetracker.helpers.CustomDatePickerDialog$OnDateSetListener mEndDateSetListener -> s
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void setDateParameters(java.util.Calendar,java.util.Calendar) -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    boolean checkStartEndDate(boolean) -> a
    void onPause() -> onPause
    void access$0(com.vinsol.expensetracker.GenerateReport,int) -> a
    void access$1(com.vinsol.expensetracker.GenerateReport,int) -> b
    void access$2(com.vinsol.expensetracker.GenerateReport,int) -> c
    boolean access$3$24794e40(com.vinsol.expensetracker.GenerateReport) -> a
    void access$4(com.vinsol.expensetracker.GenerateReport,int) -> d
    void access$5(com.vinsol.expensetracker.GenerateReport,int) -> e
    void access$6(com.vinsol.expensetracker.GenerateReport,int) -> f
    java.io.File access$7(com.vinsol.expensetracker.GenerateReport) -> b
    void access$8(com.vinsol.expensetracker.GenerateReport,java.io.File) -> a
    java.lang.String access$9(com.vinsol.expensetracker.GenerateReport) -> c
    int access$10(com.vinsol.expensetracker.GenerateReport) -> d
    int access$11(com.vinsol.expensetracker.GenerateReport) -> e
    int access$12(com.vinsol.expensetracker.GenerateReport) -> f
    int access$13(com.vinsol.expensetracker.GenerateReport) -> g
    int access$14(com.vinsol.expensetracker.GenerateReport) -> h
    int access$15(com.vinsol.expensetracker.GenerateReport) -> i
    java.util.List access$16(com.vinsol.expensetracker.GenerateReport) -> j
com.vinsol.expensetracker.GenerateReport$1 -> com.vinsol.expensetracker.b:
    com.vinsol.expensetracker.GenerateReport this$0 -> a
    void onDateSet$460822fe(int,int,int) -> a
com.vinsol.expensetracker.GenerateReport$2 -> com.vinsol.expensetracker.c:
    com.vinsol.expensetracker.GenerateReport this$0 -> a
    void onDateSet$460822fe(int,int,int) -> a
com.vinsol.expensetracker.GenerateReport$Export -> com.vinsol.expensetracker.d:
    android.app.ProgressDialog progressDialog -> a
    java.lang.Double totalAmount -> b
    boolean isAmountNotEntered -> c
    boolean isRecordAdded -> d
    com.vinsol.expensetracker.GenerateReport this$0 -> e
    void onPreExecute() -> onPreExecute
    java.lang.String getShowLocation() -> d
    java.lang.String getType() -> a
    void setFile() -> b
    java.lang.String getFileName() -> c
    boolean isDateValid(java.lang.Long) -> a
    java.lang.String getDescriptionIfNotPresent(java.lang.String) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    com.vinsol.expensetracker.GenerateReport access$2(com.vinsol.expensetracker.GenerateReport$Export) -> a
com.vinsol.expensetracker.GenerateReport$Export$1 -> com.vinsol.expensetracker.e:
    com.vinsol.expensetracker.GenerateReport$Export this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.vinsol.expensetracker.GenerateReport$ExportPDF -> com.vinsol.expensetracker.f:
    com.itextpdf.text.Font catFont -> g
    com.itextpdf.text.Font subFont -> h
    com.itextpdf.text.Font tableHeader -> i
    com.itextpdf.text.Font small -> j
    com.itextpdf.text.pdf.PdfWriter writer -> k
    com.vinsol.expensetracker.GenerateReport this$0 -> f
    java.lang.Void doInBackground$10299ca() -> d
    java.lang.String getFileName() -> c
    void addDataToTable(com.itextpdf.text.pdf.PdfPTable,com.itextpdf.text.Document) -> a
    void addEmptyLine(com.itextpdf.text.Paragraph,int) -> a
    java.lang.String getType() -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    com.itextpdf.text.Font access$1(com.vinsol.expensetracker.GenerateReport$ExportPDF) -> a
com.vinsol.expensetracker.GenerateReport$ExportPDF$HeaderAndFooter -> com.vinsol.expensetracker.g:
    com.itextpdf.text.pdf.PdfPTable footer -> a
    com.vinsol.expensetracker.GenerateReport$ExportPDF this$1 -> b
    void onEndPage(com.itextpdf.text.pdf.PdfWriter,com.itextpdf.text.Document) -> c
com.vinsol.expensetracker.GenerateReport$ExportToCSV -> com.vinsol.expensetracker.h:
    java.io.Writer writer -> g
    com.vinsol.expensetracker.GenerateReport this$0 -> f
    java.lang.Void doInBackground$10299ca() -> d
    java.lang.String getFileName() -> c
    void addDataToTable() -> e
    java.lang.String getType() -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.vinsol.expensetracker.Home -> com.vinsol.expensetracker.Home:
    long timeInMillis -> a
    android.os.Bundle bundle -> b
    com.vinsol.expensetracker.helpers.GraphHelper mHandleGraph -> c
    android.widget.ProgressBar graphProgressBar -> d
    com.vinsol.expensetracker.helpers.UnfinishedEntryCount unfinishedEntryCount -> e
    com.vinsol.expensetracker.helpers.ConvertCursorToListString mConvertCursorToListString -> f
    void onStart() -> onStart
    void onStop() -> onStop
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
    void createDatabaseEntry(int) -> a
    java.lang.Long insertToDatabase(int) -> b
    void onPause() -> onPause
    void cancelUnfinishedEntryTask() -> b
    void cancelHandleGraphTask() -> c
com.vinsol.expensetracker.SetPreferences -> com.vinsol.expensetracker.SetPreferences:
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
com.vinsol.expensetracker.SetPreferences$1 -> com.vinsol.expensetracker.i:
    com.vinsol.expensetracker.SetPreferences this$0 -> a
    android.preference.CheckBoxPreference val$mCheckBoxPreference -> b
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.vinsol.expensetracker.cameraservice.Camera -> com.vinsol.expensetracker.cameraservice.Camera:
    int mUpdateSet -> g
    android.hardware.Camera$Parameters mParameters -> h
    android.view.OrientationEventListener mOrientationListener -> i
    int mLastOrientation -> j
    android.content.SharedPreferences mPreferences -> k
    int mStatus -> l
    android.hardware.Camera mCameraDevice -> m
    android.content.ContentProviderClient mMediaProviderClient -> n
    android.view.SurfaceView mSurfaceView -> o
    android.view.SurfaceHolder mSurfaceHolder -> p
    com.vinsol.expensetracker.cameraservice.ShutterButton mShutterButton -> q
    com.vinsol.expensetracker.cameraservice.FocusRectangle mFocusRectangle -> r
    boolean mStartPreviewFail -> s
    android.net.Uri mSaveUri -> t
    com.vinsol.expensetracker.cameraservice.Camera$ImageCapture mImageCapture -> u
    boolean mPreviewing -> v
    boolean mPausing -> w
    boolean mFirstTimeInitialized -> x
    int mFocusState -> y
    android.content.ContentResolver mContentResolver -> z
    com.vinsol.expensetracker.cameraservice.Camera$ShutterCallback mShutterCallback -> A
    com.vinsol.expensetracker.cameraservice.Camera$PostViewPictureCallback mPostViewPictureCallback -> B
    com.vinsol.expensetracker.cameraservice.Camera$RawPictureCallback mRawPictureCallback -> C
    com.vinsol.expensetracker.cameraservice.Camera$AutoFocusCallback mAutoFocusCallback -> D
    com.vinsol.expensetracker.cameraservice.Camera$ErrorCallback mErrorCallback -> E
    long mFocusStartTime -> F
    long mFocusCallbackTime -> G
    long mCaptureStartTime -> H
    long mShutterCallbackTime -> I
    long mPostViewPictureCallbackTime -> J
    long mRawPictureCallbackTime -> K
    long mJpegPictureCallbackTime -> L
    int mPicturesRemaining -> M
    int mOrientationCompensation -> N
    com.vinsol.expensetracker.cameraservice.OnScreenHint mStorageHint -> O
    long mAutoFocusTime -> a
    long mShutterLag -> b
    long mShutterToPictureDisplayedTime -> c
    long mPictureDisplayedToJpegCallbackTime -> d
    long mJpegCallbackFinishTime -> e
    boolean mMediaServerDied -> f
    android.os.Handler mHandler -> P
    com.vinsol.expensetracker.cameraservice.CameraFlashButtonCBInterface flashCB -> Q
    void onStart() -> onStart
    void checkStorage() -> a
    void keepMediaProviderInstance() -> b
    void initializeSecondTime() -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onStop() -> onStop
    void onClick(android.view.View) -> onClick
    android.graphics.Bitmap makeBitmap(byte[]) -> a
    android.graphics.Bitmap rotate(android.graphics.Bitmap,int) -> a
    int getDisplayRotation() -> d
    boolean saveDataToFile(java.lang.String,byte[]) -> a
    int getExifOrientation(java.lang.String) -> a
    void closeSilently(java.io.Closeable) -> a
    void doCancel() -> e
    void onShutterButtonFocus(com.vinsol.expensetracker.cameraservice.ShutterButton,boolean) -> a
    void onShutterButtonClick(com.vinsol.expensetracker.cameraservice.ShutterButton) -> a
    void installIntentFilter() -> f
    void onResume() -> onResume
    void onPause() -> onPause
    void clearFocusState() -> g
    void updateFocusIndicator() -> h
    void onBackPressed() -> onBackPressed
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void doSnap() -> i
    void doFocus(boolean) -> a
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void closeCamera() -> j
    void showCameraErrorAndFinish() -> k
    void restartPreview() -> l
    void setPreviewDisplay(android.view.SurfaceHolder) -> a
    void startPreview() -> m
    void stopPreview() -> n
    boolean setCameraPictureSize(java.lang.String,java.util.List,android.hardware.Camera$Parameters) -> a
    void updateFlashModeParameter() -> o
    void setCameraParameters(int) -> a
    boolean isCameraIdle() -> p
    void hidePostCaptureAlert() -> q
    int calculatePicturesRemaining() -> r
    void onUserInteraction() -> onUserInteraction
    void keepScreenOnAwhile() -> s
    void access$0(com.vinsol.expensetracker.cameraservice.Camera) -> a
    void access$1(com.vinsol.expensetracker.cameraservice.Camera) -> b
    long access$2(com.vinsol.expensetracker.cameraservice.Camera) -> c
    void access$3(com.vinsol.expensetracker.cameraservice.Camera,long) -> a
    void access$4(com.vinsol.expensetracker.cameraservice.Camera) -> d
    void access$5$406cf2c6(com.vinsol.expensetracker.cameraservice.Camera) -> e
    void access$6(com.vinsol.expensetracker.cameraservice.Camera,long) -> b
    long access$7(com.vinsol.expensetracker.cameraservice.Camera) -> f
    long access$8(com.vinsol.expensetracker.cameraservice.Camera) -> g
    void access$9(com.vinsol.expensetracker.cameraservice.Camera) -> h
    void access$10(com.vinsol.expensetracker.cameraservice.Camera,long) -> c
    void access$11(com.vinsol.expensetracker.cameraservice.Camera,long) -> d
    boolean access$12(com.vinsol.expensetracker.cameraservice.Camera) -> i
    long access$13(com.vinsol.expensetracker.cameraservice.Camera) -> j
    long access$14(com.vinsol.expensetracker.cameraservice.Camera) -> k
    com.vinsol.expensetracker.cameraservice.Camera$ImageCapture access$15(com.vinsol.expensetracker.cameraservice.Camera) -> l
    int access$16(com.vinsol.expensetracker.cameraservice.Camera) -> m
    android.os.Handler access$17(com.vinsol.expensetracker.cameraservice.Camera) -> n
    void access$18(com.vinsol.expensetracker.cameraservice.Camera,long) -> e
    long access$19(com.vinsol.expensetracker.cameraservice.Camera) -> o
    long access$20(com.vinsol.expensetracker.cameraservice.Camera) -> p
    int access$21(com.vinsol.expensetracker.cameraservice.Camera) -> q
    void access$22(com.vinsol.expensetracker.cameraservice.Camera,int) -> a
    void access$23(com.vinsol.expensetracker.cameraservice.Camera) -> r
    void access$24(com.vinsol.expensetracker.cameraservice.Camera) -> s
    android.hardware.Camera access$25(com.vinsol.expensetracker.cameraservice.Camera) -> t
    android.hardware.Camera$Parameters access$26(com.vinsol.expensetracker.cameraservice.Camera) -> u
    int access$27(com.vinsol.expensetracker.cameraservice.Camera) -> v
    com.vinsol.expensetracker.cameraservice.Camera$ShutterCallback access$28(com.vinsol.expensetracker.cameraservice.Camera) -> w
    com.vinsol.expensetracker.cameraservice.Camera$RawPictureCallback access$29(com.vinsol.expensetracker.cameraservice.Camera) -> x
    com.vinsol.expensetracker.cameraservice.Camera$PostViewPictureCallback access$30(com.vinsol.expensetracker.cameraservice.Camera) -> y
    void access$31$406d3297(com.vinsol.expensetracker.cameraservice.Camera) -> z
    int access$32(com.vinsol.expensetracker.cameraservice.Camera) -> A
    void access$33(com.vinsol.expensetracker.cameraservice.Camera,long) -> f
    void access$34$406cf2c6(com.vinsol.expensetracker.cameraservice.Camera) -> B
    int access$35(com.vinsol.expensetracker.cameraservice.Camera,int) -> b
    void access$36(com.vinsol.expensetracker.cameraservice.Camera,int) -> c
    int access$37(com.vinsol.expensetracker.cameraservice.Camera) -> C
    int access$38(com.vinsol.expensetracker.cameraservice.Camera) -> D
    void access$39(com.vinsol.expensetracker.cameraservice.Camera,int) -> d
    void access$40(com.vinsol.expensetracker.cameraservice.Camera,int) -> e
    void access$41(com.vinsol.expensetracker.cameraservice.Camera,boolean) -> a
    void access$42(com.vinsol.expensetracker.cameraservice.Camera) -> E
com.vinsol.expensetracker.cameraservice.Camera$1 -> com.vinsol.expensetracker.cameraservice.a:
    com.vinsol.expensetracker.cameraservice.Camera this$0 -> a
    void onClickListener$13462e() -> a
com.vinsol.expensetracker.cameraservice.Camera$2 -> com.vinsol.expensetracker.cameraservice.b:
    com.vinsol.expensetracker.cameraservice.Camera this$0 -> a
    void onOrientationChanged(int) -> onOrientationChanged
com.vinsol.expensetracker.cameraservice.Camera$3 -> com.vinsol.expensetracker.cameraservice.c:
    com.vinsol.expensetracker.cameraservice.Camera this$0 -> a
    void run() -> run
com.vinsol.expensetracker.cameraservice.Camera$4 -> com.vinsol.expensetracker.cameraservice.d:
    com.vinsol.expensetracker.cameraservice.Camera this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.vinsol.expensetracker.cameraservice.Camera$AutoFocusCallback -> com.vinsol.expensetracker.cameraservice.e:
    com.vinsol.expensetracker.cameraservice.Camera this$0 -> a
    void onAutoFocus(boolean,android.hardware.Camera) -> onAutoFocus
com.vinsol.expensetracker.cameraservice.Camera$ErrorCallback -> com.vinsol.expensetracker.cameraservice.f:
    com.vinsol.expensetracker.cameraservice.Camera this$0 -> a
    void onError(int,android.hardware.Camera) -> onError
com.vinsol.expensetracker.cameraservice.Camera$ImageCapture -> com.vinsol.expensetracker.cameraservice.g:
    byte[] mCaptureOnlyData -> a
    com.vinsol.expensetracker.cameraservice.Camera this$0 -> b
    void onSnap() -> a
com.vinsol.expensetracker.cameraservice.Camera$JpegPictureCallback -> com.vinsol.expensetracker.cameraservice.h:
    com.vinsol.expensetracker.cameraservice.Camera this$0 -> a
    void onPictureTaken(byte[],android.hardware.Camera) -> onPictureTaken
com.vinsol.expensetracker.cameraservice.Camera$MainHandler -> com.vinsol.expensetracker.cameraservice.i:
    com.vinsol.expensetracker.cameraservice.Camera this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.vinsol.expensetracker.cameraservice.Camera$PostViewPictureCallback -> com.vinsol.expensetracker.cameraservice.j:
    com.vinsol.expensetracker.cameraservice.Camera this$0 -> a
    void onPictureTaken(byte[],android.hardware.Camera) -> onPictureTaken
com.vinsol.expensetracker.cameraservice.Camera$RawPictureCallback -> com.vinsol.expensetracker.cameraservice.k:
    com.vinsol.expensetracker.cameraservice.Camera this$0 -> a
    void onPictureTaken(byte[],android.hardware.Camera) -> onPictureTaken
com.vinsol.expensetracker.cameraservice.Camera$ShutterCallback -> com.vinsol.expensetracker.cameraservice.l:
    com.vinsol.expensetracker.cameraservice.Camera this$0 -> a
    void onShutter() -> onShutter
com.vinsol.expensetracker.cameraservice.CameraButton -> com.vinsol.expensetracker.cameraservice.CameraButton:
    int mCurrentDegree -> a
    int mStartDegree -> b
    int mTargetDegree -> c
    boolean mClockwise -> d
    long mAnimationStartTime -> e
    long mAnimationEndTime -> f
    void setDegree(int) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
com.vinsol.expensetracker.cameraservice.CameraFlashButton -> com.vinsol.expensetracker.cameraservice.CameraFlashButton:
    int[] resId -> a
    int selectedResId -> b
    com.vinsol.expensetracker.cameraservice.CameraFlashButtonCBInterface mCallbackInterface -> c
    int mCurrentDegree -> d
    int mStartDegree -> e
    int mTargetDegree -> f
    boolean mClockwise -> g
    long mAnimationStartTime -> h
    long mAnimationEndTime -> i
    void setButtonCallback(com.vinsol.expensetracker.cameraservice.CameraFlashButtonCBInterface) -> a
    void onClick(android.view.View) -> onClick
    void setDegree(int) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
com.vinsol.expensetracker.cameraservice.CameraFlashButtonCBInterface -> com.vinsol.expensetracker.cameraservice.m:
    void onClickListener$13462e() -> a
com.vinsol.expensetracker.cameraservice.CameraHardwareException -> com.vinsol.expensetracker.cameraservice.n:
com.vinsol.expensetracker.cameraservice.CameraHolder -> com.vinsol.expensetracker.cameraservice.o:
    android.hardware.Camera mCameraDevice -> a
    long mKeepBeforeTime -> b
    android.os.Handler mHandler -> c
    int mUsers -> d
    android.hardware.Camera$Parameters mParameters -> e
    com.vinsol.expensetracker.cameraservice.CameraHolder sHolder -> f
    com.vinsol.expensetracker.cameraservice.CameraHolder instance() -> a
    void Assert(boolean) -> a
    android.hardware.Camera open() -> b
    void release() -> c
    void releaseCamera() -> d
    int access$0(com.vinsol.expensetracker.cameraservice.CameraHolder) -> a
    void access$1(com.vinsol.expensetracker.cameraservice.CameraHolder) -> b
com.vinsol.expensetracker.cameraservice.CameraHolder$MyHandler -> com.vinsol.expensetracker.cameraservice.p:
    com.vinsol.expensetracker.cameraservice.CameraHolder this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.vinsol.expensetracker.cameraservice.FocusRectangle -> com.vinsol.expensetracker.cameraservice.FocusRectangle:
    void setDrawable(int) -> a
    void showStart() -> a
    void showSuccess() -> b
    void showFail() -> c
    void clear() -> d
com.vinsol.expensetracker.cameraservice.OnScreenHint -> com.vinsol.expensetracker.cameraservice.q:
    int mGravity -> a
    int mX -> b
    int mY -> c
    float mHorizontalMargin -> d
    float mVerticalMargin -> e
    android.view.View mView -> f
    android.view.View mNextView -> g
    android.view.WindowManager$LayoutParams mParams -> h
    android.view.WindowManager mWM -> i
    android.os.Handler mHandler -> j
    java.lang.Runnable mShow -> k
    java.lang.Runnable mHide -> l
    void show() -> a
    void cancel() -> b
    void handleShow() -> c
    void handleHide() -> d
    void access$0(com.vinsol.expensetracker.cameraservice.OnScreenHint) -> a
    void access$1(com.vinsol.expensetracker.cameraservice.OnScreenHint) -> b
com.vinsol.expensetracker.cameraservice.OnScreenHint$1 -> com.vinsol.expensetracker.cameraservice.r:
    com.vinsol.expensetracker.cameraservice.OnScreenHint this$0 -> a
    void run() -> run
com.vinsol.expensetracker.cameraservice.OnScreenHint$2 -> com.vinsol.expensetracker.cameraservice.s:
    com.vinsol.expensetracker.cameraservice.OnScreenHint this$0 -> a
    void run() -> run
com.vinsol.expensetracker.cameraservice.PreviewFrameLayout -> com.vinsol.expensetracker.cameraservice.PreviewFrameLayout:
    double mAspectRatio -> a
    android.widget.FrameLayout mFrame -> b
    com.vinsol.expensetracker.cameraservice.PreviewFrameLayout$OnSizeChangedListener mSizeListener -> c
    android.util.DisplayMetrics mMetrics -> d
    void onFinishInflate() -> onFinishInflate
    void setAspectRatio(double) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
com.vinsol.expensetracker.cameraservice.PreviewFrameLayout$OnSizeChangedListener -> com.vinsol.expensetracker.cameraservice.t:
com.vinsol.expensetracker.cameraservice.ShutterButton -> com.vinsol.expensetracker.cameraservice.ShutterButton:
    com.vinsol.expensetracker.cameraservice.ShutterButton$OnShutterButtonListener mListener -> a
    boolean mOldPressed -> b
    void setOnShutterButtonListener(com.vinsol.expensetracker.cameraservice.ShutterButton$OnShutterButtonListener) -> a
    void drawableStateChanged() -> drawableStateChanged
    void callShutterButtonFocus(boolean) -> a
    boolean performClick() -> performClick
    void access$0(com.vinsol.expensetracker.cameraservice.ShutterButton,boolean) -> a
com.vinsol.expensetracker.cameraservice.ShutterButton$1 -> com.vinsol.expensetracker.cameraservice.u:
    com.vinsol.expensetracker.cameraservice.ShutterButton this$0 -> a
    boolean val$pressed -> b
    void run() -> run
com.vinsol.expensetracker.cameraservice.ShutterButton$OnShutterButtonListener -> com.vinsol.expensetracker.cameraservice.v:
    void onShutterButtonFocus(com.vinsol.expensetracker.cameraservice.ShutterButton,boolean) -> a
    void onShutterButtonClick(com.vinsol.expensetracker.cameraservice.ShutterButton) -> a
com.vinsol.expensetracker.edit.CameraActivity -> com.vinsol.expensetracker.edit.CameraActivity:
    android.widget.LinearLayout editCameraDetails -> u
    android.widget.ImageView editImageDisplay -> v
    android.widget.RelativeLayout editLoadProgress -> w
    float scale -> x
    int width -> y
    int height -> z
    void onCreate(android.os.Bundle) -> onCreate
    void setImageResource(android.graphics.drawable.Drawable) -> a
    void startCamera() -> h
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onClick(android.view.View) -> onClick
    void deleteFile() -> b
    java.lang.Boolean checkEntryModified() -> c
    boolean doTaskIfChanged() -> d
    void setDefaultTitle() -> e
    boolean checkFavoriteComplete() -> f
    void onBackPressed() -> onBackPressed
    android.widget.RelativeLayout access$1(com.vinsol.expensetracker.edit.CameraActivity) -> a
    android.widget.ImageView access$2(com.vinsol.expensetracker.edit.CameraActivity) -> b
    void access$3(com.vinsol.expensetracker.edit.CameraActivity,android.graphics.drawable.Drawable) -> a
com.vinsol.expensetracker.edit.CameraActivity$SaveAndDisplayImage -> com.vinsol.expensetracker.edit.a:
    com.vinsol.expensetracker.edit.CameraActivity this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.vinsol.expensetracker.edit.EditAbstract -> com.vinsol.expensetracker.edit.b:
    com.vinsol.expensetracker.models.Entry mEditList -> a
    com.vinsol.expensetracker.models.Favorite mFavoriteList -> b
    boolean setLocation -> c
    android.widget.EditText editAmount -> d
    android.widget.EditText editTag -> e
    android.os.Bundle intentExtras -> f
    boolean setUnknown -> g
    int typeOfEntryFinished -> h
    int typeOfEntryUnfinished -> i
    int typeOfEntry -> j
    boolean isChanged -> k
    com.vinsol.expensetracker.helpers.DatabaseAdapter mDatabaseAdapter -> l
    android.widget.TextView editHeaderTitle -> m
    android.widget.TextView dateBarDateview -> n
    java.lang.String dateViewString -> o
    android.widget.Button editDelete -> p
    android.widget.Button editSaveEntry -> q
    com.vinsol.expensetracker.models.Entry entry -> r
    com.vinsol.expensetracker.helpers.FileHelper fileHelper -> s
    boolean isFromFavorite -> t
    android.widget.TextView$OnEditorActionListener setEnterButtonToNext -> u
    android.view.View$OnFocusChangeListener focusChangeListener -> v
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void setSoftPanToInputMode() -> h
    void editHelper() -> g
    void setText(java.lang.String,java.lang.String) -> a
    com.vinsol.expensetracker.models.Entry getSaveEntryData(android.widget.TextView,java.lang.String) -> a
    com.vinsol.expensetracker.models.Entry getEntryListOnResult(com.vinsol.expensetracker.models.Entry) -> a
    void saveFavoriteEntry() -> i
    void setActivityResult(android.os.Bundle) -> a
    java.lang.Boolean checkEntryModified() -> c
    java.lang.Boolean checkFavoriteModified() -> j
    boolean isAmountModified(java.lang.String) -> a
    boolean isTagModified(java.lang.String) -> b
    void onClick(android.view.View) -> onClick
    void deleteEntry() -> k
    void deleteFavorite() -> l
    void onBackPressed() -> onBackPressed
    void doConfirmDialogAction(com.vinsol.expensetracker.helpers.ConfirmSaveEntryDialog) -> a
    void finishAndSetResult() -> m
    void onPause() -> onPause
    boolean doTaskIfChanged() -> d
    void setDefaultTitle() -> e
    boolean checkFavoriteComplete() -> f
    void deleteFile() -> b
    void access$0(com.vinsol.expensetracker.edit.EditAbstract) -> a
    void access$1(com.vinsol.expensetracker.edit.EditAbstract) -> b
    void access$2(com.vinsol.expensetracker.edit.EditAbstract) -> c
    void access$3(com.vinsol.expensetracker.edit.EditAbstract) -> d
    void access$4(com.vinsol.expensetracker.edit.EditAbstract) -> e
com.vinsol.expensetracker.edit.EditAbstract$1 -> com.vinsol.expensetracker.edit.c:
    com.vinsol.expensetracker.edit.EditAbstract this$0 -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
com.vinsol.expensetracker.edit.EditAbstract$2 -> com.vinsol.expensetracker.edit.d:
    com.vinsol.expensetracker.edit.EditAbstract this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.vinsol.expensetracker.edit.EditAbstract$3 -> com.vinsol.expensetracker.edit.e:
    com.vinsol.expensetracker.edit.EditAbstract this$0 -> a
    com.vinsol.expensetracker.helpers.DeleteDialog val$mDeleteDialog -> b
    void onDismiss(android.content.DialogInterface) -> onDismiss
com.vinsol.expensetracker.edit.EditAbstract$4 -> com.vinsol.expensetracker.edit.f:
    com.vinsol.expensetracker.edit.EditAbstract this$0 -> a
    com.vinsol.expensetracker.helpers.ConfirmSaveEntryDialog val$mConfirmSaveEntryDialog -> b
    void onDismiss(android.content.DialogInterface) -> onDismiss
com.vinsol.expensetracker.edit.EditAbstract$5 -> com.vinsol.expensetracker.edit.g:
    com.vinsol.expensetracker.edit.EditAbstract this$0 -> a
    com.vinsol.expensetracker.helpers.ConfirmSaveEntryDialog val$mConfirmSaveEntryDialog -> b
    void onDismiss(android.content.DialogInterface) -> onDismiss
com.vinsol.expensetracker.edit.EditAbstract$6 -> com.vinsol.expensetracker.edit.h:
    com.vinsol.expensetracker.edit.EditAbstract this$0 -> a
    com.vinsol.expensetracker.helpers.ConfirmSaveEntryDialog val$mConfirmSaveEntryDialog -> b
    void onDismiss(android.content.DialogInterface) -> onDismiss
com.vinsol.expensetracker.edit.TextEntry -> com.vinsol.expensetracker.edit.TextEntry:
    void onCreate(android.os.Bundle) -> onCreate
    void setDefaultTitle() -> e
    boolean checkFavoriteComplete() -> f
    void onBackPressed() -> onBackPressed
    void onClick(android.view.View) -> onClick
com.vinsol.expensetracker.edit.Voice -> com.vinsol.expensetracker.edit.Voice:
    android.widget.RelativeLayout editVoiceDetails -> u
    android.widget.Chronometer editTimeDetailsChronometer -> v
    android.widget.Button editStopButton -> w
    android.widget.Button editPlayButton -> x
    android.widget.Button editRerecordButton -> y
    com.vinsol.expensetracker.utils.MyCountDownTimer countDownTimer -> z
    com.vinsol.expensetracker.helpers.RecordingHelper mRecordingHelper -> A
    com.vinsol.expensetracker.helpers.AudioPlay mAudioPlay -> B
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    void onClick(android.view.View) -> onClick
    void deleteFile() -> b
    java.lang.Boolean checkEntryModified() -> c
    boolean doTaskIfChanged() -> d
    void setDefaultTitle() -> e
    boolean checkFavoriteComplete() -> f
    void onBackPressed() -> onBackPressed
    void stopRecordingAndPlayback() -> h
    android.widget.Chronometer access$0(com.vinsol.expensetracker.edit.Voice) -> a
    android.widget.Button access$1(com.vinsol.expensetracker.edit.Voice) -> b
    android.widget.Button access$2(com.vinsol.expensetracker.edit.Voice) -> c
    android.widget.Button access$3(com.vinsol.expensetracker.edit.Voice) -> d
com.vinsol.expensetracker.edit.Voice$1 -> com.vinsol.expensetracker.edit.i:
    com.vinsol.expensetracker.edit.Voice this$0 -> a
    void onChronometerTick(android.widget.Chronometer) -> onChronometerTick
com.vinsol.expensetracker.helpers.AudioPlay -> com.vinsol.expensetracker.a.a:
    java.io.File mPath -> a
    android.media.MediaPlayer mPlayer -> b
    android.content.Context mContext -> c
    com.vinsol.expensetracker.helpers.FileHelper fileHelper -> d
    void startPlayBack() -> a
    void stopPlayBack() -> b
    int getPlayBackTime() -> c
    boolean isAudioPlaying() -> d
com.vinsol.expensetracker.helpers.CameraFileSave -> com.vinsol.expensetracker.a.b:
    java.lang.String filename -> a
    int FULL_SIZE_IMAGE_WIDTH -> b
    int FULL_SIZE_IMAGE_HEIGHT -> c
    int SMALL_MAX_WIDTH -> d
    int SMALL_MAX_HEIGHT -> e
    int THUMBNAIL_MAX_HEIGHT -> f
    int THUMBNAIL_MAX_WIDTH -> g
    android.content.Context mContext -> h
    com.vinsol.expensetracker.helpers.FileHelper fileHelper -> i
    void resizeImageAndSaveThumbnails(java.lang.String,boolean) -> a
    void saveImage(java.io.File,android.graphics.Bitmap) -> a
    android.graphics.Bitmap getBitmap(java.io.File,int,int) -> a
com.vinsol.expensetracker.helpers.CheckEntryComplete -> com.vinsol.expensetracker.a.c:
    com.vinsol.expensetracker.helpers.FileHelper fileHelper -> a
    boolean isEntryComplete(com.vinsol.expensetracker.models.Entry,android.content.Context) -> a
com.vinsol.expensetracker.helpers.ConfirmSaveEntryDialog -> com.vinsol.expensetracker.a.d:
    boolean isOK -> a
    boolean isOK() -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.vinsol.expensetracker.helpers.ConvertCursorToListString -> com.vinsol.expensetracker.a.e:
    android.content.Context context -> a
    com.vinsol.expensetracker.helpers.DatabaseAdapter adapter -> b
    java.util.List getFavoriteList() -> a
    java.lang.String getValue$33783892(com.vinsol.expensetracker.helpers.DisplayDate,boolean,int) -> a
    java.util.List getDateListString$52656e23(boolean,java.lang.String,int) -> a
    java.lang.String getTotalAmount$67048f30(java.lang.Boolean,double) -> a
    java.util.List getEntryList(java.lang.Boolean,java.lang.String) -> a
    android.database.Cursor getCursor(java.lang.String,boolean) -> a
com.vinsol.expensetracker.helpers.CustomDatePickerDialog -> com.vinsol.expensetracker.a.f:
    java.lang.String YEAR -> a
    java.lang.String MONTH -> b
    java.lang.String DAY -> c
    android.widget.DatePicker mDatePicker -> d
    com.vinsol.expensetracker.helpers.CustomDatePickerDialog$OnDateSetListener mCallBack -> e
    java.util.Calendar mCalendar -> f
    int mInitialYear -> g
    int mInitialMonth -> h
    int mInitialDay -> i
    void onClick(android.content.DialogInterface,int) -> onClick
    void onDateChanged(android.widget.DatePicker,int,int,int) -> onDateChanged
    void updateTitle(int,int,int) -> a
    android.os.Bundle onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
com.vinsol.expensetracker.helpers.CustomDatePickerDialog$OnDateSetListener -> com.vinsol.expensetracker.a.g:
    void onDateSet$460822fe(int,int,int) -> a
com.vinsol.expensetracker.helpers.DatabaseAdapter -> com.vinsol.expensetracker.a.h:
    int DB_VERSION -> a
    java.lang.String DATABASE_NAME -> b
    java.lang.String ENTRY_TABLE -> c
    java.lang.String FAVORITE_TABLE -> d
    java.lang.String PREVIOUS_VERSION_ENTRY_TABLE -> e
    java.lang.String ENTRY_TABLE_CREATE -> f
    java.lang.String FAVORITE_TABLE_CREATE -> g
    android.database.sqlite.SQLiteDatabase db -> h
    com.vinsol.expensetracker.helpers.DatabaseAdapter$MyCreateOpenHelper createOpenHelper -> i
    com.vinsol.expensetracker.helpers.DatabaseAdapter open() -> a
    void close() -> b
    long insertToFavoriteTable(com.vinsol.expensetracker.models.Favorite) -> a
    boolean deleteFavoriteTableEntryID(java.lang.String) -> a
    boolean editFavoriteTable(com.vinsol.expensetracker.models.Favorite) -> b
    java.lang.Long insertToEntryTable(com.vinsol.expensetracker.models.Entry) -> a
    boolean deleteEntryTableEntryID(java.lang.String) -> b
    boolean editEntryTable(com.vinsol.expensetracker.models.Entry) -> b
    android.database.Cursor getEntryTableDateDatabaseDescending() -> c
    android.database.Cursor getEntryTableDateDatabaseDescending(java.lang.String) -> c
    android.database.Cursor getEntryTableDateDatabaseAscending() -> d
    android.database.Cursor getEntryTableDateDatabaseAscending(java.lang.String) -> d
    java.lang.Long getFavoriteIdEntryTable(java.lang.String) -> e
    void editFavoriteIdEntryTable(java.lang.String) -> f
    android.database.Cursor getFavoriteTableComplete() -> e
    int access$0() -> f
com.vinsol.expensetracker.helpers.DatabaseAdapter$MyCreateOpenHelper -> com.vinsol.expensetracker.a.i:
    com.vinsol.expensetracker.helpers.DatabaseAdapter this$0 -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onOpen(android.database.sqlite.SQLiteDatabase) -> onOpen
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.vinsol.expensetracker.helpers.DateHandler -> com.vinsol.expensetracker.a.j:
    android.widget.ImageButton previousArrow -> b
    android.widget.ImageButton nextArrow -> c
    android.widget.TextView dateview -> d
    com.vinsol.expensetracker.helpers.DisplayDate mDisplayDate -> e
    java.util.Calendar mCalendar -> f
    com.vinsol.expensetracker.helpers.CustomDatePickerDialog dialog -> g
    java.util.Calendar tempCalenderOnCancel -> a
    android.app.Activity activity -> h
    com.vinsol.expensetracker.helpers.CustomDatePickerDialog$OnDateSetListener dateSetListener -> i
    void doCommonTaskAfter(android.app.Activity) -> a
    void onClick(android.view.View) -> onClick
    boolean beforeCurrentDate(java.util.Calendar) -> b
    android.widget.TextView access$0(com.vinsol.expensetracker.helpers.DateHandler) -> a
    boolean access$1$1329e82e(java.util.Calendar) -> a
    android.widget.ImageButton access$2(com.vinsol.expensetracker.helpers.DateHandler) -> b
    java.util.Calendar access$3(com.vinsol.expensetracker.helpers.DateHandler) -> c
com.vinsol.expensetracker.helpers.DateHandler$1 -> com.vinsol.expensetracker.a.k:
    com.vinsol.expensetracker.helpers.DateHandler this$0 -> a
    void onDateSet$460822fe(int,int,int) -> a
com.vinsol.expensetracker.helpers.DateHandler$2 -> com.vinsol.expensetracker.a.l:
    com.vinsol.expensetracker.helpers.DateHandler this$0 -> a
    void onDismiss(android.content.DialogInterface) -> onDismiss
com.vinsol.expensetracker.helpers.DateHelper -> com.vinsol.expensetracker.a.m:
    java.util.Calendar mCalendar -> a
    boolean isCurrentWeek -> b
    void doCommonTask(java.lang.String,java.util.Calendar) -> a
    boolean isCurrentWeek() -> a
    long getTimeMillis() -> b
com.vinsol.expensetracker.helpers.DeleteDialog -> com.vinsol.expensetracker.a.n:
    boolean isDelete -> a
    android.widget.CheckBox checkBox -> b
    boolean isDelete() -> a
    void onClick(android.content.DialogInterface,int) -> onClick
    void access$0(com.vinsol.expensetracker.helpers.DeleteDialog) -> a
com.vinsol.expensetracker.helpers.DeleteDialog$1 -> com.vinsol.expensetracker.a.o:
    com.vinsol.expensetracker.helpers.DeleteDialog this$0 -> a
    android.content.Context val$context -> b
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.vinsol.expensetracker.helpers.DisplayDate -> com.vinsol.expensetracker.a.p:
    java.util.Calendar mCalendar -> a
    java.lang.String getDisplayDate() -> a
    java.lang.String getDisplayDateReport(long) -> a
    java.lang.String getDisplayDateReport(java.util.Calendar) -> a
    java.lang.String getReportDateRange(int,int,int,int,int,int) -> a
    java.lang.String date(java.util.Calendar) -> b
    java.lang.String getHeaderFooterListDisplayDate(int) -> a
    java.lang.String getDisplayDateGraph() -> b
    java.lang.String getDisplayDateHeaderGraph() -> c
    boolean isPrevYears() -> d
    boolean isNotCurrentMonthAndCurrentYear() -> e
    boolean isCurrentMonth() -> f
    boolean isCurrentWeek() -> g
    java.lang.String getMonth(int) -> c
    java.lang.String getSubListTag(int) -> b
    java.lang.String getLocationDate(java.lang.Long,java.lang.String) -> a
com.vinsol.expensetracker.helpers.FavoriteHelper -> com.vinsol.expensetracker.a.q:
    android.widget.ToggleButton showAddFavorite -> a
    android.widget.TextView showAddFavoriteTextView -> b
    android.app.Activity activity -> c
    com.vinsol.expensetracker.helpers.DatabaseAdapter mDatabaseAdapter -> d
    com.vinsol.expensetracker.helpers.FileHelper fileHelper -> e
    com.vinsol.expensetracker.models.Entry mShowList -> f
    boolean isFromEditPage -> g
    void setUIandClickListeners() -> a
    void onClick(android.view.View) -> onClick
    void onClickFavorite(java.lang.Boolean) -> a
    java.lang.String getTypeForFlurry() -> b
    void doTaskAfter(java.lang.Long) -> a
    void access$0(com.vinsol.expensetracker.helpers.FavoriteHelper,android.widget.EditText,android.widget.EditText,java.lang.String,java.lang.Boolean) -> a
    android.widget.ToggleButton access$1(com.vinsol.expensetracker.helpers.FavoriteHelper) -> a
    com.vinsol.expensetracker.models.Entry access$2(com.vinsol.expensetracker.helpers.FavoriteHelper) -> b
com.vinsol.expensetracker.helpers.FavoriteHelper$MyTextWatcher -> com.vinsol.expensetracker.a.r:
    android.widget.EditText amount -> b
    android.widget.EditText description -> c
    java.lang.Boolean isChanged -> d
    java.lang.String type -> e
    com.vinsol.expensetracker.helpers.FavoriteHelper this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.vinsol.expensetracker.helpers.FileHelper -> com.vinsol.expensetracker.a.s:
    void copyAllFromFavorite(java.lang.String,java.lang.String) -> a
    void copyAllToFavorite(java.lang.String,java.lang.String) -> b
    void deleteAllEntryFiles(java.lang.String) -> a
    void deleteAllFavoriteFiles(java.lang.String) -> b
    java.io.File getAudioFileFavorite(java.lang.String) -> c
    java.io.File getAudioFileEntry(java.lang.String) -> d
    java.io.File getCameraFileLargeFavorite(java.lang.String) -> e
    java.io.File getCameraFileLargeEntry(java.lang.String) -> f
    java.io.File getCameraFileSmallFavorite(java.lang.String) -> g
    java.io.File getCameraFileSmallEntry(java.lang.String) -> h
    java.io.File getCameraFileThumbnailFavorite(java.lang.String) -> i
    java.io.File getCameraFileThumbnailEntry(java.lang.String) -> j
    void copy(java.io.File,java.io.File) -> a
com.vinsol.expensetracker.helpers.GraphHelper -> com.vinsol.expensetracker.a.t:
    java.util.List mDataDateListGraph -> a
    com.vinsol.expensetracker.helpers.ConvertCursorToListString mConvertCursorToListString -> b
    java.util.List mSubList -> c
    java.util.ArrayList mGraphList -> d
    java.util.Calendar lastDateCalendar -> e
    android.app.Activity activity -> f
    android.widget.LinearLayout mainGraph -> g
    android.widget.ProgressBar graphProgressBar -> h
    android.widget.Gallery graphGallery -> i
    com.vinsol.expensetracker.helpers.GraphHelper$GalleryAdapter galleryAdapter -> j
    android.widget.TextView graphHeaderTextViewCenter -> k
    android.widget.TextView graphHeaderTextViewLeft -> l
    android.widget.TextView graphHeaderTextViewRight -> m
    boolean isNotNullAll(java.util.ArrayList) -> b
    java.util.List getDateIDList() -> a
    java.lang.String getWeekDay(int) -> a
    void onClick(android.view.View) -> onClick
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    android.app.Activity access$2(com.vinsol.expensetracker.helpers.GraphHelper) -> a
    java.util.List access$3(com.vinsol.expensetracker.helpers.GraphHelper) -> b
    java.util.ArrayList access$4(com.vinsol.expensetracker.helpers.GraphHelper) -> c
    boolean access$5$3bc970cf(java.util.ArrayList) -> a
    android.widget.TextView access$6(com.vinsol.expensetracker.helpers.GraphHelper) -> d
    android.widget.TextView access$7(com.vinsol.expensetracker.helpers.GraphHelper) -> e
    android.widget.TextView access$8(com.vinsol.expensetracker.helpers.GraphHelper) -> f
    android.widget.TextView access$9(com.vinsol.expensetracker.helpers.GraphHelper) -> g
com.vinsol.expensetracker.helpers.GraphHelper$1 -> com.vinsol.expensetracker.a.u:
    com.vinsol.expensetracker.helpers.GraphHelper this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
com.vinsol.expensetracker.helpers.GraphHelper$GalleryAdapter -> com.vinsol.expensetracker.a.v:
    android.widget.Gallery$LayoutParams params -> b
    com.vinsol.expensetracker.helpers.GraphHelper this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.vinsol.expensetracker.helpers.GraphHelper$GraphViewHolder -> com.vinsol.expensetracker.a.w:
    com.vinsol.android.graph.BarGraph barGraph -> a
    android.widget.LinearLayout graphMainView -> b
    com.vinsol.expensetracker.helpers.GraphHelper this$0 -> c
com.vinsol.expensetracker.helpers.LocationHelper -> com.vinsol.expensetracker.a.x:
    int SIGNIFICANT_TIME_DELTA -> b
    int STALE_GPS_REQUEST_TIME_DELTA -> c
    android.location.Location currentLocation -> d
    java.lang.String currentAddress -> a
    android.location.LocationListener locationListener -> e
    void requestLocationUpdate() -> a
    android.location.Location getBestAvailableLocation() -> b
    boolean isBetterLocation(android.location.Location) -> c
    void getCurrentAddress() -> d
    boolean access$0$70295bc2(android.location.Location) -> a
    void access$1(android.location.Location) -> b
    void access$2(com.vinsol.expensetracker.helpers.LocationHelper) -> a
    android.location.LocationListener access$3(com.vinsol.expensetracker.helpers.LocationHelper) -> b
    android.location.Location access$4() -> c
com.vinsol.expensetracker.helpers.LocationHelper$1 -> com.vinsol.expensetracker.a.y:
    com.vinsol.expensetracker.helpers.LocationHelper this$0 -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
com.vinsol.expensetracker.helpers.LocationHelper$2 -> com.vinsol.expensetracker.a.z:
    com.vinsol.expensetracker.helpers.LocationHelper this$0 -> a
    android.location.LocationManager val$locationManager -> b
    void run() -> run
com.vinsol.expensetracker.helpers.LocationHelper$3 -> com.vinsol.expensetracker.a.aa:
    java.util.List list -> a
    com.vinsol.expensetracker.helpers.LocationHelper this$0 -> b
    java.lang.Void doInBackground$10299ca() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.vinsol.expensetracker.helpers.RecordingHelper -> com.vinsol.expensetracker.a.ab:
    android.media.MediaRecorder mRecorder -> a
    boolean isRecording -> b
    android.content.Context mContext -> c
    void startRecording() -> a
    void stopRecording() -> b
    boolean isRecording() -> c
com.vinsol.expensetracker.helpers.SharedPreferencesHelper -> com.vinsol.expensetracker.a.ac:
    android.content.Context context -> a
    android.content.SharedPreferences getSharedPreferences() -> a
    void setDeletePrefs(java.lang.Boolean) -> a
    void setFlashPrefs(int) -> a
    void setBooleanPrefs$2563266() -> b
com.vinsol.expensetracker.helpers.StringProcessing -> com.vinsol.expensetracker.a.ad:
    java.lang.String getStringDoubleDecimal(java.lang.String) -> a
    java.lang.Double getAmount(java.lang.String) -> b
com.vinsol.expensetracker.helpers.UnfinishedEntryCount -> com.vinsol.expensetracker.a.ae:
    java.util.List entries -> e
    int countAll -> a
    int countThisWeek -> b
    int countThisMonth -> c
    int countThisYear -> d
    android.widget.TextView textViewThisWeek -> f
    android.widget.TextView textViewThisMonth -> g
    android.widget.TextView textViewThisYear -> h
    android.widget.TextView textViewAll -> i
    com.vinsol.expensetracker.helpers.DisplayDate displayDate -> j
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.vinsol.expensetracker.listing.AudioPlayDialog -> com.vinsol.expensetracker.listing.a:
    android.widget.Button stopButton -> a
    android.widget.Button playButton -> b
    android.widget.Button cancelButton -> c
    android.widget.Chronometer timeDetailsChronometer -> d
    com.vinsol.expensetracker.helpers.AudioPlay mAudioPlay -> e
    com.vinsol.expensetracker.utils.MyCountDownTimer countDownTimer -> f
    java.lang.String mFile -> g
    android.content.Context mContext -> h
    boolean isFromFav -> i
    void doCommonTaskBefore(android.content.Context,java.lang.String) -> a
    void doCommonTask() -> a
    void onClick(android.view.View) -> onClick
    void onDismiss(android.content.DialogInterface) -> onDismiss
    void onCancel(android.content.DialogInterface) -> onCancel
com.vinsol.expensetracker.listing.DescriptionDialog -> com.vinsol.expensetracker.listing.b:
    android.widget.Button cancelButton -> a
    android.widget.TextView textview -> b
    void onClick(android.view.View) -> onClick
com.vinsol.expensetracker.listing.ExpenseListing -> com.vinsol.expensetracker.listing.ExpenseListing:
    com.vinsol.expensetracker.helpers.UnfinishedEntryCount unfinishedEntryCount -> a
    com.vinsol.expensetracker.helpers.ConvertCursorToListString mConvertCursorToListString -> b
    android.widget.TextView unfinishedEntryCountAll -> c
    android.widget.TextView unfinishedEntryCountThisWeek -> d
    android.widget.TextView unfinishedEntryCountThisMonth -> e
    android.widget.TextView unfinishedEntryCountThisYear -> f
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void resetUnfinishedEntryCount() -> a
    void onClick(android.view.View) -> onClick
    void onPause() -> onPause
    void cancelUnfinishedEntryTask() -> b
com.vinsol.expensetracker.listing.ExpenseListingAll -> com.vinsol.expensetracker.listing.ExpenseListingAll:
    boolean condition(com.vinsol.expensetracker.helpers.DisplayDate) -> a
    void setType() -> a_
    void setModifiedValues() -> c
    void onResume() -> onResume
    boolean removeGenerateReport(android.view.Menu) -> a
    void noItemLayout() -> d
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
com.vinsol.expensetracker.listing.ExpenseListingThisMonth -> com.vinsol.expensetracker.listing.ExpenseListingThisMonth:
    boolean condition(com.vinsol.expensetracker.helpers.DisplayDate) -> a
    void setType() -> a_
    void setModifiedValues() -> c
    void onResume() -> onResume
    boolean removeGenerateReport(android.view.Menu) -> a
    void noItemLayout() -> d
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
com.vinsol.expensetracker.listing.ExpenseListingThisWeek -> com.vinsol.expensetracker.listing.ExpenseListingThisWeek:
    boolean condition(com.vinsol.expensetracker.helpers.DisplayDate) -> a
    void setType() -> a_
    void setModifiedValues() -> c
    void onResume() -> onResume
    boolean removeGenerateReport(android.view.Menu) -> a
    void noItemLayout() -> d
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
com.vinsol.expensetracker.listing.ExpenseListingThisYear -> com.vinsol.expensetracker.listing.ExpenseListingThisYear:
    boolean condition(com.vinsol.expensetracker.helpers.DisplayDate) -> a
    void setType() -> a_
    void setModifiedValues() -> c
    void onResume() -> onResume
    boolean removeGenerateReport(android.view.Menu) -> a
    void noItemLayout() -> d
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
com.vinsol.expensetracker.listing.ExpenseSubListing -> com.vinsol.expensetracker.listing.ExpenseSubListing:
    android.widget.TextView listingHeader -> k
    void onCreate(android.os.Bundle) -> onCreate
    void initListView() -> b
    void unknownDialogAction$552c4e01() -> e
    void onBackPressed() -> onBackPressed
    void noItemLayout() -> d
    void setContentView() -> f
    boolean condition(com.vinsol.expensetracker.helpers.DisplayDate) -> a
    int getType(android.os.Bundle) -> a
    void setModifiedValues() -> c
    boolean removeGenerateReport(android.view.Menu) -> a
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
com.vinsol.expensetracker.listing.ExpenseSubListing$1 -> com.vinsol.expensetracker.listing.c:
    com.vinsol.expensetracker.listing.ExpenseSubListing this$0 -> a
    void onClick(android.view.View) -> onClick
com.vinsol.expensetracker.listing.FavoriteActivity -> com.vinsol.expensetracker.listing.FavoriteActivity:
    java.util.List mList -> a
    com.vinsol.expensetracker.helpers.DatabaseAdapter mDatabaseAdapter -> b
    android.widget.TextView editDateBarDateview -> c
    android.os.Bundle intentExtras -> d
    com.vinsol.expensetracker.listing.FavoriteActivity$MyAdapter mAdapter -> e
    java.lang.String dateViewString -> f
    java.lang.String id -> g
    com.vinsol.expensetracker.helpers.FileHelper fileHelper -> h
    boolean isManaging -> i
    android.widget.ListView mFavoriteListview -> j
    android.widget.EditText searchBox -> k
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void startEditPage(int) -> a
    void setSearchBoxVisibility() -> b
    void favListEmpty() -> c
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    com.vinsol.expensetracker.helpers.FileHelper access$0(com.vinsol.expensetracker.listing.FavoriteActivity) -> a
    android.widget.EditText access$1(com.vinsol.expensetracker.listing.FavoriteActivity) -> b
    java.util.List access$2(com.vinsol.expensetracker.listing.FavoriteActivity) -> c
    void access$3(com.vinsol.expensetracker.listing.FavoriteActivity,com.vinsol.expensetracker.listing.FavoriteActivity$MyAdapter) -> a
    android.widget.ListView access$4(com.vinsol.expensetracker.listing.FavoriteActivity) -> d
    com.vinsol.expensetracker.listing.FavoriteActivity$MyAdapter access$5(com.vinsol.expensetracker.listing.FavoriteActivity) -> e
    boolean access$6(com.vinsol.expensetracker.listing.FavoriteActivity,int) -> a
    boolean access$7(com.vinsol.expensetracker.listing.FavoriteActivity,int) -> b
    boolean access$8(com.vinsol.expensetracker.listing.FavoriteActivity,int) -> c
com.vinsol.expensetracker.listing.FavoriteActivity$1 -> com.vinsol.expensetracker.listing.d:
    com.vinsol.expensetracker.listing.FavoriteActivity this$0 -> a
    java.util.List val$mList_sort -> b
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.vinsol.expensetracker.listing.FavoriteActivity$MyAdapter -> com.vinsol.expensetracker.listing.e:
    android.view.LayoutInflater mInflater -> b
    java.util.List mList -> c
    com.vinsol.expensetracker.listing.FavoriteActivity this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.util.List access$1(com.vinsol.expensetracker.listing.FavoriteActivity$MyAdapter) -> a
com.vinsol.expensetracker.listing.FavoriteActivity$MyClickListener -> com.vinsol.expensetracker.listing.f:
    com.vinsol.expensetracker.models.Favorite tempFavorite -> a
    com.vinsol.expensetracker.listing.FavoriteActivity this$0 -> b
    void onClick(android.view.View) -> onClick
com.vinsol.expensetracker.listing.FavoriteActivity$ViewHolder -> com.vinsol.expensetracker.listing.g:
    android.widget.TextView rowTag -> a
    android.widget.TextView rowAmount -> b
    android.widget.ImageView rowImageview -> c
    android.widget.ImageView rowFavoriteIcon -> d
    android.widget.TextView rowLocationTime -> e
    com.vinsol.expensetracker.listing.FavoriteActivity this$0 -> f
com.vinsol.expensetracker.listing.GroupedIconDialogClickListener -> com.vinsol.expensetracker.listing.h:
    com.vinsol.expensetracker.listing.UnknownEntryDialog unknownDialog -> a
    android.app.Activity activity -> b
    android.os.Bundle bundle -> c
    long timeInMillis -> d
    void onClick(android.view.View) -> onClick
    com.vinsol.expensetracker.listing.UnknownEntryDialog access$0(com.vinsol.expensetracker.listing.GroupedIconDialogClickListener) -> a
    android.app.Activity access$1(com.vinsol.expensetracker.listing.GroupedIconDialogClickListener) -> b
    void access$2(com.vinsol.expensetracker.listing.GroupedIconDialogClickListener,int,com.vinsol.expensetracker.models.Entry) -> a
    android.os.Bundle access$3(com.vinsol.expensetracker.listing.GroupedIconDialogClickListener) -> c
    long access$4(com.vinsol.expensetracker.listing.GroupedIconDialogClickListener) -> d
com.vinsol.expensetracker.listing.GroupedIconDialogClickListener$1 -> com.vinsol.expensetracker.listing.i:
    com.vinsol.expensetracker.listing.GroupedIconDialogClickListener this$0 -> a
    com.vinsol.expensetracker.models.Entry val$toInsert -> b
    void onClick(android.view.View) -> onClick
com.vinsol.expensetracker.listing.ListingAbstract -> com.vinsol.expensetracker.listing.j:
    java.util.List mDataDateList -> a
    com.vinsol.expensetracker.listing.SeparatedListAdapter mSeparatedListAdapter -> b
    java.util.List mSubList -> c
    com.vinsol.expensetracker.helpers.ConvertCursorToListString mConvertCursorToListString -> d
    com.vinsol.expensetracker.helpers.StringProcessing mStringProcessing -> e
    android.widget.ListView mListView -> f
    java.lang.String highlightID -> g
    com.vinsol.expensetracker.listing.UnknownEntryDialog unknownDialog -> h
    android.os.Bundle intentExtras -> i
    com.vinsol.expensetracker.helpers.DatabaseAdapter mDatabaseAdapter -> k
    int type -> j
    void onStart() -> onStart
    void onStop() -> onStop
    boolean removeGenerateReport(android.view.Menu) -> a
    void onCreate(android.os.Bundle) -> onCreate
    int getType(android.os.Bundle) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void removeItem(int) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void addSections() -> g
    void startSubListing(com.vinsol.expensetracker.models.Entry) -> a
    int getSubListType() -> h
    boolean getLoopCondition(java.util.Calendar,int,int,int) -> a
    void unknownDialogAction$552c4e01() -> e
    void noItemLayout() -> d
    void setContentView() -> f
    boolean condition(com.vinsol.expensetracker.helpers.DisplayDate) -> a
    void initListView() -> b
    void setModifiedValues() -> c
com.vinsol.expensetracker.listing.ListingAbstract$1 -> com.vinsol.expensetracker.listing.k:
    com.vinsol.expensetracker.listing.ListingAbstract this$0 -> a
    com.vinsol.expensetracker.models.Entry val$mTempClickedList -> b
    void onClick(android.view.View) -> onClick
com.vinsol.expensetracker.listing.SeparatedListAdapter -> com.vinsol.expensetracker.listing.l:
    java.util.Map sections -> a
    android.widget.ArrayAdapter headers -> b
    android.widget.ArrayAdapter footers -> c
    android.content.Context mContext -> d
    java.util.List mDataDateList -> e
    android.view.LayoutInflater mInflater -> f
    com.vinsol.expensetracker.listing.UnknownEntryDialog unknownEntryDialog -> g
    android.view.View viewHeader -> h
    android.view.View viewFooter -> i
    com.vinsol.expensetracker.helpers.FileHelper fileHelper -> j
    java.lang.String highlightID -> k
    void addSection(java.lang.String,android.widget.ArrayAdapter,java.util.List) -> a
    java.lang.Object getItem(int) -> getItem
    int getCount() -> getCount
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    boolean isEnabled(int) -> isEnabled
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    long getItemId(int) -> getItemId
    boolean remove(int) -> a
    void update(com.vinsol.expensetracker.models.Entry,int,java.lang.String,com.vinsol.expensetracker.models.Entry) -> a
    java.lang.String getSectionNumber(int) -> b
    java.util.List getDataDateList() -> a
    void setBackGround(com.vinsol.expensetracker.listing.SeparatedListAdapter$ViewHolderBody,com.vinsol.expensetracker.helpers.CheckEntryComplete,com.vinsol.expensetracker.models.Entry) -> a
    boolean isCurrentWeek(java.lang.String) -> a
    void updateAmount(java.lang.String,com.vinsol.expensetracker.models.Entry,com.vinsol.expensetracker.models.Entry) -> a
    android.content.Context access$0(com.vinsol.expensetracker.listing.SeparatedListAdapter) -> a
    com.vinsol.expensetracker.helpers.FileHelper access$1(com.vinsol.expensetracker.listing.SeparatedListAdapter) -> b
com.vinsol.expensetracker.listing.SeparatedListAdapter$MyClickListener -> com.vinsol.expensetracker.listing.m:
    com.vinsol.expensetracker.models.Entry mListenerList -> a
    com.vinsol.expensetracker.listing.SeparatedListAdapter this$0 -> b
    void onClick(android.view.View) -> onClick
com.vinsol.expensetracker.listing.SeparatedListAdapter$ViewHolderBody -> com.vinsol.expensetracker.listing.n:
    android.widget.TextView rowLocationTime -> a
    android.widget.TextView rowTag -> b
    android.widget.TextView rowAmount -> c
    android.widget.ImageView rowImageview -> d
    android.widget.ImageView rowFavoriteIcon -> e
    android.widget.RelativeLayout rowListview -> f
    android.widget.ImageView dividerImageView -> g
    com.vinsol.expensetracker.listing.SeparatedListAdapter this$0 -> h
com.vinsol.expensetracker.listing.SeparatedListAdapter$ViewHolderFooter -> com.vinsol.expensetracker.listing.o:
    android.widget.Button addExpensesButton -> a
    android.widget.LinearLayout addExpenses -> b
    com.vinsol.expensetracker.listing.SeparatedListAdapter this$0 -> c
com.vinsol.expensetracker.listing.SeparatedListAdapter$ViewHolderHeader -> com.vinsol.expensetracker.listing.p:
    android.widget.TextView listDateView -> a
    android.widget.TextView listAmountView -> b
    com.vinsol.expensetracker.listing.SeparatedListAdapter this$0 -> c
com.vinsol.expensetracker.listing.TabLayoutListingAbstract -> com.vinsol.expensetracker.listing.q:
    android.os.Bundle bundle -> o
    boolean isModifiedThisWeek -> k
    boolean isModifiedThisMonth -> l
    boolean isModifiedThisYear -> m
    boolean isModifiedAll -> n
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void initListView() -> b
    void unknownDialogAction$552c4e01() -> e
    void setContentView() -> f
    void noItemLayout() -> d
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void setType() -> a_
com.vinsol.expensetracker.listing.UnknownEntryDialog -> com.vinsol.expensetracker.listing.r:
    android.widget.Button deleteButton -> a
    android.widget.Button textEntryButton -> b
    android.widget.Button voiceEntryButton -> c
    android.widget.Button cameraEntryButton -> d
    android.widget.Button favoriteEntryButton -> e
    android.widget.Button cancelButton -> f
    android.os.Bundle bundle -> g
    com.vinsol.expensetracker.helpers.DatabaseAdapter mDatabaseAdapter -> h
    com.vinsol.expensetracker.models.Entry mTempClickedList -> i
    android.widget.TextView headerTextView -> j
    android.widget.TextView locationTextView -> k
    void onCreateDialog() -> a
    void onClick(android.view.View) -> onClick
    void editDatabase(int) -> a
com.vinsol.expensetracker.models.Entry -> com.vinsol.expensetracker.models.Entry:
    java.lang.String id -> a
    java.lang.Long timeInMillis -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    int describeContents() -> describeContents
com.vinsol.expensetracker.models.Entry$1 -> com.vinsol.expensetracker.models.a:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.vinsol.expensetracker.models.Favorite -> com.vinsol.expensetracker.models.Favorite:
    java.lang.String favId -> c
    java.lang.String amount -> d
    java.lang.String description -> e
    java.lang.String type -> f
    java.lang.String location -> g
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    int describeContents() -> describeContents
com.vinsol.expensetracker.models.Favorite$1 -> com.vinsol.expensetracker.models.b:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.vinsol.expensetracker.models.GraphDataList -> com.vinsol.expensetracker.models.c:
    java.lang.String idList -> a
com.vinsol.expensetracker.models.ListDatetimeAmount -> com.vinsol.expensetracker.models.d:
    java.lang.String dateTime -> b
    java.lang.String amount -> c
com.vinsol.expensetracker.show.ShowAbstract -> com.vinsol.expensetracker.show.a:
    android.widget.TextView showAmount -> a
    android.widget.TextView showTag -> b
    com.vinsol.expensetracker.models.Entry mShowList -> c
    android.os.Bundle intentExtras -> d
    int typeOfEntryFinished -> e
    int typeOfEntryUnfinished -> f
    int typeOfEntry -> g
    android.widget.TextView showHeaderTitle -> h
    int SHOW_RESULT -> i
    com.vinsol.expensetracker.helpers.DatabaseAdapter mDatabaseAdapter -> j
    android.widget.Button showDelete -> k
    android.widget.Button showEdit -> l
    java.lang.String tempfavID -> o
    com.vinsol.expensetracker.helpers.FileHelper fileHelper -> m
    com.vinsol.expensetracker.helpers.FavoriteHelper mFavoriteHelper -> n
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void showHelper() -> b
    void doTaskOnActivityResult() -> c
    void onClick(android.view.View) -> onClick
    void delete() -> f
    void setResultModifiedToListing() -> g
    void onBackPressed() -> onBackPressed
    void editAction() -> d
    void deleteFile() -> e
    void access$0(com.vinsol.expensetracker.show.ShowAbstract) -> a
com.vinsol.expensetracker.show.ShowAbstract$1 -> com.vinsol.expensetracker.show.b:
    com.vinsol.expensetracker.show.ShowAbstract this$0 -> a
    com.vinsol.expensetracker.helpers.DeleteDialog val$mDeleteDialog -> b
    void onDismiss(android.content.DialogInterface) -> onDismiss
com.vinsol.expensetracker.show.ShowCameraActivity -> com.vinsol.expensetracker.show.ShowCameraActivity:
    android.widget.ImageView showImageDisplay -> o
    android.widget.LinearLayout showCameraDetails -> p
    void onCreate(android.os.Bundle) -> onCreate
    void deleteFile() -> e
    void editAction() -> d
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void doTaskOnActivityResult() -> c
    void onBackPressed() -> onBackPressed
    void showHelper() -> b
com.vinsol.expensetracker.show.ShowDateHandler -> com.vinsol.expensetracker.show.c:
    android.widget.TextView showHeaderTitle -> a
com.vinsol.expensetracker.show.ShowLocationHandler -> com.vinsol.expensetracker.show.d:
    android.widget.TextView showLocation -> a
com.vinsol.expensetracker.show.ShowTextActivity -> com.vinsol.expensetracker.show.ShowTextActivity:
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void editAction() -> d
    void doTaskOnActivityResult() -> c
    void onBackPressed() -> onBackPressed
    void onClick(android.view.View) -> onClick
    void showHelper() -> b
com.vinsol.expensetracker.show.ShowVoiceActivity -> com.vinsol.expensetracker.show.ShowVoiceActivity:
    android.widget.RelativeLayout showVoiceDetails -> o
    android.widget.Button showPlayButton -> p
    android.widget.Button showStopButton -> q
    android.widget.Chronometer showTimeDetailsChronometer -> r
    com.vinsol.expensetracker.utils.MyCountDownTimer countDownTimer -> s
    com.vinsol.expensetracker.helpers.AudioPlay mAudioPlay -> t
    void onCreate(android.os.Bundle) -> onCreate
    void updateUI() -> f
    void deleteFile() -> e
    void editAction() -> d
    void onClick(android.view.View) -> onClick
    void onPause() -> onPause
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void doTaskOnActivityResult() -> c
    void onBackPressed() -> onBackPressed
    void showHelper() -> b
com.vinsol.expensetracker.utils.DisplayTimeForChronometer -> com.vinsol.expensetracker.utils.a:
    java.lang.String getDisplayTime(long) -> a
com.vinsol.expensetracker.utils.GetArrayListFromString -> com.vinsol.expensetracker.utils.b:
com.vinsol.expensetracker.utils.GetMonth -> com.vinsol.expensetracker.utils.c:
    int getMonth(java.lang.String) -> a
com.vinsol.expensetracker.utils.ImagePreview -> com.vinsol.expensetracker.utils.ImagePreview:
    java.lang.String id -> a
    android.widget.ImageView mImageView -> b
    java.lang.String path -> c
    java.lang.String smallPath -> d
    android.os.AsyncTask imageViewAsyncTask -> e
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    android.widget.ImageView access$0(com.vinsol.expensetracker.utils.ImagePreview) -> a
    java.lang.String access$1(com.vinsol.expensetracker.utils.ImagePreview) -> b
    java.lang.String access$2(com.vinsol.expensetracker.utils.ImagePreview) -> c
com.vinsol.expensetracker.utils.ImagePreview$ImageViewAsyncTask -> com.vinsol.expensetracker.utils.d:
    android.graphics.drawable.Drawable imageDrawable -> b
    com.vinsol.expensetracker.utils.ImagePreview this$0 -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.vinsol.expensetracker.utils.ImageViewExtended -> com.vinsol.expensetracker.utils.ImageViewExtended:
    void setPressed(boolean) -> setPressed
    void setSelected(boolean) -> setSelected
com.vinsol.expensetracker.utils.Log -> com.vinsol.expensetracker.utils.e:
    java.lang.String app -> a
    boolean DEBUG -> b
    void d(java.lang.Object) -> a
com.vinsol.expensetracker.utils.MyCountDownTimer -> com.vinsol.expensetracker.utils.f:
    com.vinsol.expensetracker.utils.DisplayTimeForChronometer mDisplayTime -> a
    android.widget.Chronometer showDetailsChronometer -> b
    android.widget.Button showStopButton -> c
    android.widget.Button showPlayButton -> d
    com.vinsol.expensetracker.helpers.AudioPlay mAudioPlay -> e
    void onFinish() -> onFinish
    void onTick(long) -> onTick
